
gps_to_pc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08004fa8  08004fa8  00014fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  000202f0  2**0
                  CONTENTS
  4 .ARM          00000000  080053bc  080053bc  000202f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053bc  080053bc  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200002f0  080056b4  000202f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  080056b4  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005873  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001500  00000000  00000000  00025b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00027098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  000276a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ecda  00000000  00000000  00027bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e1f  00000000  00000000  000368ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053c0a  00000000  00000000  0003c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000902f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad8  00000000  00000000  00090344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00092e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00092ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f8c 	.word	0x08004f8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002f4 	.word	0x200002f4
 800020c:	08004f8c 	.word	0x08004f8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <init>:
 *
 */


void init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	Sys_ClockInit();
 8000bec:	f001 f914 	bl	8001e18 <Sys_ClockInit>

	Sys_IoInit();
 8000bf0:	f001 f8e8 	bl	8001dc4 <Sys_IoInit>

	UART_Init(UART_1, 9600);
 8000bf4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f001 f91f 	bl	8001e3c <UART_Init>
	IO_Write(IOP_LED, 0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f001 f807 	bl	8001c14 <IO_Write>
	IO_Init(IOP_LED, IO_MODE_OUTPUT);
 8000c06:	2101      	movs	r1, #1
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 ff7d 	bl	8001b08 <IO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <main>:
  printf("SAYI:%10u\n", ++count);
  UART_printf("Count: %10lu\r", ++count);
}

int main(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0


	init();
 8000c16:	f7ff ffe7 	bl	8000be8 <init>
		//UART_puts(data);
//		Task_LED();
		//Task_Print();
		//Task_IUART();
//		OLED_Test();
		Task_GNSS();
 8000c1a:	f000 ff1f 	bl	8001a5c <Task_GNSS>
 8000c1e:	e7fc      	b.n	8000c1a <main+0x8>

08000c20 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	extern void Sys_ClockTick(void);

	Sys_ClockTick();
 8000c74:	f001 f8c2 	bl	8001dfc <Sys_ClockTick>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <SystemInit+0x60>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <SystemInit+0x60>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <SystemInit+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <SystemInit+0x64>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <SystemInit+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <SystemInit+0x64>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <SystemInit+0x64>)
 8000ca8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <SystemInit+0x64>)
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <SystemInit+0x68>)
 8000cb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <SystemInit+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <SystemInit+0x64>)
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000cca:	f000 f80d 	bl	8000ce8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cce:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <SystemInit+0x60>)
 8000cd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd4:	609a      	str	r2, [r3, #8]
#endif
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	24003010 	.word	0x24003010

08000ce8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000cf6:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <SetSysClock+0x11c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a42      	ldr	r2, [pc, #264]	; (8000e04 <SetSysClock+0x11c>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <SetSysClock+0x11c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d103      	bne.n	8000d20 <SetSysClock+0x38>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000d1e:	d1f0      	bne.n	8000d02 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <SetSysClock+0x11c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	e001      	b.n	8000d36 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d15c      	bne.n	8000df6 <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d3c:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <SetSysClock+0x11c>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a30      	ldr	r2, [pc, #192]	; (8000e04 <SetSysClock+0x11c>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <SetSysClock+0x120>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <SetSysClock+0x120>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d52:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <SetSysClock+0x11c>)
 8000d56:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <SetSysClock+0x11c>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <SetSysClock+0x11c>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <SetSysClock+0x11c>)
 8000d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d66:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <SetSysClock+0x11c>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <SetSysClock+0x11c>)
 8000d6e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000d72:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <SetSysClock+0x11c>)
 8000d76:	4a25      	ldr	r2, [pc, #148]	; (8000e0c <SetSysClock+0x124>)
 8000d78:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <SetSysClock+0x11c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <SetSysClock+0x11c>)
 8000d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d84:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d86:	bf00      	nop
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <SetSysClock+0x11c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f9      	beq.n	8000d88 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <SetSysClock+0x120>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <SetSysClock+0x120>)
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8000da0:	bf00      	nop
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <SetSysClock+0x120>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f9      	beq.n	8000da2 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <SetSysClock+0x120>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <SetSysClock+0x120>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8000dba:	bf00      	nop
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <SetSysClock+0x120>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f9      	beq.n	8000dbc <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <SetSysClock+0x128>)
 8000dca:	f240 7205 	movw	r2, #1797	; 0x705
 8000dce:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <SetSysClock+0x11c>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <SetSysClock+0x11c>)
 8000dd6:	f023 0303 	bic.w	r3, r3, #3
 8000dda:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <SetSysClock+0x11c>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <SetSysClock+0x11c>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000de8:	bf00      	nop
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SetSysClock+0x11c>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d1f9      	bne.n	8000dea <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000
 8000e0c:	77405a08 	.word	0x77405a08
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e076      	b.n	8000f1e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e30:	2201      	movs	r2, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d165      	bne.n	8000f18 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2103      	movs	r1, #3
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d003      	beq.n	8000e8a <GPIO_Init+0x76>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d12e      	bne.n	8000ee8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2103      	movs	r1, #3
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	795b      	ldrb	r3, [r3, #5]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	7992      	ldrb	r2, [r2, #6]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	b292      	uxth	r2, r2
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	b292      	uxth	r2, r2
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	401a      	ands	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	79db      	ldrb	r3, [r3, #7]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d985      	bls.n	8000e30 <GPIO_Init+0x1c>
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	807b      	strh	r3, [r7, #2]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f4a:	787a      	ldrb	r2, [r7, #1]
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	210f      	movs	r1, #15
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	8879      	ldrh	r1, [r7, #2]
 8000f7c:	08c9      	lsrs	r1, r1, #3
 8000f7e:	b289      	uxth	r1, r1
 8000f80:	4608      	mov	r0, r1
 8000f82:	ea02 0103 	and.w	r1, r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f100 0208 	add.w	r2, r0, #8
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	08db      	lsrs	r3, r3, #3
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b08b      	sub	sp, #44	; 0x2c
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000fe8:	4b6f      	ldr	r3, [pc, #444]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	2b0c      	cmp	r3, #12
 8000ff6:	f200 8091 	bhi.w	800111c <RCC_GetClocksFreq+0x158>
 8000ffa:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <RCC_GetClocksFreq+0x3c>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	08001035 	.word	0x08001035
 8001004:	0800111d 	.word	0x0800111d
 8001008:	0800111d 	.word	0x0800111d
 800100c:	0800111d 	.word	0x0800111d
 8001010:	0800103d 	.word	0x0800103d
 8001014:	0800111d 	.word	0x0800111d
 8001018:	0800111d 	.word	0x0800111d
 800101c:	0800111d 	.word	0x0800111d
 8001020:	08001045 	.word	0x08001045
 8001024:	0800111d 	.word	0x0800111d
 8001028:	0800111d 	.word	0x0800111d
 800102c:	0800111d 	.word	0x0800111d
 8001030:	080010b1 	.word	0x080010b1
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a5d      	ldr	r2, [pc, #372]	; (80011ac <RCC_GetClocksFreq+0x1e8>)
 8001038:	601a      	str	r2, [r3, #0]
    break;
 800103a:	e073      	b.n	8001124 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a5c      	ldr	r2, [pc, #368]	; (80011b0 <RCC_GetClocksFreq+0x1ec>)
 8001040:	601a      	str	r2, [r3, #0]
    break;
 8001042:	e06f      	b.n	8001124 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	0d9b      	lsrs	r3, r3, #22
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001050:	4b55      	ldr	r3, [pc, #340]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001058:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001060:	4a53      	ldr	r2, [pc, #332]	; (80011b0 <RCC_GetClocksFreq+0x1ec>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
 8001068:	4a4f      	ldr	r2, [pc, #316]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 800106a:	6852      	ldr	r2, [r2, #4]
 800106c:	0992      	lsrs	r2, r2, #6
 800106e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	e00b      	b.n	8001092 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800107a:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <RCC_GetClocksFreq+0x1e8>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8001084:	6852      	ldr	r2, [r2, #4]
 8001086:	0992      	lsrs	r2, r2, #6
 8001088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	3301      	adds	r3, #1
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80010a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
    break;
 80010ae:	e039      	b.n	8001124 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	0d9b      	lsrs	r3, r3, #22
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010c4:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00c      	beq.n	80010e6 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010cc:	4a38      	ldr	r2, [pc, #224]	; (80011b0 <RCC_GetClocksFreq+0x1ec>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d4:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 80010d6:	6852      	ldr	r2, [r2, #4]
 80010d8:	0992      	lsrs	r2, r2, #6
 80010da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010de:	fb02 f303 	mul.w	r3, r2, r3
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
 80010e4:	e00b      	b.n	80010fe <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010e6:	4a31      	ldr	r2, [pc, #196]	; (80011ac <RCC_GetClocksFreq+0x1e8>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4a2e      	ldr	r2, [pc, #184]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 80010f0:	6852      	ldr	r2, [r2, #4]
 80010f2:	0992      	lsrs	r2, r2, #6
 80010f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	0f1b      	lsrs	r3, r3, #28
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	3301      	adds	r3, #1
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	fbb2 f2f3 	udiv	r2, r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
    break;
 800111a:	e003      	b.n	8001124 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <RCC_GetClocksFreq+0x1e8>)
 8001120:	601a      	str	r2, [r3, #0]
    break;
 8001122:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800112c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001134:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <RCC_GetClocksFreq+0x1f0>)
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	40da      	lsrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001154:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	0a9b      	lsrs	r3, r3, #10
 800115a:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <RCC_GetClocksFreq+0x1f0>)
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	40da      	lsrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <RCC_GetClocksFreq+0x1e4>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800117c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	0b5b      	lsrs	r3, r3, #13
 8001182:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <RCC_GetClocksFreq+0x1f0>)
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	40da      	lsrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	60da      	str	r2, [r3, #12]
}
 800119c:	bf00      	nop
 800119e:	372c      	adds	r7, #44	; 0x2c
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40023800 	.word	0x40023800
 80011ac:	00f42400 	.word	0x00f42400
 80011b0:	007a1200 	.word	0x007a1200
 80011b4:	20000004 	.word	0x20000004

080011b8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ce:	4909      	ldr	r1, [pc, #36]	; (80011f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80011d6:	e006      	b.n	80011e6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	43db      	mvns	r3, r3
 80011e0:	4904      	ldr	r1, [pc, #16]	; (80011f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <RCC_APB1PeriphClockCmd+0x3c>)
 800120c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120e:	4909      	ldr	r1, [pc, #36]	; (8001234 <RCC_APB1PeriphClockCmd+0x3c>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4313      	orrs	r3, r2
 8001214:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001216:	e006      	b.n	8001226 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <RCC_APB1PeriphClockCmd+0x3c>)
 800121a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	43db      	mvns	r3, r3
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <RCC_APB1PeriphClockCmd+0x3c>)
 8001222:	4013      	ands	r3, r2
 8001224:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <RCC_APB2PeriphClockCmd+0x3c>)
 800124c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800124e:	4909      	ldr	r1, [pc, #36]	; (8001274 <RCC_APB2PeriphClockCmd+0x3c>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001256:	e006      	b.n	8001266 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <RCC_APB2PeriphClockCmd+0x3c>)
 800125a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	43db      	mvns	r3, r3
 8001260:	4904      	ldr	r1, [pc, #16]	; (8001274 <RCC_APB2PeriphClockCmd+0x3c>)
 8001262:	4013      	ands	r3, r2
 8001264:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	8a1b      	ldrh	r3, [r3, #16]
 8001296:	b29b      	uxth	r3, r3
 8001298:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	88db      	ldrh	r3, [r3, #6]
 80012a6:	461a      	mov	r2, r3
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	4313      	orrs	r3, r2
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	899b      	ldrh	r3, [r3, #12]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80012c4:	f023 030c 	bic.w	r3, r3, #12
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	889a      	ldrh	r2, [r3, #4]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	891b      	ldrh	r3, [r3, #8]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80012da:	4313      	orrs	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	4313      	orrs	r3, r2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	8a9b      	ldrh	r3, [r3, #20]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	899b      	ldrh	r3, [r3, #12]
 8001302:	461a      	mov	r2, r3
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	4313      	orrs	r3, r2
 8001308:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe54 	bl	8000fc4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <USART_Init+0x168>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d003      	beq.n	800132c <USART_Init+0xb4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a2f      	ldr	r2, [pc, #188]	; (80013e4 <USART_Init+0x16c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d102      	bne.n	8001332 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	e001      	b.n	8001336 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	899b      	ldrh	r3, [r3, #12]
 800133a:	b29b      	uxth	r3, r3
 800133c:	b21b      	sxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	da0c      	bge.n	800135c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001342:	6a3a      	ldr	r2, [r7, #32]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009a      	lsls	r2, r3, #2
 800134c:	441a      	add	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	e00b      	b.n	8001374 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800135c:	6a3a      	ldr	r2, [r7, #32]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	009a      	lsls	r2, r3, #2
 8001366:	441a      	add	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <USART_Init+0x170>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	095b      	lsrs	r3, r3, #5
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	2264      	movs	r2, #100	; 0x64
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	899b      	ldrh	r3, [r3, #12]
 8001396:	b29b      	uxth	r3, r3
 8001398:	b21b      	sxth	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	da0c      	bge.n	80013b8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	3332      	adds	r3, #50	; 0x32
 80013a4:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <USART_Init+0x170>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b2:	4313      	orrs	r3, r2
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	e00b      	b.n	80013d0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	3332      	adds	r3, #50	; 0x32
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <USART_Init+0x170>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013cc:	4313      	orrs	r3, r2
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	811a      	strh	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40011000 	.word	0x40011000
 80013e4:	40011400 	.word	0x40011400
 80013e8:	51eb851f 	.word	0x51eb851f

080013ec <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	b29b      	uxth	r3, r3
 8001404:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800140e:	e007      	b.n	8001420 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	819a      	strh	r2, [r3, #12]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800143e:	b29a      	uxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	809a      	strh	r2, [r3, #4]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	889b      	ldrh	r3, [r3, #4]
 800145c:	b29b      	uxth	r3, r3
 800145e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001462:	b29b      	uxth	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	b2db      	uxtb	r3, r3
 800149c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80014a6:	2201      	movs	r2, #1
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d103      	bne.n	80014be <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	330c      	adds	r3, #12
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e009      	b.n	80014d2 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d103      	bne.n	80014cc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3310      	adds	r3, #16
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e002      	b.n	80014d2 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3314      	adds	r3, #20
 80014d0:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80014d2:	787b      	ldrb	r3, [r7, #1]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80014e4:	e006      	b.n	80014f4 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	43da      	mvns	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	400a      	ands	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b29a      	uxth	r2, r3
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	4013      	ands	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001566:	2201      	movs	r2, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	899b      	ldrh	r3, [r3, #12]
 800157a:	b29b      	uxth	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4013      	ands	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e011      	b.n	80015aa <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d107      	bne.n	800159c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	8a1b      	ldrh	r3, [r3, #16]
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4013      	ands	r3, r2
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e006      	b.n	80015aa <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	8a9b      	ldrh	r3, [r3, #20]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4013      	ands	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80015b2:	2201      	movs	r2, #1
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <USART_GetITStatus+0xa4>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80015d6:	2301      	movs	r3, #1
 80015d8:	74fb      	strb	r3, [r7, #19]
 80015da:	e001      	b.n	80015e0 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80015f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015f6:	e003      	b.n	8001600 <LoopCopyDataInit>

080015f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015fe:	3104      	adds	r1, #4

08001600 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001604:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001606:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001608:	d3f6      	bcc.n	80015f8 <CopyDataInit>
  ldr  r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800160c:	e002      	b.n	8001614 <LoopFillZerobss>

0800160e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800160e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001610:	f842 3b04 	str.w	r3, [r2], #4

08001614 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001616:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001618:	d3f9      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800161a:	f7ff fb2f 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f000 fd1d 	bl	800205c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff faf6 	bl	8000c12 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800162c:	080053c4 	.word	0x080053c4
  ldr  r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001634:	200002f0 	.word	0x200002f0
  ldr  r2, =_sbss
 8001638:	200002f0 	.word	0x200002f0
  ldr  r3, = _ebss
 800163c:	20000848 	.word	0x20000848

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>

08001642 <FIFO_Clear>:
 */

#include "fifo.h"

void FIFO_Clear(FIFO *pFifo)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  pFifo->Head = pFifo->Tail = pFifo->Buffer;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	605a      	str	r2, [r3, #4]

  pFifo->nLines = 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  pFifo->Full = FALSE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	741a      	strb	r2, [r3, #16]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <FIFO_Init>:

// FIFO yapısını başlatır
void FIFO_Init(FIFO *pFifo, unsigned char *buf, int size)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  pFifo->Buffer = buf;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	601a      	str	r2, [r3, #0]
  pFifo->Size = size;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	60da      	str	r2, [r3, #12]

  FIFO_Clear(pFifo);
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ffd9 	bl	8001642 <FIFO_Clear>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <FIFO_IsEmpty>:

// FIFO yapısında veri yoksa (boşsa) TRUE
// veri varsa FALSE
int FIFO_IsEmpty(FIFO *pFifo)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return (pFifo->Head == pFifo->Tail);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <FIFO_SetData>:

// FIFO yapısına veri ekler
// Ekleme başarılıysa TRUE döner
// Aksi durumda (full) FALSE döner
int FIFO_SetData(FIFO *pFifo, unsigned char val)
{
 80016be:	b480      	push	{r7}
 80016c0:	b085      	sub	sp, #20
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70fb      	strb	r3, [r7, #3]
  unsigned char *ptr = pFifo->Tail;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	60fb      	str	r3, [r7, #12]

  if (++ptr == pFifo->Buffer + pFifo->Size)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68d2      	ldr	r2, [r2, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d102      	bne.n	80016ec <FIFO_SetData+0x2e>
    ptr = pFifo->Buffer;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]

  if (ptr == pFifo->Head) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d104      	bne.n	8001700 <FIFO_SetData+0x42>
    // Buffer full
    pFifo->Full = TRUE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	741a      	strb	r2, [r3, #16]
    return FALSE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e00f      	b.n	8001720 <FIFO_SetData+0x62>
  }

  *pFifo->Tail = val; // veri yüklendi
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	701a      	strb	r2, [r3, #0]
  pFifo->Tail = ptr;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	609a      	str	r2, [r3, #8]

  if (val == '\n')
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d104      	bne.n	800171e <FIFO_SetData+0x60>
    ++pFifo->nLines;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	615a      	str	r2, [r3, #20]

  return TRUE;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <FIFO_GetData>:

// FIFO yapısından veri çeker
// Bloke çalışır (çekilecek veri yoksa)
unsigned char FIFO_GetData(FIFO *pFifo)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  unsigned char val;

  while (FIFO_IsEmpty(pFifo)) ;
 8001734:	bf00      	nop
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffae 	bl	8001698 <FIFO_IsEmpty>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f9      	bne.n	8001736 <FIFO_GetData+0xa>

  // FIFO da çekilecek veri var
  val = *pFifo->Head;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	73fb      	strb	r3, [r7, #15]

  // Head göstericisini ilerlet
  if (++pFifo->Head == pFifo->Buffer + pFifo->Size)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	68c9      	ldr	r1, [r1, #12]
 8001760:	440b      	add	r3, r1
 8001762:	429a      	cmp	r2, r3
 8001764:	d103      	bne.n	800176e <FIFO_GetData+0x42>
    pFifo->Head = pFifo->Buffer;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	605a      	str	r2, [r3, #4]

  pFifo->Full = FALSE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	741a      	strb	r2, [r3, #16]

  if (val == '\n')
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d104      	bne.n	8001784 <FIFO_GetData+0x58>
    --pFifo->nLines;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	615a      	str	r2, [r3, #20]

  return val;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <FIFO_GetLine>:
// parametre LineBuf'a kopyalar
// Çekilecek line yoksa FALSE döner, varsa TRUE döner
// Line verisinin aktarıldığı buufer'ın (LineBuf)
// sonuna '\0' eklenir
int FIFO_GetLine(FIFO *pFifo, unsigned char *LineBuf)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  unsigned char val;

  if (pFifo->nLines == 0)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <FIFO_GetLine+0x16>
    return FALSE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e010      	b.n	80017c6 <FIFO_GetLine+0x38>

  do {
    val = FIFO_GetData(pFifo);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ffc1 	bl	800172c <FIFO_GetData>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
    *LineBuf++ = val;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	603a      	str	r2, [r7, #0]
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	701a      	strb	r2, [r3, #0]
  } while (val != '\n');
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b0a      	cmp	r3, #10
 80017bc:	d1f2      	bne.n	80017a4 <FIFO_GetLine+0x16>

  *LineBuf = '\0';
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
  return TRUE;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <NVIC_EnableIRQ+0x30>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da0b      	bge.n	8001830 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <NVIC_SetPriority+0x4c>)
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	3b04      	subs	r3, #4
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182e:	e009      	b.n	8001844 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <NVIC_SetPriority+0x50>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00
 8001854:	e000e100 	.word	0xe000e100

08001858 <USART6_IRQHandler>:
static unsigned char _RxBuf[SZ_BUF];

static FIFO     _RxFifo;

void USART6_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  unsigned char c;

  if (USART_GetITStatus(GUART_ST, USART_IT_RXNE)) {
 800185e:	f240 5125 	movw	r1, #1317	; 0x525
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <USART6_IRQHandler+0x34>)
 8001864:	f7ff fe68 	bl	8001538 <USART_GetITStatus>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <USART6_IRQHandler+0x2a>
    // gelen veriyi alýyoruz
    c = USART_ReceiveData(GUART_ST);
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <USART6_IRQHandler+0x34>)
 8001870:	f7ff fdee 	bl	8001450 <USART_ReceiveData>
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]

    // FIFO buffer'a ekliyoruz
    FIFO_SetData(&_RxFifo, c);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	4619      	mov	r1, r3
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <USART6_IRQHandler+0x38>)
 800187e:	f7ff ff1e 	bl	80016be <FIFO_SetData>
  }
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40011400 	.word	0x40011400
 8001890:	2000070c 	.word	0x2000070c

08001894 <GNSS_Init>:

void GNSS_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  // IUART baþlangýç
  UART_Init(GUART, 9600);
 8001898:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800189c:	2005      	movs	r0, #5
 800189e:	f000 facd 	bl	8001e3c <UART_Init>

  // FIFO baþlangýç
  FIFO_Init(&_RxFifo, _RxBuf, SZ_BUF);
 80018a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a6:	4909      	ldr	r1, [pc, #36]	; (80018cc <GNSS_Init+0x38>)
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <GNSS_Init+0x3c>)
 80018aa:	f7ff fee2 	bl	8001672 <FIFO_Init>

  // Interrupt ayarlarý
  // a) ST yakasý
  USART_ITConfig(GUART_ST, USART_IT_RXNE, ENABLE);
 80018ae:	2201      	movs	r2, #1
 80018b0:	f240 5125 	movw	r1, #1317	; 0x525
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <GNSS_Init+0x40>)
 80018b6:	f7ff fddb 	bl	8001470 <USART_ITConfig>

  // b) ARM takasý
  NVIC_SetPriority(GUART_IRQn, 3);
 80018ba:	2103      	movs	r1, #3
 80018bc:	2047      	movs	r0, #71	; 0x47
 80018be:	f7ff ffa1 	bl	8001804 <NVIC_SetPriority>
  NVIC_EnableIRQ(GUART_IRQn);
 80018c2:	2047      	movs	r0, #71	; 0x47
 80018c4:	f7ff ff84 	bl	80017d0 <NVIC_EnableIRQ>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000030c 	.word	0x2000030c
 80018d0:	2000070c 	.word	0x2000070c
 80018d4:	40011400 	.word	0x40011400

080018d8 <hex2bin>:

unsigned char hex2bin(unsigned char c)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if (isdigit(c))
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a16      	ldr	r2, [pc, #88]	; (8001940 <hex2bin+0x68>)
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <hex2bin+0x24>
    return c - '0';
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3b30      	subs	r3, #48	; 0x30
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e01a      	b.n	8001932 <hex2bin+0x5a>

  c = toupper(c);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	3301      	adds	r3, #1
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <hex2bin+0x68>)
 8001906:	4413      	add	r3, r2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d102      	bne.n	8001918 <hex2bin+0x40>
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	3b20      	subs	r3, #32
 8001916:	e000      	b.n	800191a <hex2bin+0x42>
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	71fb      	strb	r3, [r7, #7]
  if (c >= 'A' && c <= 'F')
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b40      	cmp	r3, #64	; 0x40
 8001920:	d906      	bls.n	8001930 <hex2bin+0x58>
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b46      	cmp	r3, #70	; 0x46
 8001926:	d803      	bhi.n	8001930 <hex2bin+0x58>
    return c - 'A' + 0xA;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	3b37      	subs	r3, #55	; 0x37
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e000      	b.n	8001932 <hex2bin+0x5a>

  return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	08004fe0 	.word	0x08004fe0

08001944 <NMEA_Check>:

int NMEA_Check(void *nmBuf)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  unsigned char c, chk;
  const unsigned char *ptr = (const unsigned char *)nmBuf;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	613b      	str	r3, [r7, #16]

  if (*ptr++ != '$')
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	613a      	str	r2, [r7, #16]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b24      	cmp	r3, #36	; 0x24
 800195a:	d001      	beq.n	8001960 <NMEA_Check+0x1c>
    return FALSE;
 800195c:	2300      	movs	r3, #0
 800195e:	e02e      	b.n	80019be <NMEA_Check+0x7a>

  chk = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	75fb      	strb	r3, [r7, #23]
  while ((c = *ptr++) != '\0') {
 8001964:	e022      	b.n	80019ac <NMEA_Check+0x68>
    if (c == '*') {
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2b2a      	cmp	r3, #42	; 0x2a
 800196a:	d11b      	bne.n	80019a4 <NMEA_Check+0x60>
      c = hex2bin(*ptr++) << 4;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	613a      	str	r2, [r7, #16]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ffaf 	bl	80018d8 <hex2bin>
 800197a:	4603      	mov	r3, r0
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	73fb      	strb	r3, [r7, #15]
      c |= hex2bin(*ptr);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ffa7 	bl	80018d8 <hex2bin>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	4313      	orrs	r3, r2
 8001992:	73fb      	strb	r3, [r7, #15]

      return (c == chk);
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	429a      	cmp	r2, r3
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e00c      	b.n	80019be <NMEA_Check+0x7a>
    }

    chk ^= c;
 80019a4:	7dfa      	ldrb	r2, [r7, #23]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4053      	eors	r3, r2
 80019aa:	75fb      	strb	r3, [r7, #23]
  while ((c = *ptr++) != '\0') {
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	613a      	str	r2, [r7, #16]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1d4      	bne.n	8001966 <NMEA_Check+0x22>
  }

  return FALSE;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <NMEA_Token>:

// iToken: token index
// geri dönüþ: çekilen token stringi
// ya da NULL (bulunamadý)
char *NMEA_Token(void *nmBuf, int iToken)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  char c, len, *s, *p;
  static char token[SZ_TOKEN + 1];

  s = (char *)nmBuf;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	613b      	str	r3, [r7, #16]
  while (iToken-- > 0) {
 80019d6:	e00c      	b.n	80019f2 <NMEA_Token+0x2a>
    while ((c = *s++) != ',')
      if (c == '\0')
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <NMEA_Token+0x1a>
        return NULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	e034      	b.n	8001a4c <NMEA_Token+0x84>
    while ((c = *s++) != ',')
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	613a      	str	r2, [r7, #16]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	72fb      	strb	r3, [r7, #11]
 80019ec:	7afb      	ldrb	r3, [r7, #11]
 80019ee:	2b2c      	cmp	r3, #44	; 0x2c
 80019f0:	d1f2      	bne.n	80019d8 <NMEA_Token+0x10>
  while (iToken-- > 0) {
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	603a      	str	r2, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dcf2      	bgt.n	80019e2 <NMEA_Token+0x1a>
  }

  len = SZ_TOKEN;
 80019fc:	2340      	movs	r3, #64	; 0x40
 80019fe:	75fb      	strb	r3, [r7, #23]
  p = token;
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <NMEA_Token+0x90>)
 8001a02:	60fb      	str	r3, [r7, #12]

  while (1) {
    if (len-- == 0)
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	75fa      	strb	r2, [r7, #23]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <NMEA_Token+0x4a>
      return NULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e01c      	b.n	8001a4c <NMEA_Token+0x84>

    c = *s++;
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	613a      	str	r2, [r7, #16]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	72fb      	strb	r3, [r7, #11]
    if (c == '\0')
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <NMEA_Token+0x5e>
      return NULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e012      	b.n	8001a4c <NMEA_Token+0x84>

    if ((c == ',') || (c == '*') || (c == '\r'))
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	2b2c      	cmp	r3, #44	; 0x2c
 8001a2a:	d00b      	beq.n	8001a44 <NMEA_Token+0x7c>
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a30:	d008      	beq.n	8001a44 <NMEA_Token+0x7c>
 8001a32:	7afb      	ldrb	r3, [r7, #11]
 8001a34:	2b0d      	cmp	r3, #13
 8001a36:	d005      	beq.n	8001a44 <NMEA_Token+0x7c>
        break;

    *p++ = c;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60fa      	str	r2, [r7, #12]
 8001a3e:	7afa      	ldrb	r2, [r7, #11]
 8001a40:	701a      	strb	r2, [r3, #0]
    if (len-- == 0)
 8001a42:	e7df      	b.n	8001a04 <NMEA_Token+0x3c>
  }

  *p = '\0';
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

  return token;
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <NMEA_Token+0x90>)
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000724 	.word	0x20000724

08001a5c <Task_GNSS>:


void Task_GNSS(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  } state = S_INIT;

  static unsigned char lbuf[128];
  static char strTime[16];

  switch (state) {
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <Task_GNSS+0x94>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d02c      	beq.n	8001ac2 <Task_GNSS+0x66>
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	dc3e      	bgt.n	8001aea <Task_GNSS+0x8e>
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <Task_GNSS+0x1a>
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d006      	beq.n	8001a82 <Task_GNSS+0x26>
    //UART_printf("%2.2s:%2.2s:%2.2s\n", strTime, strTime + 2, strTime + 4);
    UART_printf("%s",lbuf);
    state = S_LINE;
    break;
  }
}
 8001a74:	e039      	b.n	8001aea <Task_GNSS+0x8e>
    GNSS_Init();
 8001a76:	f7ff ff0d 	bl	8001894 <GNSS_Init>
    state = S_LINE;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <Task_GNSS+0x94>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
    break;
 8001a80:	e033      	b.n	8001aea <Task_GNSS+0x8e>
    if (!FIFO_GetLine(&_RxFifo, lbuf))
 8001a82:	491c      	ldr	r1, [pc, #112]	; (8001af4 <Task_GNSS+0x98>)
 8001a84:	481c      	ldr	r0, [pc, #112]	; (8001af8 <Task_GNSS+0x9c>)
 8001a86:	f7ff fe82 	bl	800178e <FIFO_GetLine>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d029      	beq.n	8001ae4 <Task_GNSS+0x88>
    if (!strncmp((const char *)lbuf, "$GPRMC", 6))
 8001a90:	2206      	movs	r2, #6
 8001a92:	491a      	ldr	r1, [pc, #104]	; (8001afc <Task_GNSS+0xa0>)
 8001a94:	4817      	ldr	r0, [pc, #92]	; (8001af4 <Task_GNSS+0x98>)
 8001a96:	f000 ff7f 	bl	8002998 <strncmp>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <Task_GNSS+0x4a>
      state = S_GPRMC;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <Task_GNSS+0x94>)
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	701a      	strb	r2, [r3, #0]
    if (state != S_LINE)
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <Task_GNSS+0x94>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d01c      	beq.n	8001ae8 <Task_GNSS+0x8c>
      if (!NMEA_Check(lbuf))
 8001aae:	4811      	ldr	r0, [pc, #68]	; (8001af4 <Task_GNSS+0x98>)
 8001ab0:	f7ff ff48 	bl	8001944 <NMEA_Check>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <Task_GNSS+0x8c>
        state = S_LINE;
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <Task_GNSS+0x94>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    break;
 8001ac0:	e012      	b.n	8001ae8 <Task_GNSS+0x8c>
    strcpy(strTime, NMEA_Token(lbuf, 1));
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <Task_GNSS+0x98>)
 8001ac6:	f7ff ff7f 	bl	80019c8 <NMEA_Token>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4619      	mov	r1, r3
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <Task_GNSS+0xa4>)
 8001ad0:	f000 ff5a 	bl	8002988 <strcpy>
    UART_printf("%s",lbuf);
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <Task_GNSS+0x98>)
 8001ad6:	480b      	ldr	r0, [pc, #44]	; (8001b04 <Task_GNSS+0xa8>)
 8001ad8:	f000 faa2 	bl	8002020 <UART_printf>
    state = S_LINE;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <Task_GNSS+0x94>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
    break;
 8001ae2:	e002      	b.n	8001aea <Task_GNSS+0x8e>
      break;
 8001ae4:	bf00      	nop
 8001ae6:	e000      	b.n	8001aea <Task_GNSS+0x8e>
    break;
 8001ae8:	bf00      	nop
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000765 	.word	0x20000765
 8001af4:	20000768 	.word	0x20000768
 8001af8:	2000070c 	.word	0x2000070c
 8001afc:	08004fa8 	.word	0x08004fa8
 8001b00:	200007e8 	.word	0x200007e8
 8001b04:	08004fb0 	.word	0x08004fb0

08001b08 <IO_Init>:
#define _IOS_
#include "io.h"


void IO_Init(int idx, int mode)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStructure;

	switch (mode) {
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d85d      	bhi.n	8001bd4 <IO_Init+0xcc>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <IO_Init+0x18>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	08001b73 	.word	0x08001b73
 8001b28:	08001b8f 	.word	0x08001b8f
 8001b2c:	08001bc7 	.word	0x08001bc7
 8001b30:	08001b57 	.word	0x08001b57
 8001b34:	08001b65 	.word	0x08001b65
 8001b38:	08001b81 	.word	0x08001b81
 8001b3c:	08001b9d 	.word	0x08001b9d
 8001b40:	08001bab 	.word	0x08001bab
 8001b44:	08001bb9 	.word	0x08001bb9
		case IO_MODE_INPUT:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73bb      	strb	r3, [r7, #14]
			break;
 8001b54:	e03e      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_INPUT_PD:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001b56:	2300      	movs	r3, #0
 8001b58:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73bb      	strb	r3, [r7, #14]
			break;
 8001b62:	e037      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_INPUT_PU:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001b64:	2300      	movs	r3, #0
 8001b66:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73bb      	strb	r3, [r7, #14]
			break;
 8001b70:	e030      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_OUTPUT:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b72:	2301      	movs	r3, #1
 8001b74:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73bb      	strb	r3, [r7, #14]
			break;
 8001b7e:	e029      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_OUTPUT_OD:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b80:	2301      	movs	r3, #1
 8001b82:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73bb      	strb	r3, [r7, #14]
			break;
 8001b8c:	e022      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_ALTERNATE:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73bb      	strb	r3, [r7, #14]
			break;
 8001b9a:	e01b      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_ALTERNATE_PU:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73bb      	strb	r3, [r7, #14]
			break;
 8001ba8:	e014      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_ALTERNATE_OD:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001baa:	2302      	movs	r3, #2
 8001bac:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73bb      	strb	r3, [r7, #14]
			break;
 8001bb6:	e00d      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_ALTERNATE_OD_PU:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73bb      	strb	r3, [r7, #14]
			break;
 8001bc4:	e006      	b.n	8001bd4 <IO_Init+0xcc>
		case IO_MODE_ANALOG:
			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	733b      	strb	r3, [r7, #12]
			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73bb      	strb	r3, [r7, #14]
			break;
 8001bd2:	bf00      	nop
	}
	GPIO_InitStructure.GPIO_Pin = (1 << _ios[idx].pin);
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <IO_Init+0x104>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001be6:	2303      	movs	r3, #3
 8001be8:	737b      	strb	r3, [r7, #13]

	GPIO_Init(GPIO_Ports[_ios[idx].port], &GPIO_InitStructure);
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <IO_Init+0x104>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <IO_Init+0x108>)
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	f107 0208 	add.w	r2, r7, #8
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f908 	bl	8000e14 <GPIO_Init>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000014 	.word	0x20000014
 8001c10:	2000007c 	.word	0x2000007c

08001c14 <IO_Write>:


void IO_Write(int idx, int val)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
	if (val)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01a      	beq.n	8001c5a <IO_Write+0x46>
	{
		GPIO_Ports[_ios[idx].port]->ODR |= (1 << _ios[idx].pin);
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <IO_Write+0x88>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <IO_Write+0x8c>)
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	4919      	ldr	r1, [pc, #100]	; (8001c9c <IO_Write+0x88>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	4915      	ldr	r1, [pc, #84]	; (8001c9c <IO_Write+0x88>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001c4e:	4914      	ldr	r1, [pc, #80]	; (8001ca0 <IO_Write+0x8c>)
 8001c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c54:	4302      	orrs	r2, r0
 8001c56:	615a      	str	r2, [r3, #20]
	}
	else
	{
		GPIO_Ports[_ios[idx].port]->ODR &= ~(1 << _ios[idx].pin);
	}
}
 8001c58:	e01a      	b.n	8001c90 <IO_Write+0x7c>
		GPIO_Ports[_ios[idx].port]->ODR &= ~(1 << _ios[idx].pin);
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <IO_Write+0x88>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <IO_Write+0x8c>)
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	490c      	ldr	r1, [pc, #48]	; (8001c9c <IO_Write+0x88>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4907      	ldr	r1, [pc, #28]	; (8001c9c <IO_Write+0x88>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001c86:	4906      	ldr	r1, [pc, #24]	; (8001ca0 <IO_Write+0x8c>)
 8001c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c8c:	4002      	ands	r2, r0
 8001c8e:	615a      	str	r2, [r3, #20]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000014 	.word	0x20000014
 8001ca0:	2000007c 	.word	0x2000007c

08001ca4 <USART2_IRQHandler>:
}

volatile static int _txFlag;

void USART2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
  unsigned char c;

  if (USART_GetITStatus(IUART_ST, USART_IT_RXNE)) {
 8001caa:	f240 5125 	movw	r1, #1317	; 0x525
 8001cae:	481b      	ldr	r0, [pc, #108]	; (8001d1c <USART2_IRQHandler+0x78>)
 8001cb0:	f7ff fc42 	bl	8001538 <USART_GetITStatus>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <USART2_IRQHandler+0x2a>
    // gelen veriyi alýyoruz
    c = USART_ReceiveData(IUART_ST);
 8001cba:	4818      	ldr	r0, [pc, #96]	; (8001d1c <USART2_IRQHandler+0x78>)
 8001cbc:	f7ff fbc8 	bl	8001450 <USART_ReceiveData>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]

    // FIFO buffer'a ekliyoruz
    FIFO_SetData(&_RxFifo, c);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4815      	ldr	r0, [pc, #84]	; (8001d20 <USART2_IRQHandler+0x7c>)
 8001cca:	f7ff fcf8 	bl	80016be <FIFO_SetData>
  }

  if (USART_GetITStatus(IUART_ST, USART_IT_TXE)) {
 8001cce:	f240 7127 	movw	r1, #1831	; 0x727
 8001cd2:	4812      	ldr	r0, [pc, #72]	; (8001d1c <USART2_IRQHandler+0x78>)
 8001cd4:	f7ff fc30 	bl	8001538 <USART_GetITStatus>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <USART2_IRQHandler+0x6e>
    // Tx FIFO'dan veri çekiyoruz
    c = FIFO_GetData(&_TxFifo);
 8001cde:	4811      	ldr	r0, [pc, #68]	; (8001d24 <USART2_IRQHandler+0x80>)
 8001ce0:	f7ff fd24 	bl	800172c <FIFO_GetData>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]

    // Veriyi TDR'a yüklüyoruz
    USART_SendData(IUART_ST, c);
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <USART2_IRQHandler+0x78>)
 8001cf0:	f7ff fb9c 	bl	800142c <USART_SendData>

    // Gönderilecek veri kalmadýysa TX kesme kaynaðý kapatýlmalý
    if (FIFO_IsEmpty(&_TxFifo)) {
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <USART2_IRQHandler+0x80>)
 8001cf6:	f7ff fccf 	bl	8001698 <FIFO_IsEmpty>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <USART2_IRQHandler+0x6e>
      USART_ITConfig(IUART_ST, USART_IT_TXE, DISABLE);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f240 7127 	movw	r1, #1831	; 0x727
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <USART2_IRQHandler+0x78>)
 8001d08:	f7ff fbb2 	bl	8001470 <USART_ITConfig>
      _txFlag = 0;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <USART2_IRQHandler+0x84>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40004400 	.word	0x40004400
 8001d20:	200007f8 	.word	0x200007f8
 8001d24:	20000810 	.word	0x20000810
 8001d28:	20000828 	.word	0x20000828

08001d2c <NVIC_SetPriority>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da0b      	bge.n	8001d58 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <NVIC_SetPriority+0x4c>)
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	3b04      	subs	r3, #4
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	761a      	strb	r2, [r3, #24]
}
 8001d56:	e009      	b.n	8001d6c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <NVIC_SetPriority+0x50>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ffc2 	bl	8001d2c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <Sys_IoInit>:
};

#define N_PORTS		(sizeof(GPIO_Clocks) / sizeof(int))

void Sys_IoInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
	int i;

	for (i = 0; i < N_PORTS; ++i)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	e00a      	b.n	8001de6 <Sys_IoInit+0x22>
		RCC_AHB1PeriphClockCmd(GPIO_Clocks[i], ENABLE);
 8001dd0:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <Sys_IoInit+0x34>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f9ec 	bl	80011b8 <RCC_AHB1PeriphClockCmd>
	for (i = 0; i < N_PORTS; ++i)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3301      	adds	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0a      	cmp	r3, #10
 8001dea:	d9f1      	bls.n	8001dd0 <Sys_IoInit+0xc>
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08004fb4 	.word	0x08004fb4

08001dfc <Sys_ClockTick>:

void Sys_ClockTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	++g_TmTick;
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <Sys_ClockTick+0x18>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <Sys_ClockTick+0x18>)
 8001e08:	6013      	str	r3, [r2, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	2000082c 	.word	0x2000082c

08001e18 <Sys_ClockInit>:

void Sys_ClockInit(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / CLOCK_PER_SEC);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <Sys_ClockInit+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <Sys_ClockInit+0x20>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ffa9 	bl	8001d80 <SysTick_Config>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <UART_Init>:
		{ IOP_U5TX, IOP_U5RX, GPIO_AF_UART5, RCC_APB1Periph_UART5 },
		{ IOP_U6TX, IOP_U6RX, GPIO_AF_USART6, RCC_APB2Periph_USART6 },
};

void UART_Init(int idx, int baud)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	USART_InitTypeDef uInit;
	int i, port, pin;

	if (idx >= N_UARTS)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	f200 8083 	bhi.w	8001f54 <UART_Init+0x118>
		return;

	i = _uCfg[idx].ioTx;
 8001e4e:	4a43      	ldr	r2, [pc, #268]	; (8001f5c <UART_Init+0x120>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
	port = _ios[i].port;
 8001e5a:	4a41      	ldr	r2, [pc, #260]	; (8001f60 <UART_Init+0x124>)
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e62:	623b      	str	r3, [r7, #32]
	pin = _ios[i].pin;
 8001e64:	4a3e      	ldr	r2, [pc, #248]	; (8001f60 <UART_Init+0x124>)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61fb      	str	r3, [r7, #28]


	IO_Init(i, IO_MODE_ALTERNATE);
 8001e70:	2102      	movs	r1, #2
 8001e72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e74:	f7ff fe48 	bl	8001b08 <IO_Init>

	GPIO_PinAFConfig(GPIO_Ports[port], pin, _uCfg[idx].afUART);
 8001e78:	4a3a      	ldr	r2, [pc, #232]	; (8001f64 <UART_Init+0x128>)
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	b299      	uxth	r1, r3
 8001e84:	4a35      	ldr	r2, [pc, #212]	; (8001f5c <UART_Init+0x120>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	f7ff f84e 	bl	8000f32 <GPIO_PinAFConfig>

	i = _uCfg[idx].ioRx;
 8001e96:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <UART_Init+0x120>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
	port = _ios[i].port;
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <UART_Init+0x124>)
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001eac:	623b      	str	r3, [r7, #32]
	pin = _ios[i].pin;
 8001eae:	4a2c      	ldr	r2, [pc, #176]	; (8001f60 <UART_Init+0x124>)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61fb      	str	r3, [r7, #28]

	IO_Init(i, IO_MODE_ALTERNATE);
 8001eba:	2102      	movs	r1, #2
 8001ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ebe:	f7ff fe23 	bl	8001b08 <IO_Init>

	GPIO_PinAFConfig(GPIO_Ports[port], pin, _uCfg[idx].afUART);
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <UART_Init+0x128>)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <UART_Init+0x120>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f7ff f829 	bl	8000f32 <GPIO_PinAFConfig>

	if (idx == UART_1 || idx == UART_6)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <UART_Init+0xb0>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d10a      	bne.n	8001f02 <UART_Init+0xc6>
	    RCC_APB2PeriphClockCmd(_uCfg[idx].ckUART, ENABLE);
 8001eec:	4a1b      	ldr	r2, [pc, #108]	; (8001f5c <UART_Init+0x120>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	4413      	add	r3, r2
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f99c 	bl	8001238 <RCC_APB2PeriphClockCmd>
 8001f00:	e009      	b.n	8001f16 <UART_Init+0xda>
	else
	    RCC_APB1PeriphClockCmd(_uCfg[idx].ckUART, ENABLE);
 8001f02:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <UART_Init+0x120>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f971 	bl	80011f8 <RCC_APB1PeriphClockCmd>

	uInit.USART_BaudRate = baud;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
	uInit.USART_WordLength = USART_WordLength_8b;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	823b      	strh	r3, [r7, #16]
	uInit.USART_StopBits = USART_StopBits_1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	827b      	strh	r3, [r7, #18]
	uInit.USART_Parity = USART_Parity_No;
 8001f22:	2300      	movs	r3, #0
 8001f24:	82bb      	strh	r3, [r7, #20]
	uInit.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001f26:	230c      	movs	r3, #12
 8001f28:	82fb      	strh	r3, [r7, #22]
	uInit.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	833b      	strh	r3, [r7, #24]

	USART_Init(_tUART[idx], &uInit);
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <UART_Init+0x12c>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	f107 020c 	add.w	r2, r7, #12
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f99b 	bl	8001278 <USART_Init>

	USART_Cmd(_tUART[idx], ENABLE);
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <UART_Init+0x12c>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fa4d 	bl	80013ec <USART_Cmd>
 8001f52:	e000      	b.n	8001f56 <UART_Init+0x11a>
		return;
 8001f54:	bf00      	nop

}
 8001f56:	3728      	adds	r7, #40	; 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200000c0 	.word	0x200000c0
 8001f60:	20000014 	.word	0x20000014
 8001f64:	2000007c 	.word	0x2000007c
 8001f68:	200000a8 	.word	0x200000a8

08001f6c <UART_Send>:

void UART_Send(int idx, unsigned char ch)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
  while (!USART_GetFlagStatus(_tUART[idx], USART_FLAG_TXE)) ;
 8001f78:	bf00      	nop
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <UART_Send+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fabb 	bl	8001500 <USART_GetFlagStatus>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f4      	beq.n	8001f7a <UART_Send+0xe>

  USART_SendData(_tUART[idx], ch);
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <UART_Send+0x40>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fa44 	bl	800142c <USART_SendData>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200000a8 	.word	0x200000a8

08001fb0 <UART_putch>:

  return (unsigned char)USART_ReceiveData(_tUART[idx]);
}

void UART_putch(uint8_t c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	if (c == '\n')
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b0a      	cmp	r3, #10
 8001fbe:	d105      	bne.n	8001fcc <UART_putch+0x1c>
		UART_Send(g_conUART, '\r');
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <UART_putch+0x34>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	210d      	movs	r1, #13
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ffd0 	bl	8001f6c <UART_Send>

	UART_Send(g_conUART, c);
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <UART_putch+0x34>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	79fa      	ldrb	r2, [r7, #7]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ffc9 	bl	8001f6c <UART_Send>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000830 	.word	0x20000830

08001fe8 <UART_puts>:

int UART_puts(const uint8_t *str)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

	while (str[i])
 8001ff4:	e009      	b.n	800200a <UART_puts+0x22>
		UART_putch(str[i++]);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	60fa      	str	r2, [r7, #12]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ffd3 	bl	8001fb0 <UART_putch>
	while (str[i])
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ef      	bne.n	8001ff6 <UART_puts+0xe>

	return i;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <UART_printf>:

int UART_printf(const char *fmt, ...)
{
 8002020:	b40f      	push	{r0, r1, r2, r3}
 8002022:	b580      	push	{r7, lr}
 8002024:	b0c2      	sub	sp, #264	; 0x108
 8002026:	af00      	add	r7, sp, #0
	va_list args;
	char str[SZ_PRNBUF];

	va_start(args, fmt);
 8002028:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800202c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	vsnprintf(str, SZ_PRNBUF, fmt, args);
 8002030:	1d38      	adds	r0, r7, #4
 8002032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002036:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800203a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203e:	f000 fceb 	bl	8002a18 <vsniprintf>
	va_end(args);

	return UART_puts(str);
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ffcf 	bl	8001fe8 <UART_puts>
 800204a:	4603      	mov	r3, r0
}
 800204c:	4618      	mov	r0, r3
 800204e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002052:	46bd      	mov	sp, r7
 8002054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002058:	b004      	add	sp, #16
 800205a:	4770      	bx	lr

0800205c <__libc_init_array>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	4d0d      	ldr	r5, [pc, #52]	; (8002094 <__libc_init_array+0x38>)
 8002060:	4c0d      	ldr	r4, [pc, #52]	; (8002098 <__libc_init_array+0x3c>)
 8002062:	1b64      	subs	r4, r4, r5
 8002064:	10a4      	asrs	r4, r4, #2
 8002066:	2600      	movs	r6, #0
 8002068:	42a6      	cmp	r6, r4
 800206a:	d109      	bne.n	8002080 <__libc_init_array+0x24>
 800206c:	4d0b      	ldr	r5, [pc, #44]	; (800209c <__libc_init_array+0x40>)
 800206e:	4c0c      	ldr	r4, [pc, #48]	; (80020a0 <__libc_init_array+0x44>)
 8002070:	f002 ff8c 	bl	8004f8c <_init>
 8002074:	1b64      	subs	r4, r4, r5
 8002076:	10a4      	asrs	r4, r4, #2
 8002078:	2600      	movs	r6, #0
 800207a:	42a6      	cmp	r6, r4
 800207c:	d105      	bne.n	800208a <__libc_init_array+0x2e>
 800207e:	bd70      	pop	{r4, r5, r6, pc}
 8002080:	f855 3b04 	ldr.w	r3, [r5], #4
 8002084:	4798      	blx	r3
 8002086:	3601      	adds	r6, #1
 8002088:	e7ee      	b.n	8002068 <__libc_init_array+0xc>
 800208a:	f855 3b04 	ldr.w	r3, [r5], #4
 800208e:	4798      	blx	r3
 8002090:	3601      	adds	r6, #1
 8002092:	e7f2      	b.n	800207a <__libc_init_array+0x1e>
 8002094:	080053bc 	.word	0x080053bc
 8002098:	080053bc 	.word	0x080053bc
 800209c:	080053bc 	.word	0x080053bc
 80020a0:	080053c0 	.word	0x080053c0

080020a4 <memset>:
 80020a4:	4402      	add	r2, r0
 80020a6:	4603      	mov	r3, r0
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d100      	bne.n	80020ae <memset+0xa>
 80020ac:	4770      	bx	lr
 80020ae:	f803 1b01 	strb.w	r1, [r3], #1
 80020b2:	e7f9      	b.n	80020a8 <memset+0x4>

080020b4 <__cvt>:
 80020b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020b8:	ec55 4b10 	vmov	r4, r5, d0
 80020bc:	2d00      	cmp	r5, #0
 80020be:	460e      	mov	r6, r1
 80020c0:	4619      	mov	r1, r3
 80020c2:	462b      	mov	r3, r5
 80020c4:	bfbb      	ittet	lt
 80020c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80020ca:	461d      	movlt	r5, r3
 80020cc:	2300      	movge	r3, #0
 80020ce:	232d      	movlt	r3, #45	; 0x2d
 80020d0:	700b      	strb	r3, [r1, #0]
 80020d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80020d8:	4691      	mov	r9, r2
 80020da:	f023 0820 	bic.w	r8, r3, #32
 80020de:	bfbc      	itt	lt
 80020e0:	4622      	movlt	r2, r4
 80020e2:	4614      	movlt	r4, r2
 80020e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80020e8:	d005      	beq.n	80020f6 <__cvt+0x42>
 80020ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80020ee:	d100      	bne.n	80020f2 <__cvt+0x3e>
 80020f0:	3601      	adds	r6, #1
 80020f2:	2102      	movs	r1, #2
 80020f4:	e000      	b.n	80020f8 <__cvt+0x44>
 80020f6:	2103      	movs	r1, #3
 80020f8:	ab03      	add	r3, sp, #12
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	ab02      	add	r3, sp, #8
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	ec45 4b10 	vmov	d0, r4, r5
 8002104:	4653      	mov	r3, sl
 8002106:	4632      	mov	r2, r6
 8002108:	f000 fd22 	bl	8002b50 <_dtoa_r>
 800210c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002110:	4607      	mov	r7, r0
 8002112:	d102      	bne.n	800211a <__cvt+0x66>
 8002114:	f019 0f01 	tst.w	r9, #1
 8002118:	d022      	beq.n	8002160 <__cvt+0xac>
 800211a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800211e:	eb07 0906 	add.w	r9, r7, r6
 8002122:	d110      	bne.n	8002146 <__cvt+0x92>
 8002124:	783b      	ldrb	r3, [r7, #0]
 8002126:	2b30      	cmp	r3, #48	; 0x30
 8002128:	d10a      	bne.n	8002140 <__cvt+0x8c>
 800212a:	2200      	movs	r2, #0
 800212c:	2300      	movs	r3, #0
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe fce9 	bl	8000b08 <__aeabi_dcmpeq>
 8002136:	b918      	cbnz	r0, 8002140 <__cvt+0x8c>
 8002138:	f1c6 0601 	rsb	r6, r6, #1
 800213c:	f8ca 6000 	str.w	r6, [sl]
 8002140:	f8da 3000 	ldr.w	r3, [sl]
 8002144:	4499      	add	r9, r3
 8002146:	2200      	movs	r2, #0
 8002148:	2300      	movs	r3, #0
 800214a:	4620      	mov	r0, r4
 800214c:	4629      	mov	r1, r5
 800214e:	f7fe fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 8002152:	b108      	cbz	r0, 8002158 <__cvt+0xa4>
 8002154:	f8cd 900c 	str.w	r9, [sp, #12]
 8002158:	2230      	movs	r2, #48	; 0x30
 800215a:	9b03      	ldr	r3, [sp, #12]
 800215c:	454b      	cmp	r3, r9
 800215e:	d307      	bcc.n	8002170 <__cvt+0xbc>
 8002160:	9b03      	ldr	r3, [sp, #12]
 8002162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002164:	1bdb      	subs	r3, r3, r7
 8002166:	4638      	mov	r0, r7
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	b004      	add	sp, #16
 800216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	9103      	str	r1, [sp, #12]
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e7f0      	b.n	800215a <__cvt+0xa6>

08002178 <__exponent>:
 8002178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800217a:	4603      	mov	r3, r0
 800217c:	2900      	cmp	r1, #0
 800217e:	bfb8      	it	lt
 8002180:	4249      	neglt	r1, r1
 8002182:	f803 2b02 	strb.w	r2, [r3], #2
 8002186:	bfb4      	ite	lt
 8002188:	222d      	movlt	r2, #45	; 0x2d
 800218a:	222b      	movge	r2, #43	; 0x2b
 800218c:	2909      	cmp	r1, #9
 800218e:	7042      	strb	r2, [r0, #1]
 8002190:	dd2a      	ble.n	80021e8 <__exponent+0x70>
 8002192:	f10d 0407 	add.w	r4, sp, #7
 8002196:	46a4      	mov	ip, r4
 8002198:	270a      	movs	r7, #10
 800219a:	46a6      	mov	lr, r4
 800219c:	460a      	mov	r2, r1
 800219e:	fb91 f6f7 	sdiv	r6, r1, r7
 80021a2:	fb07 1516 	mls	r5, r7, r6, r1
 80021a6:	3530      	adds	r5, #48	; 0x30
 80021a8:	2a63      	cmp	r2, #99	; 0x63
 80021aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80021ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80021b2:	4631      	mov	r1, r6
 80021b4:	dcf1      	bgt.n	800219a <__exponent+0x22>
 80021b6:	3130      	adds	r1, #48	; 0x30
 80021b8:	f1ae 0502 	sub.w	r5, lr, #2
 80021bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80021c0:	1c44      	adds	r4, r0, #1
 80021c2:	4629      	mov	r1, r5
 80021c4:	4561      	cmp	r1, ip
 80021c6:	d30a      	bcc.n	80021de <__exponent+0x66>
 80021c8:	f10d 0209 	add.w	r2, sp, #9
 80021cc:	eba2 020e 	sub.w	r2, r2, lr
 80021d0:	4565      	cmp	r5, ip
 80021d2:	bf88      	it	hi
 80021d4:	2200      	movhi	r2, #0
 80021d6:	4413      	add	r3, r2
 80021d8:	1a18      	subs	r0, r3, r0
 80021da:	b003      	add	sp, #12
 80021dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80021e6:	e7ed      	b.n	80021c4 <__exponent+0x4c>
 80021e8:	2330      	movs	r3, #48	; 0x30
 80021ea:	3130      	adds	r1, #48	; 0x30
 80021ec:	7083      	strb	r3, [r0, #2]
 80021ee:	70c1      	strb	r1, [r0, #3]
 80021f0:	1d03      	adds	r3, r0, #4
 80021f2:	e7f1      	b.n	80021d8 <__exponent+0x60>

080021f4 <_printf_float>:
 80021f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f8:	ed2d 8b02 	vpush	{d8}
 80021fc:	b08d      	sub	sp, #52	; 0x34
 80021fe:	460c      	mov	r4, r1
 8002200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002204:	4616      	mov	r6, r2
 8002206:	461f      	mov	r7, r3
 8002208:	4605      	mov	r5, r0
 800220a:	f001 fb85 	bl	8003918 <_localeconv_r>
 800220e:	f8d0 a000 	ldr.w	sl, [r0]
 8002212:	4650      	mov	r0, sl
 8002214:	f7fd fffc 	bl	8000210 <strlen>
 8002218:	2300      	movs	r3, #0
 800221a:	930a      	str	r3, [sp, #40]	; 0x28
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	9305      	str	r3, [sp, #20]
 8002220:	f8d8 3000 	ldr.w	r3, [r8]
 8002224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002228:	3307      	adds	r3, #7
 800222a:	f023 0307 	bic.w	r3, r3, #7
 800222e:	f103 0208 	add.w	r2, r3, #8
 8002232:	f8c8 2000 	str.w	r2, [r8]
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800223e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002246:	9307      	str	r3, [sp, #28]
 8002248:	f8cd 8018 	str.w	r8, [sp, #24]
 800224c:	ee08 0a10 	vmov	s16, r0
 8002250:	4b9f      	ldr	r3, [pc, #636]	; (80024d0 <_printf_float+0x2dc>)
 8002252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002256:	f04f 32ff 	mov.w	r2, #4294967295
 800225a:	f7fe fc87 	bl	8000b6c <__aeabi_dcmpun>
 800225e:	bb88      	cbnz	r0, 80022c4 <_printf_float+0xd0>
 8002260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002264:	4b9a      	ldr	r3, [pc, #616]	; (80024d0 <_printf_float+0x2dc>)
 8002266:	f04f 32ff 	mov.w	r2, #4294967295
 800226a:	f7fe fc61 	bl	8000b30 <__aeabi_dcmple>
 800226e:	bb48      	cbnz	r0, 80022c4 <_printf_float+0xd0>
 8002270:	2200      	movs	r2, #0
 8002272:	2300      	movs	r3, #0
 8002274:	4640      	mov	r0, r8
 8002276:	4649      	mov	r1, r9
 8002278:	f7fe fc50 	bl	8000b1c <__aeabi_dcmplt>
 800227c:	b110      	cbz	r0, 8002284 <_printf_float+0x90>
 800227e:	232d      	movs	r3, #45	; 0x2d
 8002280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002284:	4b93      	ldr	r3, [pc, #588]	; (80024d4 <_printf_float+0x2e0>)
 8002286:	4894      	ldr	r0, [pc, #592]	; (80024d8 <_printf_float+0x2e4>)
 8002288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800228c:	bf94      	ite	ls
 800228e:	4698      	movls	r8, r3
 8002290:	4680      	movhi	r8, r0
 8002292:	2303      	movs	r3, #3
 8002294:	6123      	str	r3, [r4, #16]
 8002296:	9b05      	ldr	r3, [sp, #20]
 8002298:	f023 0204 	bic.w	r2, r3, #4
 800229c:	6022      	str	r2, [r4, #0]
 800229e:	f04f 0900 	mov.w	r9, #0
 80022a2:	9700      	str	r7, [sp, #0]
 80022a4:	4633      	mov	r3, r6
 80022a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80022a8:	4621      	mov	r1, r4
 80022aa:	4628      	mov	r0, r5
 80022ac:	f000 f9d8 	bl	8002660 <_printf_common>
 80022b0:	3001      	adds	r0, #1
 80022b2:	f040 8090 	bne.w	80023d6 <_printf_float+0x1e2>
 80022b6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ba:	b00d      	add	sp, #52	; 0x34
 80022bc:	ecbd 8b02 	vpop	{d8}
 80022c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	4640      	mov	r0, r8
 80022ca:	4649      	mov	r1, r9
 80022cc:	f7fe fc4e 	bl	8000b6c <__aeabi_dcmpun>
 80022d0:	b140      	cbz	r0, 80022e4 <_printf_float+0xf0>
 80022d2:	464b      	mov	r3, r9
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bfbc      	itt	lt
 80022d8:	232d      	movlt	r3, #45	; 0x2d
 80022da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80022de:	487f      	ldr	r0, [pc, #508]	; (80024dc <_printf_float+0x2e8>)
 80022e0:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <_printf_float+0x2ec>)
 80022e2:	e7d1      	b.n	8002288 <_printf_float+0x94>
 80022e4:	6863      	ldr	r3, [r4, #4]
 80022e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80022ea:	9206      	str	r2, [sp, #24]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	d13f      	bne.n	8002370 <_printf_float+0x17c>
 80022f0:	2306      	movs	r3, #6
 80022f2:	6063      	str	r3, [r4, #4]
 80022f4:	9b05      	ldr	r3, [sp, #20]
 80022f6:	6861      	ldr	r1, [r4, #4]
 80022f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022fc:	2300      	movs	r3, #0
 80022fe:	9303      	str	r3, [sp, #12]
 8002300:	ab0a      	add	r3, sp, #40	; 0x28
 8002302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002306:	ab09      	add	r3, sp, #36	; 0x24
 8002308:	ec49 8b10 	vmov	d0, r8, r9
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	6022      	str	r2, [r4, #0]
 8002310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002314:	4628      	mov	r0, r5
 8002316:	f7ff fecd 	bl	80020b4 <__cvt>
 800231a:	9b06      	ldr	r3, [sp, #24]
 800231c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800231e:	2b47      	cmp	r3, #71	; 0x47
 8002320:	4680      	mov	r8, r0
 8002322:	d108      	bne.n	8002336 <_printf_float+0x142>
 8002324:	1cc8      	adds	r0, r1, #3
 8002326:	db02      	blt.n	800232e <_printf_float+0x13a>
 8002328:	6863      	ldr	r3, [r4, #4]
 800232a:	4299      	cmp	r1, r3
 800232c:	dd41      	ble.n	80023b2 <_printf_float+0x1be>
 800232e:	f1ab 0b02 	sub.w	fp, fp, #2
 8002332:	fa5f fb8b 	uxtb.w	fp, fp
 8002336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800233a:	d820      	bhi.n	800237e <_printf_float+0x18a>
 800233c:	3901      	subs	r1, #1
 800233e:	465a      	mov	r2, fp
 8002340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002344:	9109      	str	r1, [sp, #36]	; 0x24
 8002346:	f7ff ff17 	bl	8002178 <__exponent>
 800234a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800234c:	1813      	adds	r3, r2, r0
 800234e:	2a01      	cmp	r2, #1
 8002350:	4681      	mov	r9, r0
 8002352:	6123      	str	r3, [r4, #16]
 8002354:	dc02      	bgt.n	800235c <_printf_float+0x168>
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	07d2      	lsls	r2, r2, #31
 800235a:	d501      	bpl.n	8002360 <_printf_float+0x16c>
 800235c:	3301      	adds	r3, #1
 800235e:	6123      	str	r3, [r4, #16]
 8002360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002364:	2b00      	cmp	r3, #0
 8002366:	d09c      	beq.n	80022a2 <_printf_float+0xae>
 8002368:	232d      	movs	r3, #45	; 0x2d
 800236a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800236e:	e798      	b.n	80022a2 <_printf_float+0xae>
 8002370:	9a06      	ldr	r2, [sp, #24]
 8002372:	2a47      	cmp	r2, #71	; 0x47
 8002374:	d1be      	bne.n	80022f4 <_printf_float+0x100>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1bc      	bne.n	80022f4 <_printf_float+0x100>
 800237a:	2301      	movs	r3, #1
 800237c:	e7b9      	b.n	80022f2 <_printf_float+0xfe>
 800237e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002382:	d118      	bne.n	80023b6 <_printf_float+0x1c2>
 8002384:	2900      	cmp	r1, #0
 8002386:	6863      	ldr	r3, [r4, #4]
 8002388:	dd0b      	ble.n	80023a2 <_printf_float+0x1ae>
 800238a:	6121      	str	r1, [r4, #16]
 800238c:	b913      	cbnz	r3, 8002394 <_printf_float+0x1a0>
 800238e:	6822      	ldr	r2, [r4, #0]
 8002390:	07d0      	lsls	r0, r2, #31
 8002392:	d502      	bpl.n	800239a <_printf_float+0x1a6>
 8002394:	3301      	adds	r3, #1
 8002396:	440b      	add	r3, r1
 8002398:	6123      	str	r3, [r4, #16]
 800239a:	65a1      	str	r1, [r4, #88]	; 0x58
 800239c:	f04f 0900 	mov.w	r9, #0
 80023a0:	e7de      	b.n	8002360 <_printf_float+0x16c>
 80023a2:	b913      	cbnz	r3, 80023aa <_printf_float+0x1b6>
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	07d2      	lsls	r2, r2, #31
 80023a8:	d501      	bpl.n	80023ae <_printf_float+0x1ba>
 80023aa:	3302      	adds	r3, #2
 80023ac:	e7f4      	b.n	8002398 <_printf_float+0x1a4>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e7f2      	b.n	8002398 <_printf_float+0x1a4>
 80023b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80023b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023b8:	4299      	cmp	r1, r3
 80023ba:	db05      	blt.n	80023c8 <_printf_float+0x1d4>
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	6121      	str	r1, [r4, #16]
 80023c0:	07d8      	lsls	r0, r3, #31
 80023c2:	d5ea      	bpl.n	800239a <_printf_float+0x1a6>
 80023c4:	1c4b      	adds	r3, r1, #1
 80023c6:	e7e7      	b.n	8002398 <_printf_float+0x1a4>
 80023c8:	2900      	cmp	r1, #0
 80023ca:	bfd4      	ite	le
 80023cc:	f1c1 0202 	rsble	r2, r1, #2
 80023d0:	2201      	movgt	r2, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	e7e0      	b.n	8002398 <_printf_float+0x1a4>
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	055a      	lsls	r2, r3, #21
 80023da:	d407      	bmi.n	80023ec <_printf_float+0x1f8>
 80023dc:	6923      	ldr	r3, [r4, #16]
 80023de:	4642      	mov	r2, r8
 80023e0:	4631      	mov	r1, r6
 80023e2:	4628      	mov	r0, r5
 80023e4:	47b8      	blx	r7
 80023e6:	3001      	adds	r0, #1
 80023e8:	d12c      	bne.n	8002444 <_printf_float+0x250>
 80023ea:	e764      	b.n	80022b6 <_printf_float+0xc2>
 80023ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80023f0:	f240 80e0 	bls.w	80025b4 <_printf_float+0x3c0>
 80023f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80023f8:	2200      	movs	r2, #0
 80023fa:	2300      	movs	r3, #0
 80023fc:	f7fe fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8002400:	2800      	cmp	r0, #0
 8002402:	d034      	beq.n	800246e <_printf_float+0x27a>
 8002404:	4a37      	ldr	r2, [pc, #220]	; (80024e4 <_printf_float+0x2f0>)
 8002406:	2301      	movs	r3, #1
 8002408:	4631      	mov	r1, r6
 800240a:	4628      	mov	r0, r5
 800240c:	47b8      	blx	r7
 800240e:	3001      	adds	r0, #1
 8002410:	f43f af51 	beq.w	80022b6 <_printf_float+0xc2>
 8002414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002418:	429a      	cmp	r2, r3
 800241a:	db02      	blt.n	8002422 <_printf_float+0x22e>
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	07d8      	lsls	r0, r3, #31
 8002420:	d510      	bpl.n	8002444 <_printf_float+0x250>
 8002422:	ee18 3a10 	vmov	r3, s16
 8002426:	4652      	mov	r2, sl
 8002428:	4631      	mov	r1, r6
 800242a:	4628      	mov	r0, r5
 800242c:	47b8      	blx	r7
 800242e:	3001      	adds	r0, #1
 8002430:	f43f af41 	beq.w	80022b6 <_printf_float+0xc2>
 8002434:	f04f 0800 	mov.w	r8, #0
 8002438:	f104 091a 	add.w	r9, r4, #26
 800243c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800243e:	3b01      	subs	r3, #1
 8002440:	4543      	cmp	r3, r8
 8002442:	dc09      	bgt.n	8002458 <_printf_float+0x264>
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	079b      	lsls	r3, r3, #30
 8002448:	f100 8105 	bmi.w	8002656 <_printf_float+0x462>
 800244c:	68e0      	ldr	r0, [r4, #12]
 800244e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002450:	4298      	cmp	r0, r3
 8002452:	bfb8      	it	lt
 8002454:	4618      	movlt	r0, r3
 8002456:	e730      	b.n	80022ba <_printf_float+0xc6>
 8002458:	2301      	movs	r3, #1
 800245a:	464a      	mov	r2, r9
 800245c:	4631      	mov	r1, r6
 800245e:	4628      	mov	r0, r5
 8002460:	47b8      	blx	r7
 8002462:	3001      	adds	r0, #1
 8002464:	f43f af27 	beq.w	80022b6 <_printf_float+0xc2>
 8002468:	f108 0801 	add.w	r8, r8, #1
 800246c:	e7e6      	b.n	800243c <_printf_float+0x248>
 800246e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	dc39      	bgt.n	80024e8 <_printf_float+0x2f4>
 8002474:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <_printf_float+0x2f0>)
 8002476:	2301      	movs	r3, #1
 8002478:	4631      	mov	r1, r6
 800247a:	4628      	mov	r0, r5
 800247c:	47b8      	blx	r7
 800247e:	3001      	adds	r0, #1
 8002480:	f43f af19 	beq.w	80022b6 <_printf_float+0xc2>
 8002484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002488:	4313      	orrs	r3, r2
 800248a:	d102      	bne.n	8002492 <_printf_float+0x29e>
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	07d9      	lsls	r1, r3, #31
 8002490:	d5d8      	bpl.n	8002444 <_printf_float+0x250>
 8002492:	ee18 3a10 	vmov	r3, s16
 8002496:	4652      	mov	r2, sl
 8002498:	4631      	mov	r1, r6
 800249a:	4628      	mov	r0, r5
 800249c:	47b8      	blx	r7
 800249e:	3001      	adds	r0, #1
 80024a0:	f43f af09 	beq.w	80022b6 <_printf_float+0xc2>
 80024a4:	f04f 0900 	mov.w	r9, #0
 80024a8:	f104 0a1a 	add.w	sl, r4, #26
 80024ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024ae:	425b      	negs	r3, r3
 80024b0:	454b      	cmp	r3, r9
 80024b2:	dc01      	bgt.n	80024b8 <_printf_float+0x2c4>
 80024b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024b6:	e792      	b.n	80023de <_printf_float+0x1ea>
 80024b8:	2301      	movs	r3, #1
 80024ba:	4652      	mov	r2, sl
 80024bc:	4631      	mov	r1, r6
 80024be:	4628      	mov	r0, r5
 80024c0:	47b8      	blx	r7
 80024c2:	3001      	adds	r0, #1
 80024c4:	f43f aef7 	beq.w	80022b6 <_printf_float+0xc2>
 80024c8:	f109 0901 	add.w	r9, r9, #1
 80024cc:	e7ee      	b.n	80024ac <_printf_float+0x2b8>
 80024ce:	bf00      	nop
 80024d0:	7fefffff 	.word	0x7fefffff
 80024d4:	080050e8 	.word	0x080050e8
 80024d8:	080050ec 	.word	0x080050ec
 80024dc:	080050f4 	.word	0x080050f4
 80024e0:	080050f0 	.word	0x080050f0
 80024e4:	080050f8 	.word	0x080050f8
 80024e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024ec:	429a      	cmp	r2, r3
 80024ee:	bfa8      	it	ge
 80024f0:	461a      	movge	r2, r3
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	4691      	mov	r9, r2
 80024f6:	dc37      	bgt.n	8002568 <_printf_float+0x374>
 80024f8:	f04f 0b00 	mov.w	fp, #0
 80024fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002500:	f104 021a 	add.w	r2, r4, #26
 8002504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002506:	9305      	str	r3, [sp, #20]
 8002508:	eba3 0309 	sub.w	r3, r3, r9
 800250c:	455b      	cmp	r3, fp
 800250e:	dc33      	bgt.n	8002578 <_printf_float+0x384>
 8002510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002514:	429a      	cmp	r2, r3
 8002516:	db3b      	blt.n	8002590 <_printf_float+0x39c>
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	07da      	lsls	r2, r3, #31
 800251c:	d438      	bmi.n	8002590 <_printf_float+0x39c>
 800251e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002520:	9a05      	ldr	r2, [sp, #20]
 8002522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002524:	1a9a      	subs	r2, r3, r2
 8002526:	eba3 0901 	sub.w	r9, r3, r1
 800252a:	4591      	cmp	r9, r2
 800252c:	bfa8      	it	ge
 800252e:	4691      	movge	r9, r2
 8002530:	f1b9 0f00 	cmp.w	r9, #0
 8002534:	dc35      	bgt.n	80025a2 <_printf_float+0x3ae>
 8002536:	f04f 0800 	mov.w	r8, #0
 800253a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800253e:	f104 0a1a 	add.w	sl, r4, #26
 8002542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	eba3 0309 	sub.w	r3, r3, r9
 800254c:	4543      	cmp	r3, r8
 800254e:	f77f af79 	ble.w	8002444 <_printf_float+0x250>
 8002552:	2301      	movs	r3, #1
 8002554:	4652      	mov	r2, sl
 8002556:	4631      	mov	r1, r6
 8002558:	4628      	mov	r0, r5
 800255a:	47b8      	blx	r7
 800255c:	3001      	adds	r0, #1
 800255e:	f43f aeaa 	beq.w	80022b6 <_printf_float+0xc2>
 8002562:	f108 0801 	add.w	r8, r8, #1
 8002566:	e7ec      	b.n	8002542 <_printf_float+0x34e>
 8002568:	4613      	mov	r3, r2
 800256a:	4631      	mov	r1, r6
 800256c:	4642      	mov	r2, r8
 800256e:	4628      	mov	r0, r5
 8002570:	47b8      	blx	r7
 8002572:	3001      	adds	r0, #1
 8002574:	d1c0      	bne.n	80024f8 <_printf_float+0x304>
 8002576:	e69e      	b.n	80022b6 <_printf_float+0xc2>
 8002578:	2301      	movs	r3, #1
 800257a:	4631      	mov	r1, r6
 800257c:	4628      	mov	r0, r5
 800257e:	9205      	str	r2, [sp, #20]
 8002580:	47b8      	blx	r7
 8002582:	3001      	adds	r0, #1
 8002584:	f43f ae97 	beq.w	80022b6 <_printf_float+0xc2>
 8002588:	9a05      	ldr	r2, [sp, #20]
 800258a:	f10b 0b01 	add.w	fp, fp, #1
 800258e:	e7b9      	b.n	8002504 <_printf_float+0x310>
 8002590:	ee18 3a10 	vmov	r3, s16
 8002594:	4652      	mov	r2, sl
 8002596:	4631      	mov	r1, r6
 8002598:	4628      	mov	r0, r5
 800259a:	47b8      	blx	r7
 800259c:	3001      	adds	r0, #1
 800259e:	d1be      	bne.n	800251e <_printf_float+0x32a>
 80025a0:	e689      	b.n	80022b6 <_printf_float+0xc2>
 80025a2:	9a05      	ldr	r2, [sp, #20]
 80025a4:	464b      	mov	r3, r9
 80025a6:	4442      	add	r2, r8
 80025a8:	4631      	mov	r1, r6
 80025aa:	4628      	mov	r0, r5
 80025ac:	47b8      	blx	r7
 80025ae:	3001      	adds	r0, #1
 80025b0:	d1c1      	bne.n	8002536 <_printf_float+0x342>
 80025b2:	e680      	b.n	80022b6 <_printf_float+0xc2>
 80025b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025b6:	2a01      	cmp	r2, #1
 80025b8:	dc01      	bgt.n	80025be <_printf_float+0x3ca>
 80025ba:	07db      	lsls	r3, r3, #31
 80025bc:	d538      	bpl.n	8002630 <_printf_float+0x43c>
 80025be:	2301      	movs	r3, #1
 80025c0:	4642      	mov	r2, r8
 80025c2:	4631      	mov	r1, r6
 80025c4:	4628      	mov	r0, r5
 80025c6:	47b8      	blx	r7
 80025c8:	3001      	adds	r0, #1
 80025ca:	f43f ae74 	beq.w	80022b6 <_printf_float+0xc2>
 80025ce:	ee18 3a10 	vmov	r3, s16
 80025d2:	4652      	mov	r2, sl
 80025d4:	4631      	mov	r1, r6
 80025d6:	4628      	mov	r0, r5
 80025d8:	47b8      	blx	r7
 80025da:	3001      	adds	r0, #1
 80025dc:	f43f ae6b 	beq.w	80022b6 <_printf_float+0xc2>
 80025e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80025e4:	2200      	movs	r2, #0
 80025e6:	2300      	movs	r3, #0
 80025e8:	f7fe fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80025ec:	b9d8      	cbnz	r0, 8002626 <_printf_float+0x432>
 80025ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025f0:	f108 0201 	add.w	r2, r8, #1
 80025f4:	3b01      	subs	r3, #1
 80025f6:	4631      	mov	r1, r6
 80025f8:	4628      	mov	r0, r5
 80025fa:	47b8      	blx	r7
 80025fc:	3001      	adds	r0, #1
 80025fe:	d10e      	bne.n	800261e <_printf_float+0x42a>
 8002600:	e659      	b.n	80022b6 <_printf_float+0xc2>
 8002602:	2301      	movs	r3, #1
 8002604:	4652      	mov	r2, sl
 8002606:	4631      	mov	r1, r6
 8002608:	4628      	mov	r0, r5
 800260a:	47b8      	blx	r7
 800260c:	3001      	adds	r0, #1
 800260e:	f43f ae52 	beq.w	80022b6 <_printf_float+0xc2>
 8002612:	f108 0801 	add.w	r8, r8, #1
 8002616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	4543      	cmp	r3, r8
 800261c:	dcf1      	bgt.n	8002602 <_printf_float+0x40e>
 800261e:	464b      	mov	r3, r9
 8002620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002624:	e6dc      	b.n	80023e0 <_printf_float+0x1ec>
 8002626:	f04f 0800 	mov.w	r8, #0
 800262a:	f104 0a1a 	add.w	sl, r4, #26
 800262e:	e7f2      	b.n	8002616 <_printf_float+0x422>
 8002630:	2301      	movs	r3, #1
 8002632:	4642      	mov	r2, r8
 8002634:	e7df      	b.n	80025f6 <_printf_float+0x402>
 8002636:	2301      	movs	r3, #1
 8002638:	464a      	mov	r2, r9
 800263a:	4631      	mov	r1, r6
 800263c:	4628      	mov	r0, r5
 800263e:	47b8      	blx	r7
 8002640:	3001      	adds	r0, #1
 8002642:	f43f ae38 	beq.w	80022b6 <_printf_float+0xc2>
 8002646:	f108 0801 	add.w	r8, r8, #1
 800264a:	68e3      	ldr	r3, [r4, #12]
 800264c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800264e:	1a5b      	subs	r3, r3, r1
 8002650:	4543      	cmp	r3, r8
 8002652:	dcf0      	bgt.n	8002636 <_printf_float+0x442>
 8002654:	e6fa      	b.n	800244c <_printf_float+0x258>
 8002656:	f04f 0800 	mov.w	r8, #0
 800265a:	f104 0919 	add.w	r9, r4, #25
 800265e:	e7f4      	b.n	800264a <_printf_float+0x456>

08002660 <_printf_common>:
 8002660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002664:	4616      	mov	r6, r2
 8002666:	4699      	mov	r9, r3
 8002668:	688a      	ldr	r2, [r1, #8]
 800266a:	690b      	ldr	r3, [r1, #16]
 800266c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002670:	4293      	cmp	r3, r2
 8002672:	bfb8      	it	lt
 8002674:	4613      	movlt	r3, r2
 8002676:	6033      	str	r3, [r6, #0]
 8002678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800267c:	4607      	mov	r7, r0
 800267e:	460c      	mov	r4, r1
 8002680:	b10a      	cbz	r2, 8002686 <_printf_common+0x26>
 8002682:	3301      	adds	r3, #1
 8002684:	6033      	str	r3, [r6, #0]
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	0699      	lsls	r1, r3, #26
 800268a:	bf42      	ittt	mi
 800268c:	6833      	ldrmi	r3, [r6, #0]
 800268e:	3302      	addmi	r3, #2
 8002690:	6033      	strmi	r3, [r6, #0]
 8002692:	6825      	ldr	r5, [r4, #0]
 8002694:	f015 0506 	ands.w	r5, r5, #6
 8002698:	d106      	bne.n	80026a8 <_printf_common+0x48>
 800269a:	f104 0a19 	add.w	sl, r4, #25
 800269e:	68e3      	ldr	r3, [r4, #12]
 80026a0:	6832      	ldr	r2, [r6, #0]
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	42ab      	cmp	r3, r5
 80026a6:	dc26      	bgt.n	80026f6 <_printf_common+0x96>
 80026a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026ac:	1e13      	subs	r3, r2, #0
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	bf18      	it	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	0692      	lsls	r2, r2, #26
 80026b6:	d42b      	bmi.n	8002710 <_printf_common+0xb0>
 80026b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026bc:	4649      	mov	r1, r9
 80026be:	4638      	mov	r0, r7
 80026c0:	47c0      	blx	r8
 80026c2:	3001      	adds	r0, #1
 80026c4:	d01e      	beq.n	8002704 <_printf_common+0xa4>
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	68e5      	ldr	r5, [r4, #12]
 80026ca:	6832      	ldr	r2, [r6, #0]
 80026cc:	f003 0306 	and.w	r3, r3, #6
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	bf08      	it	eq
 80026d4:	1aad      	subeq	r5, r5, r2
 80026d6:	68a3      	ldr	r3, [r4, #8]
 80026d8:	6922      	ldr	r2, [r4, #16]
 80026da:	bf0c      	ite	eq
 80026dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026e0:	2500      	movne	r5, #0
 80026e2:	4293      	cmp	r3, r2
 80026e4:	bfc4      	itt	gt
 80026e6:	1a9b      	subgt	r3, r3, r2
 80026e8:	18ed      	addgt	r5, r5, r3
 80026ea:	2600      	movs	r6, #0
 80026ec:	341a      	adds	r4, #26
 80026ee:	42b5      	cmp	r5, r6
 80026f0:	d11a      	bne.n	8002728 <_printf_common+0xc8>
 80026f2:	2000      	movs	r0, #0
 80026f4:	e008      	b.n	8002708 <_printf_common+0xa8>
 80026f6:	2301      	movs	r3, #1
 80026f8:	4652      	mov	r2, sl
 80026fa:	4649      	mov	r1, r9
 80026fc:	4638      	mov	r0, r7
 80026fe:	47c0      	blx	r8
 8002700:	3001      	adds	r0, #1
 8002702:	d103      	bne.n	800270c <_printf_common+0xac>
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800270c:	3501      	adds	r5, #1
 800270e:	e7c6      	b.n	800269e <_printf_common+0x3e>
 8002710:	18e1      	adds	r1, r4, r3
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	2030      	movs	r0, #48	; 0x30
 8002716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800271a:	4422      	add	r2, r4
 800271c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002724:	3302      	adds	r3, #2
 8002726:	e7c7      	b.n	80026b8 <_printf_common+0x58>
 8002728:	2301      	movs	r3, #1
 800272a:	4622      	mov	r2, r4
 800272c:	4649      	mov	r1, r9
 800272e:	4638      	mov	r0, r7
 8002730:	47c0      	blx	r8
 8002732:	3001      	adds	r0, #1
 8002734:	d0e6      	beq.n	8002704 <_printf_common+0xa4>
 8002736:	3601      	adds	r6, #1
 8002738:	e7d9      	b.n	80026ee <_printf_common+0x8e>
	...

0800273c <_printf_i>:
 800273c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002740:	7e0f      	ldrb	r7, [r1, #24]
 8002742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002744:	2f78      	cmp	r7, #120	; 0x78
 8002746:	4691      	mov	r9, r2
 8002748:	4680      	mov	r8, r0
 800274a:	460c      	mov	r4, r1
 800274c:	469a      	mov	sl, r3
 800274e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002752:	d807      	bhi.n	8002764 <_printf_i+0x28>
 8002754:	2f62      	cmp	r7, #98	; 0x62
 8002756:	d80a      	bhi.n	800276e <_printf_i+0x32>
 8002758:	2f00      	cmp	r7, #0
 800275a:	f000 80d8 	beq.w	800290e <_printf_i+0x1d2>
 800275e:	2f58      	cmp	r7, #88	; 0x58
 8002760:	f000 80a3 	beq.w	80028aa <_printf_i+0x16e>
 8002764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800276c:	e03a      	b.n	80027e4 <_printf_i+0xa8>
 800276e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002772:	2b15      	cmp	r3, #21
 8002774:	d8f6      	bhi.n	8002764 <_printf_i+0x28>
 8002776:	a101      	add	r1, pc, #4	; (adr r1, 800277c <_printf_i+0x40>)
 8002778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800277c:	080027d5 	.word	0x080027d5
 8002780:	080027e9 	.word	0x080027e9
 8002784:	08002765 	.word	0x08002765
 8002788:	08002765 	.word	0x08002765
 800278c:	08002765 	.word	0x08002765
 8002790:	08002765 	.word	0x08002765
 8002794:	080027e9 	.word	0x080027e9
 8002798:	08002765 	.word	0x08002765
 800279c:	08002765 	.word	0x08002765
 80027a0:	08002765 	.word	0x08002765
 80027a4:	08002765 	.word	0x08002765
 80027a8:	080028f5 	.word	0x080028f5
 80027ac:	08002819 	.word	0x08002819
 80027b0:	080028d7 	.word	0x080028d7
 80027b4:	08002765 	.word	0x08002765
 80027b8:	08002765 	.word	0x08002765
 80027bc:	08002917 	.word	0x08002917
 80027c0:	08002765 	.word	0x08002765
 80027c4:	08002819 	.word	0x08002819
 80027c8:	08002765 	.word	0x08002765
 80027cc:	08002765 	.word	0x08002765
 80027d0:	080028df 	.word	0x080028df
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	602a      	str	r2, [r5, #0]
 80027dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0a3      	b.n	8002930 <_printf_i+0x1f4>
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	6829      	ldr	r1, [r5, #0]
 80027ec:	0606      	lsls	r6, r0, #24
 80027ee:	f101 0304 	add.w	r3, r1, #4
 80027f2:	d50a      	bpl.n	800280a <_printf_i+0xce>
 80027f4:	680e      	ldr	r6, [r1, #0]
 80027f6:	602b      	str	r3, [r5, #0]
 80027f8:	2e00      	cmp	r6, #0
 80027fa:	da03      	bge.n	8002804 <_printf_i+0xc8>
 80027fc:	232d      	movs	r3, #45	; 0x2d
 80027fe:	4276      	negs	r6, r6
 8002800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002804:	485e      	ldr	r0, [pc, #376]	; (8002980 <_printf_i+0x244>)
 8002806:	230a      	movs	r3, #10
 8002808:	e019      	b.n	800283e <_printf_i+0x102>
 800280a:	680e      	ldr	r6, [r1, #0]
 800280c:	602b      	str	r3, [r5, #0]
 800280e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002812:	bf18      	it	ne
 8002814:	b236      	sxthne	r6, r6
 8002816:	e7ef      	b.n	80027f8 <_printf_i+0xbc>
 8002818:	682b      	ldr	r3, [r5, #0]
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	1d19      	adds	r1, r3, #4
 800281e:	6029      	str	r1, [r5, #0]
 8002820:	0601      	lsls	r1, r0, #24
 8002822:	d501      	bpl.n	8002828 <_printf_i+0xec>
 8002824:	681e      	ldr	r6, [r3, #0]
 8002826:	e002      	b.n	800282e <_printf_i+0xf2>
 8002828:	0646      	lsls	r6, r0, #25
 800282a:	d5fb      	bpl.n	8002824 <_printf_i+0xe8>
 800282c:	881e      	ldrh	r6, [r3, #0]
 800282e:	4854      	ldr	r0, [pc, #336]	; (8002980 <_printf_i+0x244>)
 8002830:	2f6f      	cmp	r7, #111	; 0x6f
 8002832:	bf0c      	ite	eq
 8002834:	2308      	moveq	r3, #8
 8002836:	230a      	movne	r3, #10
 8002838:	2100      	movs	r1, #0
 800283a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800283e:	6865      	ldr	r5, [r4, #4]
 8002840:	60a5      	str	r5, [r4, #8]
 8002842:	2d00      	cmp	r5, #0
 8002844:	bfa2      	ittt	ge
 8002846:	6821      	ldrge	r1, [r4, #0]
 8002848:	f021 0104 	bicge.w	r1, r1, #4
 800284c:	6021      	strge	r1, [r4, #0]
 800284e:	b90e      	cbnz	r6, 8002854 <_printf_i+0x118>
 8002850:	2d00      	cmp	r5, #0
 8002852:	d04d      	beq.n	80028f0 <_printf_i+0x1b4>
 8002854:	4615      	mov	r5, r2
 8002856:	fbb6 f1f3 	udiv	r1, r6, r3
 800285a:	fb03 6711 	mls	r7, r3, r1, r6
 800285e:	5dc7      	ldrb	r7, [r0, r7]
 8002860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002864:	4637      	mov	r7, r6
 8002866:	42bb      	cmp	r3, r7
 8002868:	460e      	mov	r6, r1
 800286a:	d9f4      	bls.n	8002856 <_printf_i+0x11a>
 800286c:	2b08      	cmp	r3, #8
 800286e:	d10b      	bne.n	8002888 <_printf_i+0x14c>
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	07de      	lsls	r6, r3, #31
 8002874:	d508      	bpl.n	8002888 <_printf_i+0x14c>
 8002876:	6923      	ldr	r3, [r4, #16]
 8002878:	6861      	ldr	r1, [r4, #4]
 800287a:	4299      	cmp	r1, r3
 800287c:	bfde      	ittt	le
 800287e:	2330      	movle	r3, #48	; 0x30
 8002880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002888:	1b52      	subs	r2, r2, r5
 800288a:	6122      	str	r2, [r4, #16]
 800288c:	f8cd a000 	str.w	sl, [sp]
 8002890:	464b      	mov	r3, r9
 8002892:	aa03      	add	r2, sp, #12
 8002894:	4621      	mov	r1, r4
 8002896:	4640      	mov	r0, r8
 8002898:	f7ff fee2 	bl	8002660 <_printf_common>
 800289c:	3001      	adds	r0, #1
 800289e:	d14c      	bne.n	800293a <_printf_i+0x1fe>
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	b004      	add	sp, #16
 80028a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028aa:	4835      	ldr	r0, [pc, #212]	; (8002980 <_printf_i+0x244>)
 80028ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028b0:	6829      	ldr	r1, [r5, #0]
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80028b8:	6029      	str	r1, [r5, #0]
 80028ba:	061d      	lsls	r5, r3, #24
 80028bc:	d514      	bpl.n	80028e8 <_printf_i+0x1ac>
 80028be:	07df      	lsls	r7, r3, #31
 80028c0:	bf44      	itt	mi
 80028c2:	f043 0320 	orrmi.w	r3, r3, #32
 80028c6:	6023      	strmi	r3, [r4, #0]
 80028c8:	b91e      	cbnz	r6, 80028d2 <_printf_i+0x196>
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	f023 0320 	bic.w	r3, r3, #32
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	2310      	movs	r3, #16
 80028d4:	e7b0      	b.n	8002838 <_printf_i+0xfc>
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	f043 0320 	orr.w	r3, r3, #32
 80028dc:	6023      	str	r3, [r4, #0]
 80028de:	2378      	movs	r3, #120	; 0x78
 80028e0:	4828      	ldr	r0, [pc, #160]	; (8002984 <_printf_i+0x248>)
 80028e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028e6:	e7e3      	b.n	80028b0 <_printf_i+0x174>
 80028e8:	0659      	lsls	r1, r3, #25
 80028ea:	bf48      	it	mi
 80028ec:	b2b6      	uxthmi	r6, r6
 80028ee:	e7e6      	b.n	80028be <_printf_i+0x182>
 80028f0:	4615      	mov	r5, r2
 80028f2:	e7bb      	b.n	800286c <_printf_i+0x130>
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	6826      	ldr	r6, [r4, #0]
 80028f8:	6961      	ldr	r1, [r4, #20]
 80028fa:	1d18      	adds	r0, r3, #4
 80028fc:	6028      	str	r0, [r5, #0]
 80028fe:	0635      	lsls	r5, r6, #24
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	d501      	bpl.n	8002908 <_printf_i+0x1cc>
 8002904:	6019      	str	r1, [r3, #0]
 8002906:	e002      	b.n	800290e <_printf_i+0x1d2>
 8002908:	0670      	lsls	r0, r6, #25
 800290a:	d5fb      	bpl.n	8002904 <_printf_i+0x1c8>
 800290c:	8019      	strh	r1, [r3, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	6123      	str	r3, [r4, #16]
 8002912:	4615      	mov	r5, r2
 8002914:	e7ba      	b.n	800288c <_printf_i+0x150>
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	1d1a      	adds	r2, r3, #4
 800291a:	602a      	str	r2, [r5, #0]
 800291c:	681d      	ldr	r5, [r3, #0]
 800291e:	6862      	ldr	r2, [r4, #4]
 8002920:	2100      	movs	r1, #0
 8002922:	4628      	mov	r0, r5
 8002924:	f7fd fc7c 	bl	8000220 <memchr>
 8002928:	b108      	cbz	r0, 800292e <_printf_i+0x1f2>
 800292a:	1b40      	subs	r0, r0, r5
 800292c:	6060      	str	r0, [r4, #4]
 800292e:	6863      	ldr	r3, [r4, #4]
 8002930:	6123      	str	r3, [r4, #16]
 8002932:	2300      	movs	r3, #0
 8002934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002938:	e7a8      	b.n	800288c <_printf_i+0x150>
 800293a:	6923      	ldr	r3, [r4, #16]
 800293c:	462a      	mov	r2, r5
 800293e:	4649      	mov	r1, r9
 8002940:	4640      	mov	r0, r8
 8002942:	47d0      	blx	sl
 8002944:	3001      	adds	r0, #1
 8002946:	d0ab      	beq.n	80028a0 <_printf_i+0x164>
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	079b      	lsls	r3, r3, #30
 800294c:	d413      	bmi.n	8002976 <_printf_i+0x23a>
 800294e:	68e0      	ldr	r0, [r4, #12]
 8002950:	9b03      	ldr	r3, [sp, #12]
 8002952:	4298      	cmp	r0, r3
 8002954:	bfb8      	it	lt
 8002956:	4618      	movlt	r0, r3
 8002958:	e7a4      	b.n	80028a4 <_printf_i+0x168>
 800295a:	2301      	movs	r3, #1
 800295c:	4632      	mov	r2, r6
 800295e:	4649      	mov	r1, r9
 8002960:	4640      	mov	r0, r8
 8002962:	47d0      	blx	sl
 8002964:	3001      	adds	r0, #1
 8002966:	d09b      	beq.n	80028a0 <_printf_i+0x164>
 8002968:	3501      	adds	r5, #1
 800296a:	68e3      	ldr	r3, [r4, #12]
 800296c:	9903      	ldr	r1, [sp, #12]
 800296e:	1a5b      	subs	r3, r3, r1
 8002970:	42ab      	cmp	r3, r5
 8002972:	dcf2      	bgt.n	800295a <_printf_i+0x21e>
 8002974:	e7eb      	b.n	800294e <_printf_i+0x212>
 8002976:	2500      	movs	r5, #0
 8002978:	f104 0619 	add.w	r6, r4, #25
 800297c:	e7f5      	b.n	800296a <_printf_i+0x22e>
 800297e:	bf00      	nop
 8002980:	080050fa 	.word	0x080050fa
 8002984:	0800510b 	.word	0x0800510b

08002988 <strcpy>:
 8002988:	4603      	mov	r3, r0
 800298a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800298e:	f803 2b01 	strb.w	r2, [r3], #1
 8002992:	2a00      	cmp	r2, #0
 8002994:	d1f9      	bne.n	800298a <strcpy+0x2>
 8002996:	4770      	bx	lr

08002998 <strncmp>:
 8002998:	b510      	push	{r4, lr}
 800299a:	b17a      	cbz	r2, 80029bc <strncmp+0x24>
 800299c:	4603      	mov	r3, r0
 800299e:	3901      	subs	r1, #1
 80029a0:	1884      	adds	r4, r0, r2
 80029a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80029a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80029aa:	4290      	cmp	r0, r2
 80029ac:	d101      	bne.n	80029b2 <strncmp+0x1a>
 80029ae:	42a3      	cmp	r3, r4
 80029b0:	d101      	bne.n	80029b6 <strncmp+0x1e>
 80029b2:	1a80      	subs	r0, r0, r2
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d1f3      	bne.n	80029a2 <strncmp+0xa>
 80029ba:	e7fa      	b.n	80029b2 <strncmp+0x1a>
 80029bc:	4610      	mov	r0, r2
 80029be:	e7f9      	b.n	80029b4 <strncmp+0x1c>

080029c0 <_vsniprintf_r>:
 80029c0:	b530      	push	{r4, r5, lr}
 80029c2:	4614      	mov	r4, r2
 80029c4:	2c00      	cmp	r4, #0
 80029c6:	b09b      	sub	sp, #108	; 0x6c
 80029c8:	4605      	mov	r5, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	da05      	bge.n	80029da <_vsniprintf_r+0x1a>
 80029ce:	238b      	movs	r3, #139	; 0x8b
 80029d0:	6003      	str	r3, [r0, #0]
 80029d2:	f04f 30ff 	mov.w	r0, #4294967295
 80029d6:	b01b      	add	sp, #108	; 0x6c
 80029d8:	bd30      	pop	{r4, r5, pc}
 80029da:	f44f 7302 	mov.w	r3, #520	; 0x208
 80029de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80029e2:	bf14      	ite	ne
 80029e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80029e8:	4623      	moveq	r3, r4
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	9305      	str	r3, [sp, #20]
 80029ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f2:	9100      	str	r1, [sp, #0]
 80029f4:	9104      	str	r1, [sp, #16]
 80029f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80029fa:	4669      	mov	r1, sp
 80029fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80029fe:	f001 fc7f 	bl	8004300 <_svfiprintf_r>
 8002a02:	1c43      	adds	r3, r0, #1
 8002a04:	bfbc      	itt	lt
 8002a06:	238b      	movlt	r3, #139	; 0x8b
 8002a08:	602b      	strlt	r3, [r5, #0]
 8002a0a:	2c00      	cmp	r4, #0
 8002a0c:	d0e3      	beq.n	80029d6 <_vsniprintf_r+0x16>
 8002a0e:	9b00      	ldr	r3, [sp, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e7df      	b.n	80029d6 <_vsniprintf_r+0x16>
	...

08002a18 <vsniprintf>:
 8002a18:	b507      	push	{r0, r1, r2, lr}
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	460a      	mov	r2, r1
 8002a20:	4601      	mov	r1, r0
 8002a22:	4803      	ldr	r0, [pc, #12]	; (8002a30 <vsniprintf+0x18>)
 8002a24:	6800      	ldr	r0, [r0, #0]
 8002a26:	f7ff ffcb 	bl	80029c0 <_vsniprintf_r>
 8002a2a:	b003      	add	sp, #12
 8002a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a30:	20000120 	.word	0x20000120

08002a34 <quorem>:
 8002a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a38:	6903      	ldr	r3, [r0, #16]
 8002a3a:	690c      	ldr	r4, [r1, #16]
 8002a3c:	42a3      	cmp	r3, r4
 8002a3e:	4607      	mov	r7, r0
 8002a40:	f2c0 8081 	blt.w	8002b46 <quorem+0x112>
 8002a44:	3c01      	subs	r4, #1
 8002a46:	f101 0814 	add.w	r8, r1, #20
 8002a4a:	f100 0514 	add.w	r5, r0, #20
 8002a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a68:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a6c:	d331      	bcc.n	8002ad2 <quorem+0x9e>
 8002a6e:	f04f 0e00 	mov.w	lr, #0
 8002a72:	4640      	mov	r0, r8
 8002a74:	46ac      	mov	ip, r5
 8002a76:	46f2      	mov	sl, lr
 8002a78:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a7c:	b293      	uxth	r3, r2
 8002a7e:	fb06 e303 	mla	r3, r6, r3, lr
 8002a82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	ebaa 0303 	sub.w	r3, sl, r3
 8002a8c:	f8dc a000 	ldr.w	sl, [ip]
 8002a90:	0c12      	lsrs	r2, r2, #16
 8002a92:	fa13 f38a 	uxtah	r3, r3, sl
 8002a96:	fb06 e202 	mla	r2, r6, r2, lr
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	9b00      	ldr	r3, [sp, #0]
 8002a9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002aa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002aac:	f8bd 3000 	ldrh.w	r3, [sp]
 8002ab0:	4581      	cmp	r9, r0
 8002ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ab6:	f84c 3b04 	str.w	r3, [ip], #4
 8002aba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002abe:	d2db      	bcs.n	8002a78 <quorem+0x44>
 8002ac0:	f855 300b 	ldr.w	r3, [r5, fp]
 8002ac4:	b92b      	cbnz	r3, 8002ad2 <quorem+0x9e>
 8002ac6:	9b01      	ldr	r3, [sp, #4]
 8002ac8:	3b04      	subs	r3, #4
 8002aca:	429d      	cmp	r5, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	d32e      	bcc.n	8002b2e <quorem+0xfa>
 8002ad0:	613c      	str	r4, [r7, #16]
 8002ad2:	4638      	mov	r0, r7
 8002ad4:	f001 f9c0 	bl	8003e58 <__mcmp>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	db24      	blt.n	8002b26 <quorem+0xf2>
 8002adc:	3601      	adds	r6, #1
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f04f 0c00 	mov.w	ip, #0
 8002ae4:	f858 2b04 	ldr.w	r2, [r8], #4
 8002ae8:	f8d0 e000 	ldr.w	lr, [r0]
 8002aec:	b293      	uxth	r3, r2
 8002aee:	ebac 0303 	sub.w	r3, ip, r3
 8002af2:	0c12      	lsrs	r2, r2, #16
 8002af4:	fa13 f38e 	uxtah	r3, r3, lr
 8002af8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b06:	45c1      	cmp	r9, r8
 8002b08:	f840 3b04 	str.w	r3, [r0], #4
 8002b0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002b10:	d2e8      	bcs.n	8002ae4 <quorem+0xb0>
 8002b12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b1a:	b922      	cbnz	r2, 8002b26 <quorem+0xf2>
 8002b1c:	3b04      	subs	r3, #4
 8002b1e:	429d      	cmp	r5, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	d30a      	bcc.n	8002b3a <quorem+0x106>
 8002b24:	613c      	str	r4, [r7, #16]
 8002b26:	4630      	mov	r0, r6
 8002b28:	b003      	add	sp, #12
 8002b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	3b04      	subs	r3, #4
 8002b32:	2a00      	cmp	r2, #0
 8002b34:	d1cc      	bne.n	8002ad0 <quorem+0x9c>
 8002b36:	3c01      	subs	r4, #1
 8002b38:	e7c7      	b.n	8002aca <quorem+0x96>
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	3b04      	subs	r3, #4
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d1f0      	bne.n	8002b24 <quorem+0xf0>
 8002b42:	3c01      	subs	r4, #1
 8002b44:	e7eb      	b.n	8002b1e <quorem+0xea>
 8002b46:	2000      	movs	r0, #0
 8002b48:	e7ee      	b.n	8002b28 <quorem+0xf4>
 8002b4a:	0000      	movs	r0, r0
 8002b4c:	0000      	movs	r0, r0
	...

08002b50 <_dtoa_r>:
 8002b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b54:	ed2d 8b04 	vpush	{d8-d9}
 8002b58:	ec57 6b10 	vmov	r6, r7, d0
 8002b5c:	b093      	sub	sp, #76	; 0x4c
 8002b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002b64:	9106      	str	r1, [sp, #24]
 8002b66:	ee10 aa10 	vmov	sl, s0
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8002b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8002b70:	46bb      	mov	fp, r7
 8002b72:	b975      	cbnz	r5, 8002b92 <_dtoa_r+0x42>
 8002b74:	2010      	movs	r0, #16
 8002b76:	f000 fed7 	bl	8003928 <malloc>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8002b7e:	b920      	cbnz	r0, 8002b8a <_dtoa_r+0x3a>
 8002b80:	4ba7      	ldr	r3, [pc, #668]	; (8002e20 <_dtoa_r+0x2d0>)
 8002b82:	21ea      	movs	r1, #234	; 0xea
 8002b84:	48a7      	ldr	r0, [pc, #668]	; (8002e24 <_dtoa_r+0x2d4>)
 8002b86:	f001 ff3b 	bl	8004a00 <__assert_func>
 8002b8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b8e:	6005      	str	r5, [r0, #0]
 8002b90:	60c5      	str	r5, [r0, #12]
 8002b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	b151      	cbz	r1, 8002bae <_dtoa_r+0x5e>
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	604a      	str	r2, [r1, #4]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	4093      	lsls	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f000 ff16 	bl	80039d4 <_Bfree>
 8002ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	1e3b      	subs	r3, r7, #0
 8002bb0:	bfaa      	itet	ge
 8002bb2:	2300      	movge	r3, #0
 8002bb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002bb8:	f8c8 3000 	strge.w	r3, [r8]
 8002bbc:	4b9a      	ldr	r3, [pc, #616]	; (8002e28 <_dtoa_r+0x2d8>)
 8002bbe:	bfbc      	itt	lt
 8002bc0:	2201      	movlt	r2, #1
 8002bc2:	f8c8 2000 	strlt.w	r2, [r8]
 8002bc6:	ea33 030b 	bics.w	r3, r3, fp
 8002bca:	d11b      	bne.n	8002c04 <_dtoa_r+0xb4>
 8002bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bce:	f242 730f 	movw	r3, #9999	; 0x270f
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002bd8:	4333      	orrs	r3, r6
 8002bda:	f000 8592 	beq.w	8003702 <_dtoa_r+0xbb2>
 8002bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002be0:	b963      	cbnz	r3, 8002bfc <_dtoa_r+0xac>
 8002be2:	4b92      	ldr	r3, [pc, #584]	; (8002e2c <_dtoa_r+0x2dc>)
 8002be4:	e022      	b.n	8002c2c <_dtoa_r+0xdc>
 8002be6:	4b92      	ldr	r3, [pc, #584]	; (8002e30 <_dtoa_r+0x2e0>)
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	3308      	adds	r3, #8
 8002bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	9801      	ldr	r0, [sp, #4]
 8002bf2:	b013      	add	sp, #76	; 0x4c
 8002bf4:	ecbd 8b04 	vpop	{d8-d9}
 8002bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bfc:	4b8b      	ldr	r3, [pc, #556]	; (8002e2c <_dtoa_r+0x2dc>)
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	3303      	adds	r3, #3
 8002c02:	e7f3      	b.n	8002bec <_dtoa_r+0x9c>
 8002c04:	2200      	movs	r2, #0
 8002c06:	2300      	movs	r3, #0
 8002c08:	4650      	mov	r0, sl
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	f7fd ff7c 	bl	8000b08 <__aeabi_dcmpeq>
 8002c10:	ec4b ab19 	vmov	d9, sl, fp
 8002c14:	4680      	mov	r8, r0
 8002c16:	b158      	cbz	r0, 8002c30 <_dtoa_r+0xe0>
 8002c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 856b 	beq.w	80036fc <_dtoa_r+0xbac>
 8002c26:	4883      	ldr	r0, [pc, #524]	; (8002e34 <_dtoa_r+0x2e4>)
 8002c28:	6018      	str	r0, [r3, #0]
 8002c2a:	1e43      	subs	r3, r0, #1
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	e7df      	b.n	8002bf0 <_dtoa_r+0xa0>
 8002c30:	ec4b ab10 	vmov	d0, sl, fp
 8002c34:	aa10      	add	r2, sp, #64	; 0x40
 8002c36:	a911      	add	r1, sp, #68	; 0x44
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f001 f9b3 	bl	8003fa4 <__d2b>
 8002c3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002c42:	ee08 0a10 	vmov	s16, r0
 8002c46:	2d00      	cmp	r5, #0
 8002c48:	f000 8084 	beq.w	8002d54 <_dtoa_r+0x204>
 8002c4c:	ee19 3a90 	vmov	r3, s19
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002c58:	4656      	mov	r6, sl
 8002c5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <_dtoa_r+0x2e8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	4639      	mov	r1, r7
 8002c6e:	f7fd fb2b 	bl	80002c8 <__aeabi_dsub>
 8002c72:	a365      	add	r3, pc, #404	; (adr r3, 8002e08 <_dtoa_r+0x2b8>)
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f7fd fcde 	bl	8000638 <__aeabi_dmul>
 8002c7c:	a364      	add	r3, pc, #400	; (adr r3, 8002e10 <_dtoa_r+0x2c0>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fb23 	bl	80002cc <__adddf3>
 8002c86:	4606      	mov	r6, r0
 8002c88:	4628      	mov	r0, r5
 8002c8a:	460f      	mov	r7, r1
 8002c8c:	f7fd fc6a 	bl	8000564 <__aeabi_i2d>
 8002c90:	a361      	add	r3, pc, #388	; (adr r3, 8002e18 <_dtoa_r+0x2c8>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd fccf 	bl	8000638 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	4639      	mov	r1, r7
 8002ca2:	f7fd fb13 	bl	80002cc <__adddf3>
 8002ca6:	4606      	mov	r6, r0
 8002ca8:	460f      	mov	r7, r1
 8002caa:	f7fd ff75 	bl	8000b98 <__aeabi_d2iz>
 8002cae:	2200      	movs	r2, #0
 8002cb0:	9000      	str	r0, [sp, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	4639      	mov	r1, r7
 8002cb8:	f7fd ff30 	bl	8000b1c <__aeabi_dcmplt>
 8002cbc:	b150      	cbz	r0, 8002cd4 <_dtoa_r+0x184>
 8002cbe:	9800      	ldr	r0, [sp, #0]
 8002cc0:	f7fd fc50 	bl	8000564 <__aeabi_i2d>
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	f7fd ff1e 	bl	8000b08 <__aeabi_dcmpeq>
 8002ccc:	b910      	cbnz	r0, 8002cd4 <_dtoa_r+0x184>
 8002cce:	9b00      	ldr	r3, [sp, #0]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	9b00      	ldr	r3, [sp, #0]
 8002cd6:	2b16      	cmp	r3, #22
 8002cd8:	d85a      	bhi.n	8002d90 <_dtoa_r+0x240>
 8002cda:	9a00      	ldr	r2, [sp, #0]
 8002cdc:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <_dtoa_r+0x2ec>)
 8002cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	ec51 0b19 	vmov	r0, r1, d9
 8002cea:	f7fd ff17 	bl	8000b1c <__aeabi_dcmplt>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d050      	beq.n	8002d94 <_dtoa_r+0x244>
 8002cf2:	9b00      	ldr	r3, [sp, #0]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002cfe:	1b5d      	subs	r5, r3, r5
 8002d00:	1e6b      	subs	r3, r5, #1
 8002d02:	9305      	str	r3, [sp, #20]
 8002d04:	bf45      	ittet	mi
 8002d06:	f1c5 0301 	rsbmi	r3, r5, #1
 8002d0a:	9304      	strmi	r3, [sp, #16]
 8002d0c:	2300      	movpl	r3, #0
 8002d0e:	2300      	movmi	r3, #0
 8002d10:	bf4c      	ite	mi
 8002d12:	9305      	strmi	r3, [sp, #20]
 8002d14:	9304      	strpl	r3, [sp, #16]
 8002d16:	9b00      	ldr	r3, [sp, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db3d      	blt.n	8002d98 <_dtoa_r+0x248>
 8002d1c:	9b05      	ldr	r3, [sp, #20]
 8002d1e:	9a00      	ldr	r2, [sp, #0]
 8002d20:	920a      	str	r2, [sp, #40]	; 0x28
 8002d22:	4413      	add	r3, r2
 8002d24:	9305      	str	r3, [sp, #20]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9307      	str	r3, [sp, #28]
 8002d2a:	9b06      	ldr	r3, [sp, #24]
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	f200 8089 	bhi.w	8002e44 <_dtoa_r+0x2f4>
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	bfc4      	itt	gt
 8002d36:	3b04      	subgt	r3, #4
 8002d38:	9306      	strgt	r3, [sp, #24]
 8002d3a:	9b06      	ldr	r3, [sp, #24]
 8002d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8002d40:	bfcc      	ite	gt
 8002d42:	2500      	movgt	r5, #0
 8002d44:	2501      	movle	r5, #1
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	f200 8087 	bhi.w	8002e5a <_dtoa_r+0x30a>
 8002d4c:	e8df f003 	tbb	[pc, r3]
 8002d50:	59383a2d 	.word	0x59383a2d
 8002d54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002d58:	441d      	add	r5, r3
 8002d5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	bfc1      	itttt	gt
 8002d62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002d6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8002d6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002d72:	bfda      	itte	le
 8002d74:	f1c3 0320 	rsble	r3, r3, #32
 8002d78:	fa06 f003 	lslle.w	r0, r6, r3
 8002d7c:	4318      	orrgt	r0, r3
 8002d7e:	f7fd fbe1 	bl	8000544 <__aeabi_ui2d>
 8002d82:	2301      	movs	r3, #1
 8002d84:	4606      	mov	r6, r0
 8002d86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002d8a:	3d01      	subs	r5, #1
 8002d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8002d8e:	e76a      	b.n	8002c66 <_dtoa_r+0x116>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e7b2      	b.n	8002cfa <_dtoa_r+0x1aa>
 8002d94:	900b      	str	r0, [sp, #44]	; 0x2c
 8002d96:	e7b1      	b.n	8002cfc <_dtoa_r+0x1ac>
 8002d98:	9b04      	ldr	r3, [sp, #16]
 8002d9a:	9a00      	ldr	r2, [sp, #0]
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	4253      	negs	r3, r2
 8002da2:	9307      	str	r3, [sp, #28]
 8002da4:	2300      	movs	r3, #0
 8002da6:	930a      	str	r3, [sp, #40]	; 0x28
 8002da8:	e7bf      	b.n	8002d2a <_dtoa_r+0x1da>
 8002daa:	2300      	movs	r3, #0
 8002dac:	9308      	str	r3, [sp, #32]
 8002dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	dc55      	bgt.n	8002e60 <_dtoa_r+0x310>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8002dbe:	e00c      	b.n	8002dda <_dtoa_r+0x28a>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e7f3      	b.n	8002dac <_dtoa_r+0x25c>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dc8:	9308      	str	r3, [sp, #32]
 8002dca:	9b00      	ldr	r3, [sp, #0]
 8002dcc:	4413      	add	r3, r2
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	9303      	str	r3, [sp, #12]
 8002dd6:	bfb8      	it	lt
 8002dd8:	2301      	movlt	r3, #1
 8002dda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ddc:	2200      	movs	r2, #0
 8002dde:	6042      	str	r2, [r0, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	f102 0614 	add.w	r6, r2, #20
 8002de6:	429e      	cmp	r6, r3
 8002de8:	6841      	ldr	r1, [r0, #4]
 8002dea:	d93d      	bls.n	8002e68 <_dtoa_r+0x318>
 8002dec:	4620      	mov	r0, r4
 8002dee:	f000 fdb1 	bl	8003954 <_Balloc>
 8002df2:	9001      	str	r0, [sp, #4]
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d13b      	bne.n	8002e70 <_dtoa_r+0x320>
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <_dtoa_r+0x2f0>)
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e00:	e6c0      	b.n	8002b84 <_dtoa_r+0x34>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e7df      	b.n	8002dc6 <_dtoa_r+0x276>
 8002e06:	bf00      	nop
 8002e08:	636f4361 	.word	0x636f4361
 8002e0c:	3fd287a7 	.word	0x3fd287a7
 8002e10:	8b60c8b3 	.word	0x8b60c8b3
 8002e14:	3fc68a28 	.word	0x3fc68a28
 8002e18:	509f79fb 	.word	0x509f79fb
 8002e1c:	3fd34413 	.word	0x3fd34413
 8002e20:	08005129 	.word	0x08005129
 8002e24:	08005140 	.word	0x08005140
 8002e28:	7ff00000 	.word	0x7ff00000
 8002e2c:	08005125 	.word	0x08005125
 8002e30:	0800511c 	.word	0x0800511c
 8002e34:	080050f9 	.word	0x080050f9
 8002e38:	3ff80000 	.word	0x3ff80000
 8002e3c:	08005290 	.word	0x08005290
 8002e40:	0800519b 	.word	0x0800519b
 8002e44:	2501      	movs	r5, #1
 8002e46:	2300      	movs	r3, #0
 8002e48:	9306      	str	r3, [sp, #24]
 8002e4a:	9508      	str	r5, [sp, #32]
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2312      	movs	r3, #18
 8002e58:	e7b0      	b.n	8002dbc <_dtoa_r+0x26c>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	9308      	str	r3, [sp, #32]
 8002e5e:	e7f5      	b.n	8002e4c <_dtoa_r+0x2fc>
 8002e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e66:	e7b8      	b.n	8002dda <_dtoa_r+0x28a>
 8002e68:	3101      	adds	r1, #1
 8002e6a:	6041      	str	r1, [r0, #4]
 8002e6c:	0052      	lsls	r2, r2, #1
 8002e6e:	e7b8      	b.n	8002de2 <_dtoa_r+0x292>
 8002e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e72:	9a01      	ldr	r2, [sp, #4]
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	2b0e      	cmp	r3, #14
 8002e7a:	f200 809d 	bhi.w	8002fb8 <_dtoa_r+0x468>
 8002e7e:	2d00      	cmp	r5, #0
 8002e80:	f000 809a 	beq.w	8002fb8 <_dtoa_r+0x468>
 8002e84:	9b00      	ldr	r3, [sp, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dd32      	ble.n	8002ef0 <_dtoa_r+0x3a0>
 8002e8a:	4ab7      	ldr	r2, [pc, #732]	; (8003168 <_dtoa_r+0x618>)
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e98:	9b00      	ldr	r3, [sp, #0]
 8002e9a:	05d8      	lsls	r0, r3, #23
 8002e9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8002ea0:	d516      	bpl.n	8002ed0 <_dtoa_r+0x380>
 8002ea2:	4bb2      	ldr	r3, [pc, #712]	; (800316c <_dtoa_r+0x61c>)
 8002ea4:	ec51 0b19 	vmov	r0, r1, d9
 8002ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002eac:	f7fd fcee 	bl	800088c <__aeabi_ddiv>
 8002eb0:	f007 070f 	and.w	r7, r7, #15
 8002eb4:	4682      	mov	sl, r0
 8002eb6:	468b      	mov	fp, r1
 8002eb8:	2503      	movs	r5, #3
 8002eba:	4eac      	ldr	r6, [pc, #688]	; (800316c <_dtoa_r+0x61c>)
 8002ebc:	b957      	cbnz	r7, 8002ed4 <_dtoa_r+0x384>
 8002ebe:	4642      	mov	r2, r8
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	4650      	mov	r0, sl
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	f7fd fce1 	bl	800088c <__aeabi_ddiv>
 8002eca:	4682      	mov	sl, r0
 8002ecc:	468b      	mov	fp, r1
 8002ece:	e028      	b.n	8002f22 <_dtoa_r+0x3d2>
 8002ed0:	2502      	movs	r5, #2
 8002ed2:	e7f2      	b.n	8002eba <_dtoa_r+0x36a>
 8002ed4:	07f9      	lsls	r1, r7, #31
 8002ed6:	d508      	bpl.n	8002eea <_dtoa_r+0x39a>
 8002ed8:	4640      	mov	r0, r8
 8002eda:	4649      	mov	r1, r9
 8002edc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002ee0:	f7fd fbaa 	bl	8000638 <__aeabi_dmul>
 8002ee4:	3501      	adds	r5, #1
 8002ee6:	4680      	mov	r8, r0
 8002ee8:	4689      	mov	r9, r1
 8002eea:	107f      	asrs	r7, r7, #1
 8002eec:	3608      	adds	r6, #8
 8002eee:	e7e5      	b.n	8002ebc <_dtoa_r+0x36c>
 8002ef0:	f000 809b 	beq.w	800302a <_dtoa_r+0x4da>
 8002ef4:	9b00      	ldr	r3, [sp, #0]
 8002ef6:	4f9d      	ldr	r7, [pc, #628]	; (800316c <_dtoa_r+0x61c>)
 8002ef8:	425e      	negs	r6, r3
 8002efa:	4b9b      	ldr	r3, [pc, #620]	; (8003168 <_dtoa_r+0x618>)
 8002efc:	f006 020f 	and.w	r2, r6, #15
 8002f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	ec51 0b19 	vmov	r0, r1, d9
 8002f0c:	f7fd fb94 	bl	8000638 <__aeabi_dmul>
 8002f10:	1136      	asrs	r6, r6, #4
 8002f12:	4682      	mov	sl, r0
 8002f14:	468b      	mov	fp, r1
 8002f16:	2300      	movs	r3, #0
 8002f18:	2502      	movs	r5, #2
 8002f1a:	2e00      	cmp	r6, #0
 8002f1c:	d17a      	bne.n	8003014 <_dtoa_r+0x4c4>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1d3      	bne.n	8002eca <_dtoa_r+0x37a>
 8002f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8082 	beq.w	800302e <_dtoa_r+0x4de>
 8002f2a:	4b91      	ldr	r3, [pc, #580]	; (8003170 <_dtoa_r+0x620>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4650      	mov	r0, sl
 8002f30:	4659      	mov	r1, fp
 8002f32:	f7fd fdf3 	bl	8000b1c <__aeabi_dcmplt>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d079      	beq.n	800302e <_dtoa_r+0x4de>
 8002f3a:	9b03      	ldr	r3, [sp, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d076      	beq.n	800302e <_dtoa_r+0x4de>
 8002f40:	9b02      	ldr	r3, [sp, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	dd36      	ble.n	8002fb4 <_dtoa_r+0x464>
 8002f46:	9b00      	ldr	r3, [sp, #0]
 8002f48:	4650      	mov	r0, sl
 8002f4a:	4659      	mov	r1, fp
 8002f4c:	1e5f      	subs	r7, r3, #1
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4b88      	ldr	r3, [pc, #544]	; (8003174 <_dtoa_r+0x624>)
 8002f52:	f7fd fb71 	bl	8000638 <__aeabi_dmul>
 8002f56:	9e02      	ldr	r6, [sp, #8]
 8002f58:	4682      	mov	sl, r0
 8002f5a:	468b      	mov	fp, r1
 8002f5c:	3501      	adds	r5, #1
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f7fd fb00 	bl	8000564 <__aeabi_i2d>
 8002f64:	4652      	mov	r2, sl
 8002f66:	465b      	mov	r3, fp
 8002f68:	f7fd fb66 	bl	8000638 <__aeabi_dmul>
 8002f6c:	4b82      	ldr	r3, [pc, #520]	; (8003178 <_dtoa_r+0x628>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f7fd f9ac 	bl	80002cc <__adddf3>
 8002f74:	46d0      	mov	r8, sl
 8002f76:	46d9      	mov	r9, fp
 8002f78:	4682      	mov	sl, r0
 8002f7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8002f7e:	2e00      	cmp	r6, #0
 8002f80:	d158      	bne.n	8003034 <_dtoa_r+0x4e4>
 8002f82:	4b7e      	ldr	r3, [pc, #504]	; (800317c <_dtoa_r+0x62c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	4640      	mov	r0, r8
 8002f88:	4649      	mov	r1, r9
 8002f8a:	f7fd f99d 	bl	80002c8 <__aeabi_dsub>
 8002f8e:	4652      	mov	r2, sl
 8002f90:	465b      	mov	r3, fp
 8002f92:	4680      	mov	r8, r0
 8002f94:	4689      	mov	r9, r1
 8002f96:	f7fd fddf 	bl	8000b58 <__aeabi_dcmpgt>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	f040 8295 	bne.w	80034ca <_dtoa_r+0x97a>
 8002fa0:	4652      	mov	r2, sl
 8002fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	4649      	mov	r1, r9
 8002faa:	f7fd fdb7 	bl	8000b1c <__aeabi_dcmplt>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	f040 8289 	bne.w	80034c6 <_dtoa_r+0x976>
 8002fb4:	ec5b ab19 	vmov	sl, fp, d9
 8002fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f2c0 8148 	blt.w	8003250 <_dtoa_r+0x700>
 8002fc0:	9a00      	ldr	r2, [sp, #0]
 8002fc2:	2a0e      	cmp	r2, #14
 8002fc4:	f300 8144 	bgt.w	8003250 <_dtoa_r+0x700>
 8002fc8:	4b67      	ldr	r3, [pc, #412]	; (8003168 <_dtoa_r+0x618>)
 8002fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002fce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f280 80d5 	bge.w	8003184 <_dtoa_r+0x634>
 8002fda:	9b03      	ldr	r3, [sp, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f300 80d1 	bgt.w	8003184 <_dtoa_r+0x634>
 8002fe2:	f040 826f 	bne.w	80034c4 <_dtoa_r+0x974>
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <_dtoa_r+0x62c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4640      	mov	r0, r8
 8002fec:	4649      	mov	r1, r9
 8002fee:	f7fd fb23 	bl	8000638 <__aeabi_dmul>
 8002ff2:	4652      	mov	r2, sl
 8002ff4:	465b      	mov	r3, fp
 8002ff6:	f7fd fda5 	bl	8000b44 <__aeabi_dcmpge>
 8002ffa:	9e03      	ldr	r6, [sp, #12]
 8002ffc:	4637      	mov	r7, r6
 8002ffe:	2800      	cmp	r0, #0
 8003000:	f040 8245 	bne.w	800348e <_dtoa_r+0x93e>
 8003004:	9d01      	ldr	r5, [sp, #4]
 8003006:	2331      	movs	r3, #49	; 0x31
 8003008:	f805 3b01 	strb.w	r3, [r5], #1
 800300c:	9b00      	ldr	r3, [sp, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	e240      	b.n	8003496 <_dtoa_r+0x946>
 8003014:	07f2      	lsls	r2, r6, #31
 8003016:	d505      	bpl.n	8003024 <_dtoa_r+0x4d4>
 8003018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800301c:	f7fd fb0c 	bl	8000638 <__aeabi_dmul>
 8003020:	3501      	adds	r5, #1
 8003022:	2301      	movs	r3, #1
 8003024:	1076      	asrs	r6, r6, #1
 8003026:	3708      	adds	r7, #8
 8003028:	e777      	b.n	8002f1a <_dtoa_r+0x3ca>
 800302a:	2502      	movs	r5, #2
 800302c:	e779      	b.n	8002f22 <_dtoa_r+0x3d2>
 800302e:	9f00      	ldr	r7, [sp, #0]
 8003030:	9e03      	ldr	r6, [sp, #12]
 8003032:	e794      	b.n	8002f5e <_dtoa_r+0x40e>
 8003034:	9901      	ldr	r1, [sp, #4]
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <_dtoa_r+0x618>)
 8003038:	4431      	add	r1, r6
 800303a:	910d      	str	r1, [sp, #52]	; 0x34
 800303c:	9908      	ldr	r1, [sp, #32]
 800303e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003042:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003046:	2900      	cmp	r1, #0
 8003048:	d043      	beq.n	80030d2 <_dtoa_r+0x582>
 800304a:	494d      	ldr	r1, [pc, #308]	; (8003180 <_dtoa_r+0x630>)
 800304c:	2000      	movs	r0, #0
 800304e:	f7fd fc1d 	bl	800088c <__aeabi_ddiv>
 8003052:	4652      	mov	r2, sl
 8003054:	465b      	mov	r3, fp
 8003056:	f7fd f937 	bl	80002c8 <__aeabi_dsub>
 800305a:	9d01      	ldr	r5, [sp, #4]
 800305c:	4682      	mov	sl, r0
 800305e:	468b      	mov	fp, r1
 8003060:	4649      	mov	r1, r9
 8003062:	4640      	mov	r0, r8
 8003064:	f7fd fd98 	bl	8000b98 <__aeabi_d2iz>
 8003068:	4606      	mov	r6, r0
 800306a:	f7fd fa7b 	bl	8000564 <__aeabi_i2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4640      	mov	r0, r8
 8003074:	4649      	mov	r1, r9
 8003076:	f7fd f927 	bl	80002c8 <__aeabi_dsub>
 800307a:	3630      	adds	r6, #48	; 0x30
 800307c:	f805 6b01 	strb.w	r6, [r5], #1
 8003080:	4652      	mov	r2, sl
 8003082:	465b      	mov	r3, fp
 8003084:	4680      	mov	r8, r0
 8003086:	4689      	mov	r9, r1
 8003088:	f7fd fd48 	bl	8000b1c <__aeabi_dcmplt>
 800308c:	2800      	cmp	r0, #0
 800308e:	d163      	bne.n	8003158 <_dtoa_r+0x608>
 8003090:	4642      	mov	r2, r8
 8003092:	464b      	mov	r3, r9
 8003094:	4936      	ldr	r1, [pc, #216]	; (8003170 <_dtoa_r+0x620>)
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd f916 	bl	80002c8 <__aeabi_dsub>
 800309c:	4652      	mov	r2, sl
 800309e:	465b      	mov	r3, fp
 80030a0:	f7fd fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	f040 80b5 	bne.w	8003214 <_dtoa_r+0x6c4>
 80030aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030ac:	429d      	cmp	r5, r3
 80030ae:	d081      	beq.n	8002fb4 <_dtoa_r+0x464>
 80030b0:	4b30      	ldr	r3, [pc, #192]	; (8003174 <_dtoa_r+0x624>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	4650      	mov	r0, sl
 80030b6:	4659      	mov	r1, fp
 80030b8:	f7fd fabe 	bl	8000638 <__aeabi_dmul>
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <_dtoa_r+0x624>)
 80030be:	4682      	mov	sl, r0
 80030c0:	468b      	mov	fp, r1
 80030c2:	4640      	mov	r0, r8
 80030c4:	4649      	mov	r1, r9
 80030c6:	2200      	movs	r2, #0
 80030c8:	f7fd fab6 	bl	8000638 <__aeabi_dmul>
 80030cc:	4680      	mov	r8, r0
 80030ce:	4689      	mov	r9, r1
 80030d0:	e7c6      	b.n	8003060 <_dtoa_r+0x510>
 80030d2:	4650      	mov	r0, sl
 80030d4:	4659      	mov	r1, fp
 80030d6:	f7fd faaf 	bl	8000638 <__aeabi_dmul>
 80030da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030dc:	9d01      	ldr	r5, [sp, #4]
 80030de:	930f      	str	r3, [sp, #60]	; 0x3c
 80030e0:	4682      	mov	sl, r0
 80030e2:	468b      	mov	fp, r1
 80030e4:	4649      	mov	r1, r9
 80030e6:	4640      	mov	r0, r8
 80030e8:	f7fd fd56 	bl	8000b98 <__aeabi_d2iz>
 80030ec:	4606      	mov	r6, r0
 80030ee:	f7fd fa39 	bl	8000564 <__aeabi_i2d>
 80030f2:	3630      	adds	r6, #48	; 0x30
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4640      	mov	r0, r8
 80030fa:	4649      	mov	r1, r9
 80030fc:	f7fd f8e4 	bl	80002c8 <__aeabi_dsub>
 8003100:	f805 6b01 	strb.w	r6, [r5], #1
 8003104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003106:	429d      	cmp	r5, r3
 8003108:	4680      	mov	r8, r0
 800310a:	4689      	mov	r9, r1
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	d124      	bne.n	800315c <_dtoa_r+0x60c>
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <_dtoa_r+0x630>)
 8003114:	4650      	mov	r0, sl
 8003116:	4659      	mov	r1, fp
 8003118:	f7fd f8d8 	bl	80002cc <__adddf3>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4640      	mov	r0, r8
 8003122:	4649      	mov	r1, r9
 8003124:	f7fd fd18 	bl	8000b58 <__aeabi_dcmpgt>
 8003128:	2800      	cmp	r0, #0
 800312a:	d173      	bne.n	8003214 <_dtoa_r+0x6c4>
 800312c:	4652      	mov	r2, sl
 800312e:	465b      	mov	r3, fp
 8003130:	4913      	ldr	r1, [pc, #76]	; (8003180 <_dtoa_r+0x630>)
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd f8c8 	bl	80002c8 <__aeabi_dsub>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4640      	mov	r0, r8
 800313e:	4649      	mov	r1, r9
 8003140:	f7fd fcec 	bl	8000b1c <__aeabi_dcmplt>
 8003144:	2800      	cmp	r0, #0
 8003146:	f43f af35 	beq.w	8002fb4 <_dtoa_r+0x464>
 800314a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800314c:	1e6b      	subs	r3, r5, #1
 800314e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003150:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003154:	2b30      	cmp	r3, #48	; 0x30
 8003156:	d0f8      	beq.n	800314a <_dtoa_r+0x5fa>
 8003158:	9700      	str	r7, [sp, #0]
 800315a:	e049      	b.n	80031f0 <_dtoa_r+0x6a0>
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <_dtoa_r+0x624>)
 800315e:	f7fd fa6b 	bl	8000638 <__aeabi_dmul>
 8003162:	4680      	mov	r8, r0
 8003164:	4689      	mov	r9, r1
 8003166:	e7bd      	b.n	80030e4 <_dtoa_r+0x594>
 8003168:	08005290 	.word	0x08005290
 800316c:	08005268 	.word	0x08005268
 8003170:	3ff00000 	.word	0x3ff00000
 8003174:	40240000 	.word	0x40240000
 8003178:	401c0000 	.word	0x401c0000
 800317c:	40140000 	.word	0x40140000
 8003180:	3fe00000 	.word	0x3fe00000
 8003184:	9d01      	ldr	r5, [sp, #4]
 8003186:	4656      	mov	r6, sl
 8003188:	465f      	mov	r7, fp
 800318a:	4642      	mov	r2, r8
 800318c:	464b      	mov	r3, r9
 800318e:	4630      	mov	r0, r6
 8003190:	4639      	mov	r1, r7
 8003192:	f7fd fb7b 	bl	800088c <__aeabi_ddiv>
 8003196:	f7fd fcff 	bl	8000b98 <__aeabi_d2iz>
 800319a:	4682      	mov	sl, r0
 800319c:	f7fd f9e2 	bl	8000564 <__aeabi_i2d>
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	f7fd fa48 	bl	8000638 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4630      	mov	r0, r6
 80031ae:	4639      	mov	r1, r7
 80031b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80031b4:	f7fd f888 	bl	80002c8 <__aeabi_dsub>
 80031b8:	f805 6b01 	strb.w	r6, [r5], #1
 80031bc:	9e01      	ldr	r6, [sp, #4]
 80031be:	9f03      	ldr	r7, [sp, #12]
 80031c0:	1bae      	subs	r6, r5, r6
 80031c2:	42b7      	cmp	r7, r6
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	d135      	bne.n	8003236 <_dtoa_r+0x6e6>
 80031ca:	f7fd f87f 	bl	80002cc <__adddf3>
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	4606      	mov	r6, r0
 80031d4:	460f      	mov	r7, r1
 80031d6:	f7fd fcbf 	bl	8000b58 <__aeabi_dcmpgt>
 80031da:	b9d0      	cbnz	r0, 8003212 <_dtoa_r+0x6c2>
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	4630      	mov	r0, r6
 80031e2:	4639      	mov	r1, r7
 80031e4:	f7fd fc90 	bl	8000b08 <__aeabi_dcmpeq>
 80031e8:	b110      	cbz	r0, 80031f0 <_dtoa_r+0x6a0>
 80031ea:	f01a 0f01 	tst.w	sl, #1
 80031ee:	d110      	bne.n	8003212 <_dtoa_r+0x6c2>
 80031f0:	4620      	mov	r0, r4
 80031f2:	ee18 1a10 	vmov	r1, s16
 80031f6:	f000 fbed 	bl	80039d4 <_Bfree>
 80031fa:	2300      	movs	r3, #0
 80031fc:	9800      	ldr	r0, [sp, #0]
 80031fe:	702b      	strb	r3, [r5, #0]
 8003200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003202:	3001      	adds	r0, #1
 8003204:	6018      	str	r0, [r3, #0]
 8003206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003208:	2b00      	cmp	r3, #0
 800320a:	f43f acf1 	beq.w	8002bf0 <_dtoa_r+0xa0>
 800320e:	601d      	str	r5, [r3, #0]
 8003210:	e4ee      	b.n	8002bf0 <_dtoa_r+0xa0>
 8003212:	9f00      	ldr	r7, [sp, #0]
 8003214:	462b      	mov	r3, r5
 8003216:	461d      	mov	r5, r3
 8003218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800321c:	2a39      	cmp	r2, #57	; 0x39
 800321e:	d106      	bne.n	800322e <_dtoa_r+0x6de>
 8003220:	9a01      	ldr	r2, [sp, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d1f7      	bne.n	8003216 <_dtoa_r+0x6c6>
 8003226:	9901      	ldr	r1, [sp, #4]
 8003228:	2230      	movs	r2, #48	; 0x30
 800322a:	3701      	adds	r7, #1
 800322c:	700a      	strb	r2, [r1, #0]
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	3201      	adds	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e790      	b.n	8003158 <_dtoa_r+0x608>
 8003236:	4ba6      	ldr	r3, [pc, #664]	; (80034d0 <_dtoa_r+0x980>)
 8003238:	2200      	movs	r2, #0
 800323a:	f7fd f9fd 	bl	8000638 <__aeabi_dmul>
 800323e:	2200      	movs	r2, #0
 8003240:	2300      	movs	r3, #0
 8003242:	4606      	mov	r6, r0
 8003244:	460f      	mov	r7, r1
 8003246:	f7fd fc5f 	bl	8000b08 <__aeabi_dcmpeq>
 800324a:	2800      	cmp	r0, #0
 800324c:	d09d      	beq.n	800318a <_dtoa_r+0x63a>
 800324e:	e7cf      	b.n	80031f0 <_dtoa_r+0x6a0>
 8003250:	9a08      	ldr	r2, [sp, #32]
 8003252:	2a00      	cmp	r2, #0
 8003254:	f000 80d7 	beq.w	8003406 <_dtoa_r+0x8b6>
 8003258:	9a06      	ldr	r2, [sp, #24]
 800325a:	2a01      	cmp	r2, #1
 800325c:	f300 80ba 	bgt.w	80033d4 <_dtoa_r+0x884>
 8003260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003262:	2a00      	cmp	r2, #0
 8003264:	f000 80b2 	beq.w	80033cc <_dtoa_r+0x87c>
 8003268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800326c:	9e07      	ldr	r6, [sp, #28]
 800326e:	9d04      	ldr	r5, [sp, #16]
 8003270:	9a04      	ldr	r2, [sp, #16]
 8003272:	441a      	add	r2, r3
 8003274:	9204      	str	r2, [sp, #16]
 8003276:	9a05      	ldr	r2, [sp, #20]
 8003278:	2101      	movs	r1, #1
 800327a:	441a      	add	r2, r3
 800327c:	4620      	mov	r0, r4
 800327e:	9205      	str	r2, [sp, #20]
 8003280:	f000 fc60 	bl	8003b44 <__i2b>
 8003284:	4607      	mov	r7, r0
 8003286:	2d00      	cmp	r5, #0
 8003288:	dd0c      	ble.n	80032a4 <_dtoa_r+0x754>
 800328a:	9b05      	ldr	r3, [sp, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	dd09      	ble.n	80032a4 <_dtoa_r+0x754>
 8003290:	42ab      	cmp	r3, r5
 8003292:	9a04      	ldr	r2, [sp, #16]
 8003294:	bfa8      	it	ge
 8003296:	462b      	movge	r3, r5
 8003298:	1ad2      	subs	r2, r2, r3
 800329a:	9204      	str	r2, [sp, #16]
 800329c:	9a05      	ldr	r2, [sp, #20]
 800329e:	1aed      	subs	r5, r5, r3
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	9305      	str	r3, [sp, #20]
 80032a4:	9b07      	ldr	r3, [sp, #28]
 80032a6:	b31b      	cbz	r3, 80032f0 <_dtoa_r+0x7a0>
 80032a8:	9b08      	ldr	r3, [sp, #32]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80af 	beq.w	800340e <_dtoa_r+0x8be>
 80032b0:	2e00      	cmp	r6, #0
 80032b2:	dd13      	ble.n	80032dc <_dtoa_r+0x78c>
 80032b4:	4639      	mov	r1, r7
 80032b6:	4632      	mov	r2, r6
 80032b8:	4620      	mov	r0, r4
 80032ba:	f000 fd03 	bl	8003cc4 <__pow5mult>
 80032be:	ee18 2a10 	vmov	r2, s16
 80032c2:	4601      	mov	r1, r0
 80032c4:	4607      	mov	r7, r0
 80032c6:	4620      	mov	r0, r4
 80032c8:	f000 fc52 	bl	8003b70 <__multiply>
 80032cc:	ee18 1a10 	vmov	r1, s16
 80032d0:	4680      	mov	r8, r0
 80032d2:	4620      	mov	r0, r4
 80032d4:	f000 fb7e 	bl	80039d4 <_Bfree>
 80032d8:	ee08 8a10 	vmov	s16, r8
 80032dc:	9b07      	ldr	r3, [sp, #28]
 80032de:	1b9a      	subs	r2, r3, r6
 80032e0:	d006      	beq.n	80032f0 <_dtoa_r+0x7a0>
 80032e2:	ee18 1a10 	vmov	r1, s16
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 fcec 	bl	8003cc4 <__pow5mult>
 80032ec:	ee08 0a10 	vmov	s16, r0
 80032f0:	2101      	movs	r1, #1
 80032f2:	4620      	mov	r0, r4
 80032f4:	f000 fc26 	bl	8003b44 <__i2b>
 80032f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	4606      	mov	r6, r0
 80032fe:	f340 8088 	ble.w	8003412 <_dtoa_r+0x8c2>
 8003302:	461a      	mov	r2, r3
 8003304:	4601      	mov	r1, r0
 8003306:	4620      	mov	r0, r4
 8003308:	f000 fcdc 	bl	8003cc4 <__pow5mult>
 800330c:	9b06      	ldr	r3, [sp, #24]
 800330e:	2b01      	cmp	r3, #1
 8003310:	4606      	mov	r6, r0
 8003312:	f340 8081 	ble.w	8003418 <_dtoa_r+0x8c8>
 8003316:	f04f 0800 	mov.w	r8, #0
 800331a:	6933      	ldr	r3, [r6, #16]
 800331c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003320:	6918      	ldr	r0, [r3, #16]
 8003322:	f000 fbbf 	bl	8003aa4 <__hi0bits>
 8003326:	f1c0 0020 	rsb	r0, r0, #32
 800332a:	9b05      	ldr	r3, [sp, #20]
 800332c:	4418      	add	r0, r3
 800332e:	f010 001f 	ands.w	r0, r0, #31
 8003332:	f000 8092 	beq.w	800345a <_dtoa_r+0x90a>
 8003336:	f1c0 0320 	rsb	r3, r0, #32
 800333a:	2b04      	cmp	r3, #4
 800333c:	f340 808a 	ble.w	8003454 <_dtoa_r+0x904>
 8003340:	f1c0 001c 	rsb	r0, r0, #28
 8003344:	9b04      	ldr	r3, [sp, #16]
 8003346:	4403      	add	r3, r0
 8003348:	9304      	str	r3, [sp, #16]
 800334a:	9b05      	ldr	r3, [sp, #20]
 800334c:	4403      	add	r3, r0
 800334e:	4405      	add	r5, r0
 8003350:	9305      	str	r3, [sp, #20]
 8003352:	9b04      	ldr	r3, [sp, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	dd07      	ble.n	8003368 <_dtoa_r+0x818>
 8003358:	ee18 1a10 	vmov	r1, s16
 800335c:	461a      	mov	r2, r3
 800335e:	4620      	mov	r0, r4
 8003360:	f000 fd0a 	bl	8003d78 <__lshift>
 8003364:	ee08 0a10 	vmov	s16, r0
 8003368:	9b05      	ldr	r3, [sp, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	dd05      	ble.n	800337a <_dtoa_r+0x82a>
 800336e:	4631      	mov	r1, r6
 8003370:	461a      	mov	r2, r3
 8003372:	4620      	mov	r0, r4
 8003374:	f000 fd00 	bl	8003d78 <__lshift>
 8003378:	4606      	mov	r6, r0
 800337a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d06e      	beq.n	800345e <_dtoa_r+0x90e>
 8003380:	ee18 0a10 	vmov	r0, s16
 8003384:	4631      	mov	r1, r6
 8003386:	f000 fd67 	bl	8003e58 <__mcmp>
 800338a:	2800      	cmp	r0, #0
 800338c:	da67      	bge.n	800345e <_dtoa_r+0x90e>
 800338e:	9b00      	ldr	r3, [sp, #0]
 8003390:	3b01      	subs	r3, #1
 8003392:	ee18 1a10 	vmov	r1, s16
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	220a      	movs	r2, #10
 800339a:	2300      	movs	r3, #0
 800339c:	4620      	mov	r0, r4
 800339e:	f000 fb3b 	bl	8003a18 <__multadd>
 80033a2:	9b08      	ldr	r3, [sp, #32]
 80033a4:	ee08 0a10 	vmov	s16, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 81b1 	beq.w	8003710 <_dtoa_r+0xbc0>
 80033ae:	2300      	movs	r3, #0
 80033b0:	4639      	mov	r1, r7
 80033b2:	220a      	movs	r2, #10
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 fb2f 	bl	8003a18 <__multadd>
 80033ba:	9b02      	ldr	r3, [sp, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	4607      	mov	r7, r0
 80033c0:	f300 808e 	bgt.w	80034e0 <_dtoa_r+0x990>
 80033c4:	9b06      	ldr	r3, [sp, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	dc51      	bgt.n	800346e <_dtoa_r+0x91e>
 80033ca:	e089      	b.n	80034e0 <_dtoa_r+0x990>
 80033cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80033d2:	e74b      	b.n	800326c <_dtoa_r+0x71c>
 80033d4:	9b03      	ldr	r3, [sp, #12]
 80033d6:	1e5e      	subs	r6, r3, #1
 80033d8:	9b07      	ldr	r3, [sp, #28]
 80033da:	42b3      	cmp	r3, r6
 80033dc:	bfbf      	itttt	lt
 80033de:	9b07      	ldrlt	r3, [sp, #28]
 80033e0:	9607      	strlt	r6, [sp, #28]
 80033e2:	1af2      	sublt	r2, r6, r3
 80033e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80033e6:	bfb6      	itet	lt
 80033e8:	189b      	addlt	r3, r3, r2
 80033ea:	1b9e      	subge	r6, r3, r6
 80033ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80033ee:	9b03      	ldr	r3, [sp, #12]
 80033f0:	bfb8      	it	lt
 80033f2:	2600      	movlt	r6, #0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bfb7      	itett	lt
 80033f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80033fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003400:	1a9d      	sublt	r5, r3, r2
 8003402:	2300      	movlt	r3, #0
 8003404:	e734      	b.n	8003270 <_dtoa_r+0x720>
 8003406:	9e07      	ldr	r6, [sp, #28]
 8003408:	9d04      	ldr	r5, [sp, #16]
 800340a:	9f08      	ldr	r7, [sp, #32]
 800340c:	e73b      	b.n	8003286 <_dtoa_r+0x736>
 800340e:	9a07      	ldr	r2, [sp, #28]
 8003410:	e767      	b.n	80032e2 <_dtoa_r+0x792>
 8003412:	9b06      	ldr	r3, [sp, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	dc18      	bgt.n	800344a <_dtoa_r+0x8fa>
 8003418:	f1ba 0f00 	cmp.w	sl, #0
 800341c:	d115      	bne.n	800344a <_dtoa_r+0x8fa>
 800341e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003422:	b993      	cbnz	r3, 800344a <_dtoa_r+0x8fa>
 8003424:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003428:	0d1b      	lsrs	r3, r3, #20
 800342a:	051b      	lsls	r3, r3, #20
 800342c:	b183      	cbz	r3, 8003450 <_dtoa_r+0x900>
 800342e:	9b04      	ldr	r3, [sp, #16]
 8003430:	3301      	adds	r3, #1
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	9b05      	ldr	r3, [sp, #20]
 8003436:	3301      	adds	r3, #1
 8003438:	9305      	str	r3, [sp, #20]
 800343a:	f04f 0801 	mov.w	r8, #1
 800343e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	f47f af6a 	bne.w	800331a <_dtoa_r+0x7ca>
 8003446:	2001      	movs	r0, #1
 8003448:	e76f      	b.n	800332a <_dtoa_r+0x7da>
 800344a:	f04f 0800 	mov.w	r8, #0
 800344e:	e7f6      	b.n	800343e <_dtoa_r+0x8ee>
 8003450:	4698      	mov	r8, r3
 8003452:	e7f4      	b.n	800343e <_dtoa_r+0x8ee>
 8003454:	f43f af7d 	beq.w	8003352 <_dtoa_r+0x802>
 8003458:	4618      	mov	r0, r3
 800345a:	301c      	adds	r0, #28
 800345c:	e772      	b.n	8003344 <_dtoa_r+0x7f4>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	dc37      	bgt.n	80034d4 <_dtoa_r+0x984>
 8003464:	9b06      	ldr	r3, [sp, #24]
 8003466:	2b02      	cmp	r3, #2
 8003468:	dd34      	ble.n	80034d4 <_dtoa_r+0x984>
 800346a:	9b03      	ldr	r3, [sp, #12]
 800346c:	9302      	str	r3, [sp, #8]
 800346e:	9b02      	ldr	r3, [sp, #8]
 8003470:	b96b      	cbnz	r3, 800348e <_dtoa_r+0x93e>
 8003472:	4631      	mov	r1, r6
 8003474:	2205      	movs	r2, #5
 8003476:	4620      	mov	r0, r4
 8003478:	f000 face 	bl	8003a18 <__multadd>
 800347c:	4601      	mov	r1, r0
 800347e:	4606      	mov	r6, r0
 8003480:	ee18 0a10 	vmov	r0, s16
 8003484:	f000 fce8 	bl	8003e58 <__mcmp>
 8003488:	2800      	cmp	r0, #0
 800348a:	f73f adbb 	bgt.w	8003004 <_dtoa_r+0x4b4>
 800348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003490:	9d01      	ldr	r5, [sp, #4]
 8003492:	43db      	mvns	r3, r3
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	f04f 0800 	mov.w	r8, #0
 800349a:	4631      	mov	r1, r6
 800349c:	4620      	mov	r0, r4
 800349e:	f000 fa99 	bl	80039d4 <_Bfree>
 80034a2:	2f00      	cmp	r7, #0
 80034a4:	f43f aea4 	beq.w	80031f0 <_dtoa_r+0x6a0>
 80034a8:	f1b8 0f00 	cmp.w	r8, #0
 80034ac:	d005      	beq.n	80034ba <_dtoa_r+0x96a>
 80034ae:	45b8      	cmp	r8, r7
 80034b0:	d003      	beq.n	80034ba <_dtoa_r+0x96a>
 80034b2:	4641      	mov	r1, r8
 80034b4:	4620      	mov	r0, r4
 80034b6:	f000 fa8d 	bl	80039d4 <_Bfree>
 80034ba:	4639      	mov	r1, r7
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 fa89 	bl	80039d4 <_Bfree>
 80034c2:	e695      	b.n	80031f0 <_dtoa_r+0x6a0>
 80034c4:	2600      	movs	r6, #0
 80034c6:	4637      	mov	r7, r6
 80034c8:	e7e1      	b.n	800348e <_dtoa_r+0x93e>
 80034ca:	9700      	str	r7, [sp, #0]
 80034cc:	4637      	mov	r7, r6
 80034ce:	e599      	b.n	8003004 <_dtoa_r+0x4b4>
 80034d0:	40240000 	.word	0x40240000
 80034d4:	9b08      	ldr	r3, [sp, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80ca 	beq.w	8003670 <_dtoa_r+0xb20>
 80034dc:	9b03      	ldr	r3, [sp, #12]
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	2d00      	cmp	r5, #0
 80034e2:	dd05      	ble.n	80034f0 <_dtoa_r+0x9a0>
 80034e4:	4639      	mov	r1, r7
 80034e6:	462a      	mov	r2, r5
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 fc45 	bl	8003d78 <__lshift>
 80034ee:	4607      	mov	r7, r0
 80034f0:	f1b8 0f00 	cmp.w	r8, #0
 80034f4:	d05b      	beq.n	80035ae <_dtoa_r+0xa5e>
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 fa2b 	bl	8003954 <_Balloc>
 80034fe:	4605      	mov	r5, r0
 8003500:	b928      	cbnz	r0, 800350e <_dtoa_r+0x9be>
 8003502:	4b87      	ldr	r3, [pc, #540]	; (8003720 <_dtoa_r+0xbd0>)
 8003504:	4602      	mov	r2, r0
 8003506:	f240 21ea 	movw	r1, #746	; 0x2ea
 800350a:	f7ff bb3b 	b.w	8002b84 <_dtoa_r+0x34>
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	3202      	adds	r2, #2
 8003512:	0092      	lsls	r2, r2, #2
 8003514:	f107 010c 	add.w	r1, r7, #12
 8003518:	300c      	adds	r0, #12
 800351a:	f000 fa0d 	bl	8003938 <memcpy>
 800351e:	2201      	movs	r2, #1
 8003520:	4629      	mov	r1, r5
 8003522:	4620      	mov	r0, r4
 8003524:	f000 fc28 	bl	8003d78 <__lshift>
 8003528:	9b01      	ldr	r3, [sp, #4]
 800352a:	f103 0901 	add.w	r9, r3, #1
 800352e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003532:	4413      	add	r3, r2
 8003534:	9305      	str	r3, [sp, #20]
 8003536:	f00a 0301 	and.w	r3, sl, #1
 800353a:	46b8      	mov	r8, r7
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	4607      	mov	r7, r0
 8003540:	4631      	mov	r1, r6
 8003542:	ee18 0a10 	vmov	r0, s16
 8003546:	f7ff fa75 	bl	8002a34 <quorem>
 800354a:	4641      	mov	r1, r8
 800354c:	9002      	str	r0, [sp, #8]
 800354e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003552:	ee18 0a10 	vmov	r0, s16
 8003556:	f000 fc7f 	bl	8003e58 <__mcmp>
 800355a:	463a      	mov	r2, r7
 800355c:	9003      	str	r0, [sp, #12]
 800355e:	4631      	mov	r1, r6
 8003560:	4620      	mov	r0, r4
 8003562:	f000 fc95 	bl	8003e90 <__mdiff>
 8003566:	68c2      	ldr	r2, [r0, #12]
 8003568:	f109 3bff 	add.w	fp, r9, #4294967295
 800356c:	4605      	mov	r5, r0
 800356e:	bb02      	cbnz	r2, 80035b2 <_dtoa_r+0xa62>
 8003570:	4601      	mov	r1, r0
 8003572:	ee18 0a10 	vmov	r0, s16
 8003576:	f000 fc6f 	bl	8003e58 <__mcmp>
 800357a:	4602      	mov	r2, r0
 800357c:	4629      	mov	r1, r5
 800357e:	4620      	mov	r0, r4
 8003580:	9207      	str	r2, [sp, #28]
 8003582:	f000 fa27 	bl	80039d4 <_Bfree>
 8003586:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800358a:	ea43 0102 	orr.w	r1, r3, r2
 800358e:	9b04      	ldr	r3, [sp, #16]
 8003590:	430b      	orrs	r3, r1
 8003592:	464d      	mov	r5, r9
 8003594:	d10f      	bne.n	80035b6 <_dtoa_r+0xa66>
 8003596:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800359a:	d02a      	beq.n	80035f2 <_dtoa_r+0xaa2>
 800359c:	9b03      	ldr	r3, [sp, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dd02      	ble.n	80035a8 <_dtoa_r+0xa58>
 80035a2:	9b02      	ldr	r3, [sp, #8]
 80035a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80035a8:	f88b a000 	strb.w	sl, [fp]
 80035ac:	e775      	b.n	800349a <_dtoa_r+0x94a>
 80035ae:	4638      	mov	r0, r7
 80035b0:	e7ba      	b.n	8003528 <_dtoa_r+0x9d8>
 80035b2:	2201      	movs	r2, #1
 80035b4:	e7e2      	b.n	800357c <_dtoa_r+0xa2c>
 80035b6:	9b03      	ldr	r3, [sp, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db04      	blt.n	80035c6 <_dtoa_r+0xa76>
 80035bc:	9906      	ldr	r1, [sp, #24]
 80035be:	430b      	orrs	r3, r1
 80035c0:	9904      	ldr	r1, [sp, #16]
 80035c2:	430b      	orrs	r3, r1
 80035c4:	d122      	bne.n	800360c <_dtoa_r+0xabc>
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	ddee      	ble.n	80035a8 <_dtoa_r+0xa58>
 80035ca:	ee18 1a10 	vmov	r1, s16
 80035ce:	2201      	movs	r2, #1
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 fbd1 	bl	8003d78 <__lshift>
 80035d6:	4631      	mov	r1, r6
 80035d8:	ee08 0a10 	vmov	s16, r0
 80035dc:	f000 fc3c 	bl	8003e58 <__mcmp>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	dc03      	bgt.n	80035ec <_dtoa_r+0xa9c>
 80035e4:	d1e0      	bne.n	80035a8 <_dtoa_r+0xa58>
 80035e6:	f01a 0f01 	tst.w	sl, #1
 80035ea:	d0dd      	beq.n	80035a8 <_dtoa_r+0xa58>
 80035ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80035f0:	d1d7      	bne.n	80035a2 <_dtoa_r+0xa52>
 80035f2:	2339      	movs	r3, #57	; 0x39
 80035f4:	f88b 3000 	strb.w	r3, [fp]
 80035f8:	462b      	mov	r3, r5
 80035fa:	461d      	mov	r5, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003602:	2a39      	cmp	r2, #57	; 0x39
 8003604:	d071      	beq.n	80036ea <_dtoa_r+0xb9a>
 8003606:	3201      	adds	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e746      	b.n	800349a <_dtoa_r+0x94a>
 800360c:	2a00      	cmp	r2, #0
 800360e:	dd07      	ble.n	8003620 <_dtoa_r+0xad0>
 8003610:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003614:	d0ed      	beq.n	80035f2 <_dtoa_r+0xaa2>
 8003616:	f10a 0301 	add.w	r3, sl, #1
 800361a:	f88b 3000 	strb.w	r3, [fp]
 800361e:	e73c      	b.n	800349a <_dtoa_r+0x94a>
 8003620:	9b05      	ldr	r3, [sp, #20]
 8003622:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003626:	4599      	cmp	r9, r3
 8003628:	d047      	beq.n	80036ba <_dtoa_r+0xb6a>
 800362a:	ee18 1a10 	vmov	r1, s16
 800362e:	2300      	movs	r3, #0
 8003630:	220a      	movs	r2, #10
 8003632:	4620      	mov	r0, r4
 8003634:	f000 f9f0 	bl	8003a18 <__multadd>
 8003638:	45b8      	cmp	r8, r7
 800363a:	ee08 0a10 	vmov	s16, r0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f04f 020a 	mov.w	r2, #10
 8003646:	4641      	mov	r1, r8
 8003648:	4620      	mov	r0, r4
 800364a:	d106      	bne.n	800365a <_dtoa_r+0xb0a>
 800364c:	f000 f9e4 	bl	8003a18 <__multadd>
 8003650:	4680      	mov	r8, r0
 8003652:	4607      	mov	r7, r0
 8003654:	f109 0901 	add.w	r9, r9, #1
 8003658:	e772      	b.n	8003540 <_dtoa_r+0x9f0>
 800365a:	f000 f9dd 	bl	8003a18 <__multadd>
 800365e:	4639      	mov	r1, r7
 8003660:	4680      	mov	r8, r0
 8003662:	2300      	movs	r3, #0
 8003664:	220a      	movs	r2, #10
 8003666:	4620      	mov	r0, r4
 8003668:	f000 f9d6 	bl	8003a18 <__multadd>
 800366c:	4607      	mov	r7, r0
 800366e:	e7f1      	b.n	8003654 <_dtoa_r+0xb04>
 8003670:	9b03      	ldr	r3, [sp, #12]
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	9d01      	ldr	r5, [sp, #4]
 8003676:	ee18 0a10 	vmov	r0, s16
 800367a:	4631      	mov	r1, r6
 800367c:	f7ff f9da 	bl	8002a34 <quorem>
 8003680:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003684:	9b01      	ldr	r3, [sp, #4]
 8003686:	f805 ab01 	strb.w	sl, [r5], #1
 800368a:	1aea      	subs	r2, r5, r3
 800368c:	9b02      	ldr	r3, [sp, #8]
 800368e:	4293      	cmp	r3, r2
 8003690:	dd09      	ble.n	80036a6 <_dtoa_r+0xb56>
 8003692:	ee18 1a10 	vmov	r1, s16
 8003696:	2300      	movs	r3, #0
 8003698:	220a      	movs	r2, #10
 800369a:	4620      	mov	r0, r4
 800369c:	f000 f9bc 	bl	8003a18 <__multadd>
 80036a0:	ee08 0a10 	vmov	s16, r0
 80036a4:	e7e7      	b.n	8003676 <_dtoa_r+0xb26>
 80036a6:	9b02      	ldr	r3, [sp, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bfc8      	it	gt
 80036ac:	461d      	movgt	r5, r3
 80036ae:	9b01      	ldr	r3, [sp, #4]
 80036b0:	bfd8      	it	le
 80036b2:	2501      	movle	r5, #1
 80036b4:	441d      	add	r5, r3
 80036b6:	f04f 0800 	mov.w	r8, #0
 80036ba:	ee18 1a10 	vmov	r1, s16
 80036be:	2201      	movs	r2, #1
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 fb59 	bl	8003d78 <__lshift>
 80036c6:	4631      	mov	r1, r6
 80036c8:	ee08 0a10 	vmov	s16, r0
 80036cc:	f000 fbc4 	bl	8003e58 <__mcmp>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	dc91      	bgt.n	80035f8 <_dtoa_r+0xaa8>
 80036d4:	d102      	bne.n	80036dc <_dtoa_r+0xb8c>
 80036d6:	f01a 0f01 	tst.w	sl, #1
 80036da:	d18d      	bne.n	80035f8 <_dtoa_r+0xaa8>
 80036dc:	462b      	mov	r3, r5
 80036de:	461d      	mov	r5, r3
 80036e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80036e4:	2a30      	cmp	r2, #48	; 0x30
 80036e6:	d0fa      	beq.n	80036de <_dtoa_r+0xb8e>
 80036e8:	e6d7      	b.n	800349a <_dtoa_r+0x94a>
 80036ea:	9a01      	ldr	r2, [sp, #4]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d184      	bne.n	80035fa <_dtoa_r+0xaaa>
 80036f0:	9b00      	ldr	r3, [sp, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2331      	movs	r3, #49	; 0x31
 80036f8:	7013      	strb	r3, [r2, #0]
 80036fa:	e6ce      	b.n	800349a <_dtoa_r+0x94a>
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <_dtoa_r+0xbd4>)
 80036fe:	f7ff ba95 	b.w	8002c2c <_dtoa_r+0xdc>
 8003702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003704:	2b00      	cmp	r3, #0
 8003706:	f47f aa6e 	bne.w	8002be6 <_dtoa_r+0x96>
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <_dtoa_r+0xbd8>)
 800370c:	f7ff ba8e 	b.w	8002c2c <_dtoa_r+0xdc>
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	dcae      	bgt.n	8003674 <_dtoa_r+0xb24>
 8003716:	9b06      	ldr	r3, [sp, #24]
 8003718:	2b02      	cmp	r3, #2
 800371a:	f73f aea8 	bgt.w	800346e <_dtoa_r+0x91e>
 800371e:	e7a9      	b.n	8003674 <_dtoa_r+0xb24>
 8003720:	0800519b 	.word	0x0800519b
 8003724:	080050f8 	.word	0x080050f8
 8003728:	0800511c 	.word	0x0800511c

0800372c <std>:
 800372c:	2300      	movs	r3, #0
 800372e:	b510      	push	{r4, lr}
 8003730:	4604      	mov	r4, r0
 8003732:	e9c0 3300 	strd	r3, r3, [r0]
 8003736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800373a:	6083      	str	r3, [r0, #8]
 800373c:	8181      	strh	r1, [r0, #12]
 800373e:	6643      	str	r3, [r0, #100]	; 0x64
 8003740:	81c2      	strh	r2, [r0, #14]
 8003742:	6183      	str	r3, [r0, #24]
 8003744:	4619      	mov	r1, r3
 8003746:	2208      	movs	r2, #8
 8003748:	305c      	adds	r0, #92	; 0x5c
 800374a:	f7fe fcab 	bl	80020a4 <memset>
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <std+0x38>)
 8003750:	6263      	str	r3, [r4, #36]	; 0x24
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <std+0x3c>)
 8003754:	62a3      	str	r3, [r4, #40]	; 0x28
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <std+0x40>)
 8003758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <std+0x44>)
 800375c:	6224      	str	r4, [r4, #32]
 800375e:	6323      	str	r3, [r4, #48]	; 0x30
 8003760:	bd10      	pop	{r4, pc}
 8003762:	bf00      	nop
 8003764:	080047d5 	.word	0x080047d5
 8003768:	080047f7 	.word	0x080047f7
 800376c:	0800482f 	.word	0x0800482f
 8003770:	08004853 	.word	0x08004853

08003774 <_cleanup_r>:
 8003774:	4901      	ldr	r1, [pc, #4]	; (800377c <_cleanup_r+0x8>)
 8003776:	f000 b8af 	b.w	80038d8 <_fwalk_reent>
 800377a:	bf00      	nop
 800377c:	08004b69 	.word	0x08004b69

08003780 <__sfmoreglue>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	2268      	movs	r2, #104	; 0x68
 8003784:	1e4d      	subs	r5, r1, #1
 8003786:	4355      	muls	r5, r2
 8003788:	460e      	mov	r6, r1
 800378a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800378e:	f000 fce7 	bl	8004160 <_malloc_r>
 8003792:	4604      	mov	r4, r0
 8003794:	b140      	cbz	r0, 80037a8 <__sfmoreglue+0x28>
 8003796:	2100      	movs	r1, #0
 8003798:	e9c0 1600 	strd	r1, r6, [r0]
 800379c:	300c      	adds	r0, #12
 800379e:	60a0      	str	r0, [r4, #8]
 80037a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037a4:	f7fe fc7e 	bl	80020a4 <memset>
 80037a8:	4620      	mov	r0, r4
 80037aa:	bd70      	pop	{r4, r5, r6, pc}

080037ac <__sfp_lock_acquire>:
 80037ac:	4801      	ldr	r0, [pc, #4]	; (80037b4 <__sfp_lock_acquire+0x8>)
 80037ae:	f000 b8b8 	b.w	8003922 <__retarget_lock_acquire_recursive>
 80037b2:	bf00      	nop
 80037b4:	20000835 	.word	0x20000835

080037b8 <__sfp_lock_release>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__sfp_lock_release+0x8>)
 80037ba:	f000 b8b3 	b.w	8003924 <__retarget_lock_release_recursive>
 80037be:	bf00      	nop
 80037c0:	20000835 	.word	0x20000835

080037c4 <__sinit_lock_acquire>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__sinit_lock_acquire+0x8>)
 80037c6:	f000 b8ac 	b.w	8003922 <__retarget_lock_acquire_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000836 	.word	0x20000836

080037d0 <__sinit_lock_release>:
 80037d0:	4801      	ldr	r0, [pc, #4]	; (80037d8 <__sinit_lock_release+0x8>)
 80037d2:	f000 b8a7 	b.w	8003924 <__retarget_lock_release_recursive>
 80037d6:	bf00      	nop
 80037d8:	20000836 	.word	0x20000836

080037dc <__sinit>:
 80037dc:	b510      	push	{r4, lr}
 80037de:	4604      	mov	r4, r0
 80037e0:	f7ff fff0 	bl	80037c4 <__sinit_lock_acquire>
 80037e4:	69a3      	ldr	r3, [r4, #24]
 80037e6:	b11b      	cbz	r3, 80037f0 <__sinit+0x14>
 80037e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ec:	f7ff bff0 	b.w	80037d0 <__sinit_lock_release>
 80037f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037f4:	6523      	str	r3, [r4, #80]	; 0x50
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <__sinit+0x68>)
 80037f8:	4a13      	ldr	r2, [pc, #76]	; (8003848 <__sinit+0x6c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80037fe:	42a3      	cmp	r3, r4
 8003800:	bf04      	itt	eq
 8003802:	2301      	moveq	r3, #1
 8003804:	61a3      	streq	r3, [r4, #24]
 8003806:	4620      	mov	r0, r4
 8003808:	f000 f820 	bl	800384c <__sfp>
 800380c:	6060      	str	r0, [r4, #4]
 800380e:	4620      	mov	r0, r4
 8003810:	f000 f81c 	bl	800384c <__sfp>
 8003814:	60a0      	str	r0, [r4, #8]
 8003816:	4620      	mov	r0, r4
 8003818:	f000 f818 	bl	800384c <__sfp>
 800381c:	2200      	movs	r2, #0
 800381e:	60e0      	str	r0, [r4, #12]
 8003820:	2104      	movs	r1, #4
 8003822:	6860      	ldr	r0, [r4, #4]
 8003824:	f7ff ff82 	bl	800372c <std>
 8003828:	68a0      	ldr	r0, [r4, #8]
 800382a:	2201      	movs	r2, #1
 800382c:	2109      	movs	r1, #9
 800382e:	f7ff ff7d 	bl	800372c <std>
 8003832:	68e0      	ldr	r0, [r4, #12]
 8003834:	2202      	movs	r2, #2
 8003836:	2112      	movs	r1, #18
 8003838:	f7ff ff78 	bl	800372c <std>
 800383c:	2301      	movs	r3, #1
 800383e:	61a3      	str	r3, [r4, #24]
 8003840:	e7d2      	b.n	80037e8 <__sinit+0xc>
 8003842:	bf00      	nop
 8003844:	080050e4 	.word	0x080050e4
 8003848:	08003775 	.word	0x08003775

0800384c <__sfp>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	4607      	mov	r7, r0
 8003850:	f7ff ffac 	bl	80037ac <__sfp_lock_acquire>
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <__sfp+0x84>)
 8003856:	681e      	ldr	r6, [r3, #0]
 8003858:	69b3      	ldr	r3, [r6, #24]
 800385a:	b913      	cbnz	r3, 8003862 <__sfp+0x16>
 800385c:	4630      	mov	r0, r6
 800385e:	f7ff ffbd 	bl	80037dc <__sinit>
 8003862:	3648      	adds	r6, #72	; 0x48
 8003864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003868:	3b01      	subs	r3, #1
 800386a:	d503      	bpl.n	8003874 <__sfp+0x28>
 800386c:	6833      	ldr	r3, [r6, #0]
 800386e:	b30b      	cbz	r3, 80038b4 <__sfp+0x68>
 8003870:	6836      	ldr	r6, [r6, #0]
 8003872:	e7f7      	b.n	8003864 <__sfp+0x18>
 8003874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003878:	b9d5      	cbnz	r5, 80038b0 <__sfp+0x64>
 800387a:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <__sfp+0x88>)
 800387c:	60e3      	str	r3, [r4, #12]
 800387e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003882:	6665      	str	r5, [r4, #100]	; 0x64
 8003884:	f000 f84c 	bl	8003920 <__retarget_lock_init_recursive>
 8003888:	f7ff ff96 	bl	80037b8 <__sfp_lock_release>
 800388c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003894:	6025      	str	r5, [r4, #0]
 8003896:	61a5      	str	r5, [r4, #24]
 8003898:	2208      	movs	r2, #8
 800389a:	4629      	mov	r1, r5
 800389c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038a0:	f7fe fc00 	bl	80020a4 <memset>
 80038a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038ac:	4620      	mov	r0, r4
 80038ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b0:	3468      	adds	r4, #104	; 0x68
 80038b2:	e7d9      	b.n	8003868 <__sfp+0x1c>
 80038b4:	2104      	movs	r1, #4
 80038b6:	4638      	mov	r0, r7
 80038b8:	f7ff ff62 	bl	8003780 <__sfmoreglue>
 80038bc:	4604      	mov	r4, r0
 80038be:	6030      	str	r0, [r6, #0]
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d1d5      	bne.n	8003870 <__sfp+0x24>
 80038c4:	f7ff ff78 	bl	80037b8 <__sfp_lock_release>
 80038c8:	230c      	movs	r3, #12
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	e7ee      	b.n	80038ac <__sfp+0x60>
 80038ce:	bf00      	nop
 80038d0:	080050e4 	.word	0x080050e4
 80038d4:	ffff0001 	.word	0xffff0001

080038d8 <_fwalk_reent>:
 80038d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038dc:	4606      	mov	r6, r0
 80038de:	4688      	mov	r8, r1
 80038e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038e4:	2700      	movs	r7, #0
 80038e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038ea:	f1b9 0901 	subs.w	r9, r9, #1
 80038ee:	d505      	bpl.n	80038fc <_fwalk_reent+0x24>
 80038f0:	6824      	ldr	r4, [r4, #0]
 80038f2:	2c00      	cmp	r4, #0
 80038f4:	d1f7      	bne.n	80038e6 <_fwalk_reent+0xe>
 80038f6:	4638      	mov	r0, r7
 80038f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fc:	89ab      	ldrh	r3, [r5, #12]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d907      	bls.n	8003912 <_fwalk_reent+0x3a>
 8003902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003906:	3301      	adds	r3, #1
 8003908:	d003      	beq.n	8003912 <_fwalk_reent+0x3a>
 800390a:	4629      	mov	r1, r5
 800390c:	4630      	mov	r0, r6
 800390e:	47c0      	blx	r8
 8003910:	4307      	orrs	r7, r0
 8003912:	3568      	adds	r5, #104	; 0x68
 8003914:	e7e9      	b.n	80038ea <_fwalk_reent+0x12>
	...

08003918 <_localeconv_r>:
 8003918:	4800      	ldr	r0, [pc, #0]	; (800391c <_localeconv_r+0x4>)
 800391a:	4770      	bx	lr
 800391c:	20000274 	.word	0x20000274

08003920 <__retarget_lock_init_recursive>:
 8003920:	4770      	bx	lr

08003922 <__retarget_lock_acquire_recursive>:
 8003922:	4770      	bx	lr

08003924 <__retarget_lock_release_recursive>:
 8003924:	4770      	bx	lr
	...

08003928 <malloc>:
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <malloc+0xc>)
 800392a:	4601      	mov	r1, r0
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	f000 bc17 	b.w	8004160 <_malloc_r>
 8003932:	bf00      	nop
 8003934:	20000120 	.word	0x20000120

08003938 <memcpy>:
 8003938:	440a      	add	r2, r1
 800393a:	4291      	cmp	r1, r2
 800393c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003940:	d100      	bne.n	8003944 <memcpy+0xc>
 8003942:	4770      	bx	lr
 8003944:	b510      	push	{r4, lr}
 8003946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800394a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800394e:	4291      	cmp	r1, r2
 8003950:	d1f9      	bne.n	8003946 <memcpy+0xe>
 8003952:	bd10      	pop	{r4, pc}

08003954 <_Balloc>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
 800395c:	b976      	cbnz	r6, 800397c <_Balloc+0x28>
 800395e:	2010      	movs	r0, #16
 8003960:	f7ff ffe2 	bl	8003928 <malloc>
 8003964:	4602      	mov	r2, r0
 8003966:	6260      	str	r0, [r4, #36]	; 0x24
 8003968:	b920      	cbnz	r0, 8003974 <_Balloc+0x20>
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <_Balloc+0x78>)
 800396c:	4818      	ldr	r0, [pc, #96]	; (80039d0 <_Balloc+0x7c>)
 800396e:	2166      	movs	r1, #102	; 0x66
 8003970:	f001 f846 	bl	8004a00 <__assert_func>
 8003974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003978:	6006      	str	r6, [r0, #0]
 800397a:	60c6      	str	r6, [r0, #12]
 800397c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800397e:	68f3      	ldr	r3, [r6, #12]
 8003980:	b183      	cbz	r3, 80039a4 <_Balloc+0x50>
 8003982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800398a:	b9b8      	cbnz	r0, 80039bc <_Balloc+0x68>
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f605 	lsl.w	r6, r1, r5
 8003992:	1d72      	adds	r2, r6, #5
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	4620      	mov	r0, r4
 8003998:	f000 fb60 	bl	800405c <_calloc_r>
 800399c:	b160      	cbz	r0, 80039b8 <_Balloc+0x64>
 800399e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80039a2:	e00e      	b.n	80039c2 <_Balloc+0x6e>
 80039a4:	2221      	movs	r2, #33	; 0x21
 80039a6:	2104      	movs	r1, #4
 80039a8:	4620      	mov	r0, r4
 80039aa:	f000 fb57 	bl	800405c <_calloc_r>
 80039ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039b0:	60f0      	str	r0, [r6, #12]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e4      	bne.n	8003982 <_Balloc+0x2e>
 80039b8:	2000      	movs	r0, #0
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
 80039bc:	6802      	ldr	r2, [r0, #0]
 80039be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80039c2:	2300      	movs	r3, #0
 80039c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80039c8:	e7f7      	b.n	80039ba <_Balloc+0x66>
 80039ca:	bf00      	nop
 80039cc:	08005129 	.word	0x08005129
 80039d0:	0800520c 	.word	0x0800520c

080039d4 <_Bfree>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80039d8:	4605      	mov	r5, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	b976      	cbnz	r6, 80039fc <_Bfree+0x28>
 80039de:	2010      	movs	r0, #16
 80039e0:	f7ff ffa2 	bl	8003928 <malloc>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6268      	str	r0, [r5, #36]	; 0x24
 80039e8:	b920      	cbnz	r0, 80039f4 <_Bfree+0x20>
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <_Bfree+0x3c>)
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <_Bfree+0x40>)
 80039ee:	218a      	movs	r1, #138	; 0x8a
 80039f0:	f001 f806 	bl	8004a00 <__assert_func>
 80039f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039f8:	6006      	str	r6, [r0, #0]
 80039fa:	60c6      	str	r6, [r0, #12]
 80039fc:	b13c      	cbz	r4, 8003a0e <_Bfree+0x3a>
 80039fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a00:	6862      	ldr	r2, [r4, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a08:	6021      	str	r1, [r4, #0]
 8003a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	08005129 	.word	0x08005129
 8003a14:	0800520c 	.word	0x0800520c

08003a18 <__multadd>:
 8003a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1c:	690d      	ldr	r5, [r1, #16]
 8003a1e:	4607      	mov	r7, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	461e      	mov	r6, r3
 8003a24:	f101 0c14 	add.w	ip, r1, #20
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8003a2e:	b299      	uxth	r1, r3
 8003a30:	fb02 6101 	mla	r1, r2, r1, r6
 8003a34:	0c1e      	lsrs	r6, r3, #16
 8003a36:	0c0b      	lsrs	r3, r1, #16
 8003a38:	fb02 3306 	mla	r3, r2, r6, r3
 8003a3c:	b289      	uxth	r1, r1
 8003a3e:	3001      	adds	r0, #1
 8003a40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003a44:	4285      	cmp	r5, r0
 8003a46:	f84c 1b04 	str.w	r1, [ip], #4
 8003a4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003a4e:	dcec      	bgt.n	8003a2a <__multadd+0x12>
 8003a50:	b30e      	cbz	r6, 8003a96 <__multadd+0x7e>
 8003a52:	68a3      	ldr	r3, [r4, #8]
 8003a54:	42ab      	cmp	r3, r5
 8003a56:	dc19      	bgt.n	8003a8c <__multadd+0x74>
 8003a58:	6861      	ldr	r1, [r4, #4]
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	3101      	adds	r1, #1
 8003a5e:	f7ff ff79 	bl	8003954 <_Balloc>
 8003a62:	4680      	mov	r8, r0
 8003a64:	b928      	cbnz	r0, 8003a72 <__multadd+0x5a>
 8003a66:	4602      	mov	r2, r0
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <__multadd+0x84>)
 8003a6a:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <__multadd+0x88>)
 8003a6c:	21b5      	movs	r1, #181	; 0xb5
 8003a6e:	f000 ffc7 	bl	8004a00 <__assert_func>
 8003a72:	6922      	ldr	r2, [r4, #16]
 8003a74:	3202      	adds	r2, #2
 8003a76:	f104 010c 	add.w	r1, r4, #12
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	300c      	adds	r0, #12
 8003a7e:	f7ff ff5b 	bl	8003938 <memcpy>
 8003a82:	4621      	mov	r1, r4
 8003a84:	4638      	mov	r0, r7
 8003a86:	f7ff ffa5 	bl	80039d4 <_Bfree>
 8003a8a:	4644      	mov	r4, r8
 8003a8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a90:	3501      	adds	r5, #1
 8003a92:	615e      	str	r6, [r3, #20]
 8003a94:	6125      	str	r5, [r4, #16]
 8003a96:	4620      	mov	r0, r4
 8003a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9c:	0800519b 	.word	0x0800519b
 8003aa0:	0800520c 	.word	0x0800520c

08003aa4 <__hi0bits>:
 8003aa4:	0c03      	lsrs	r3, r0, #16
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	b9d3      	cbnz	r3, 8003ae0 <__hi0bits+0x3c>
 8003aaa:	0400      	lsls	r0, r0, #16
 8003aac:	2310      	movs	r3, #16
 8003aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003ab2:	bf04      	itt	eq
 8003ab4:	0200      	lsleq	r0, r0, #8
 8003ab6:	3308      	addeq	r3, #8
 8003ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003abc:	bf04      	itt	eq
 8003abe:	0100      	lsleq	r0, r0, #4
 8003ac0:	3304      	addeq	r3, #4
 8003ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003ac6:	bf04      	itt	eq
 8003ac8:	0080      	lsleq	r0, r0, #2
 8003aca:	3302      	addeq	r3, #2
 8003acc:	2800      	cmp	r0, #0
 8003ace:	db05      	blt.n	8003adc <__hi0bits+0x38>
 8003ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003ad4:	f103 0301 	add.w	r3, r3, #1
 8003ad8:	bf08      	it	eq
 8003ada:	2320      	moveq	r3, #32
 8003adc:	4618      	mov	r0, r3
 8003ade:	4770      	bx	lr
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e7e4      	b.n	8003aae <__hi0bits+0xa>

08003ae4 <__lo0bits>:
 8003ae4:	6803      	ldr	r3, [r0, #0]
 8003ae6:	f013 0207 	ands.w	r2, r3, #7
 8003aea:	4601      	mov	r1, r0
 8003aec:	d00b      	beq.n	8003b06 <__lo0bits+0x22>
 8003aee:	07da      	lsls	r2, r3, #31
 8003af0:	d423      	bmi.n	8003b3a <__lo0bits+0x56>
 8003af2:	0798      	lsls	r0, r3, #30
 8003af4:	bf49      	itett	mi
 8003af6:	085b      	lsrmi	r3, r3, #1
 8003af8:	089b      	lsrpl	r3, r3, #2
 8003afa:	2001      	movmi	r0, #1
 8003afc:	600b      	strmi	r3, [r1, #0]
 8003afe:	bf5c      	itt	pl
 8003b00:	600b      	strpl	r3, [r1, #0]
 8003b02:	2002      	movpl	r0, #2
 8003b04:	4770      	bx	lr
 8003b06:	b298      	uxth	r0, r3
 8003b08:	b9a8      	cbnz	r0, 8003b36 <__lo0bits+0x52>
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	b90a      	cbnz	r2, 8003b16 <__lo0bits+0x32>
 8003b12:	3008      	adds	r0, #8
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	071a      	lsls	r2, r3, #28
 8003b18:	bf04      	itt	eq
 8003b1a:	091b      	lsreq	r3, r3, #4
 8003b1c:	3004      	addeq	r0, #4
 8003b1e:	079a      	lsls	r2, r3, #30
 8003b20:	bf04      	itt	eq
 8003b22:	089b      	lsreq	r3, r3, #2
 8003b24:	3002      	addeq	r0, #2
 8003b26:	07da      	lsls	r2, r3, #31
 8003b28:	d403      	bmi.n	8003b32 <__lo0bits+0x4e>
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	f100 0001 	add.w	r0, r0, #1
 8003b30:	d005      	beq.n	8003b3e <__lo0bits+0x5a>
 8003b32:	600b      	str	r3, [r1, #0]
 8003b34:	4770      	bx	lr
 8003b36:	4610      	mov	r0, r2
 8003b38:	e7e9      	b.n	8003b0e <__lo0bits+0x2a>
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	4770      	bx	lr
 8003b3e:	2020      	movs	r0, #32
 8003b40:	4770      	bx	lr
	...

08003b44 <__i2b>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	460c      	mov	r4, r1
 8003b48:	2101      	movs	r1, #1
 8003b4a:	f7ff ff03 	bl	8003954 <_Balloc>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	b928      	cbnz	r0, 8003b5e <__i2b+0x1a>
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <__i2b+0x24>)
 8003b54:	4805      	ldr	r0, [pc, #20]	; (8003b6c <__i2b+0x28>)
 8003b56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b5a:	f000 ff51 	bl	8004a00 <__assert_func>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	6144      	str	r4, [r0, #20]
 8003b62:	6103      	str	r3, [r0, #16]
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	bf00      	nop
 8003b68:	0800519b 	.word	0x0800519b
 8003b6c:	0800520c 	.word	0x0800520c

08003b70 <__multiply>:
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b74:	4691      	mov	r9, r2
 8003b76:	690a      	ldr	r2, [r1, #16]
 8003b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	bfb8      	it	lt
 8003b80:	460b      	movlt	r3, r1
 8003b82:	460c      	mov	r4, r1
 8003b84:	bfbc      	itt	lt
 8003b86:	464c      	movlt	r4, r9
 8003b88:	4699      	movlt	r9, r3
 8003b8a:	6927      	ldr	r7, [r4, #16]
 8003b8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003b90:	68a3      	ldr	r3, [r4, #8]
 8003b92:	6861      	ldr	r1, [r4, #4]
 8003b94:	eb07 060a 	add.w	r6, r7, sl
 8003b98:	42b3      	cmp	r3, r6
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	bfb8      	it	lt
 8003b9e:	3101      	addlt	r1, #1
 8003ba0:	f7ff fed8 	bl	8003954 <_Balloc>
 8003ba4:	b930      	cbnz	r0, 8003bb4 <__multiply+0x44>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b44      	ldr	r3, [pc, #272]	; (8003cbc <__multiply+0x14c>)
 8003baa:	4845      	ldr	r0, [pc, #276]	; (8003cc0 <__multiply+0x150>)
 8003bac:	f240 115d 	movw	r1, #349	; 0x15d
 8003bb0:	f000 ff26 	bl	8004a00 <__assert_func>
 8003bb4:	f100 0514 	add.w	r5, r0, #20
 8003bb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4543      	cmp	r3, r8
 8003bc2:	d321      	bcc.n	8003c08 <__multiply+0x98>
 8003bc4:	f104 0314 	add.w	r3, r4, #20
 8003bc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003bcc:	f109 0314 	add.w	r3, r9, #20
 8003bd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003bd4:	9202      	str	r2, [sp, #8]
 8003bd6:	1b3a      	subs	r2, r7, r4
 8003bd8:	3a15      	subs	r2, #21
 8003bda:	f022 0203 	bic.w	r2, r2, #3
 8003bde:	3204      	adds	r2, #4
 8003be0:	f104 0115 	add.w	r1, r4, #21
 8003be4:	428f      	cmp	r7, r1
 8003be6:	bf38      	it	cc
 8003be8:	2204      	movcc	r2, #4
 8003bea:	9201      	str	r2, [sp, #4]
 8003bec:	9a02      	ldr	r2, [sp, #8]
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d80c      	bhi.n	8003c0e <__multiply+0x9e>
 8003bf4:	2e00      	cmp	r6, #0
 8003bf6:	dd03      	ble.n	8003c00 <__multiply+0x90>
 8003bf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05a      	beq.n	8003cb6 <__multiply+0x146>
 8003c00:	6106      	str	r6, [r0, #16]
 8003c02:	b005      	add	sp, #20
 8003c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c08:	f843 2b04 	str.w	r2, [r3], #4
 8003c0c:	e7d8      	b.n	8003bc0 <__multiply+0x50>
 8003c0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8003c12:	f1ba 0f00 	cmp.w	sl, #0
 8003c16:	d024      	beq.n	8003c62 <__multiply+0xf2>
 8003c18:	f104 0e14 	add.w	lr, r4, #20
 8003c1c:	46a9      	mov	r9, r5
 8003c1e:	f04f 0c00 	mov.w	ip, #0
 8003c22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003c26:	f8d9 1000 	ldr.w	r1, [r9]
 8003c2a:	fa1f fb82 	uxth.w	fp, r2
 8003c2e:	b289      	uxth	r1, r1
 8003c30:	fb0a 110b 	mla	r1, sl, fp, r1
 8003c34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003c38:	f8d9 2000 	ldr.w	r2, [r9]
 8003c3c:	4461      	add	r1, ip
 8003c3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c42:	fb0a c20b 	mla	r2, sl, fp, ip
 8003c46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c4a:	b289      	uxth	r1, r1
 8003c4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c50:	4577      	cmp	r7, lr
 8003c52:	f849 1b04 	str.w	r1, [r9], #4
 8003c56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c5a:	d8e2      	bhi.n	8003c22 <__multiply+0xb2>
 8003c5c:	9a01      	ldr	r2, [sp, #4]
 8003c5e:	f845 c002 	str.w	ip, [r5, r2]
 8003c62:	9a03      	ldr	r2, [sp, #12]
 8003c64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	f1b9 0f00 	cmp.w	r9, #0
 8003c6e:	d020      	beq.n	8003cb2 <__multiply+0x142>
 8003c70:	6829      	ldr	r1, [r5, #0]
 8003c72:	f104 0c14 	add.w	ip, r4, #20
 8003c76:	46ae      	mov	lr, r5
 8003c78:	f04f 0a00 	mov.w	sl, #0
 8003c7c:	f8bc b000 	ldrh.w	fp, [ip]
 8003c80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003c84:	fb09 220b 	mla	r2, r9, fp, r2
 8003c88:	4492      	add	sl, r2
 8003c8a:	b289      	uxth	r1, r1
 8003c8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003c90:	f84e 1b04 	str.w	r1, [lr], #4
 8003c94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003c98:	f8be 1000 	ldrh.w	r1, [lr]
 8003c9c:	0c12      	lsrs	r2, r2, #16
 8003c9e:	fb09 1102 	mla	r1, r9, r2, r1
 8003ca2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003ca6:	4567      	cmp	r7, ip
 8003ca8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003cac:	d8e6      	bhi.n	8003c7c <__multiply+0x10c>
 8003cae:	9a01      	ldr	r2, [sp, #4]
 8003cb0:	50a9      	str	r1, [r5, r2]
 8003cb2:	3504      	adds	r5, #4
 8003cb4:	e79a      	b.n	8003bec <__multiply+0x7c>
 8003cb6:	3e01      	subs	r6, #1
 8003cb8:	e79c      	b.n	8003bf4 <__multiply+0x84>
 8003cba:	bf00      	nop
 8003cbc:	0800519b 	.word	0x0800519b
 8003cc0:	0800520c 	.word	0x0800520c

08003cc4 <__pow5mult>:
 8003cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc8:	4615      	mov	r5, r2
 8003cca:	f012 0203 	ands.w	r2, r2, #3
 8003cce:	4606      	mov	r6, r0
 8003cd0:	460f      	mov	r7, r1
 8003cd2:	d007      	beq.n	8003ce4 <__pow5mult+0x20>
 8003cd4:	4c25      	ldr	r4, [pc, #148]	; (8003d6c <__pow5mult+0xa8>)
 8003cd6:	3a01      	subs	r2, #1
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003cde:	f7ff fe9b 	bl	8003a18 <__multadd>
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	10ad      	asrs	r5, r5, #2
 8003ce6:	d03d      	beq.n	8003d64 <__pow5mult+0xa0>
 8003ce8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003cea:	b97c      	cbnz	r4, 8003d0c <__pow5mult+0x48>
 8003cec:	2010      	movs	r0, #16
 8003cee:	f7ff fe1b 	bl	8003928 <malloc>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6270      	str	r0, [r6, #36]	; 0x24
 8003cf6:	b928      	cbnz	r0, 8003d04 <__pow5mult+0x40>
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <__pow5mult+0xac>)
 8003cfa:	481e      	ldr	r0, [pc, #120]	; (8003d74 <__pow5mult+0xb0>)
 8003cfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003d00:	f000 fe7e 	bl	8004a00 <__assert_func>
 8003d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003d08:	6004      	str	r4, [r0, #0]
 8003d0a:	60c4      	str	r4, [r0, #12]
 8003d0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003d14:	b94c      	cbnz	r4, 8003d2a <__pow5mult+0x66>
 8003d16:	f240 2171 	movw	r1, #625	; 0x271
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f7ff ff12 	bl	8003b44 <__i2b>
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d26:	4604      	mov	r4, r0
 8003d28:	6003      	str	r3, [r0, #0]
 8003d2a:	f04f 0900 	mov.w	r9, #0
 8003d2e:	07eb      	lsls	r3, r5, #31
 8003d30:	d50a      	bpl.n	8003d48 <__pow5mult+0x84>
 8003d32:	4639      	mov	r1, r7
 8003d34:	4622      	mov	r2, r4
 8003d36:	4630      	mov	r0, r6
 8003d38:	f7ff ff1a 	bl	8003b70 <__multiply>
 8003d3c:	4639      	mov	r1, r7
 8003d3e:	4680      	mov	r8, r0
 8003d40:	4630      	mov	r0, r6
 8003d42:	f7ff fe47 	bl	80039d4 <_Bfree>
 8003d46:	4647      	mov	r7, r8
 8003d48:	106d      	asrs	r5, r5, #1
 8003d4a:	d00b      	beq.n	8003d64 <__pow5mult+0xa0>
 8003d4c:	6820      	ldr	r0, [r4, #0]
 8003d4e:	b938      	cbnz	r0, 8003d60 <__pow5mult+0x9c>
 8003d50:	4622      	mov	r2, r4
 8003d52:	4621      	mov	r1, r4
 8003d54:	4630      	mov	r0, r6
 8003d56:	f7ff ff0b 	bl	8003b70 <__multiply>
 8003d5a:	6020      	str	r0, [r4, #0]
 8003d5c:	f8c0 9000 	str.w	r9, [r0]
 8003d60:	4604      	mov	r4, r0
 8003d62:	e7e4      	b.n	8003d2e <__pow5mult+0x6a>
 8003d64:	4638      	mov	r0, r7
 8003d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08005358 	.word	0x08005358
 8003d70:	08005129 	.word	0x08005129
 8003d74:	0800520c 	.word	0x0800520c

08003d78 <__lshift>:
 8003d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	6849      	ldr	r1, [r1, #4]
 8003d80:	6923      	ldr	r3, [r4, #16]
 8003d82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d86:	68a3      	ldr	r3, [r4, #8]
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4691      	mov	r9, r2
 8003d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d90:	f108 0601 	add.w	r6, r8, #1
 8003d94:	42b3      	cmp	r3, r6
 8003d96:	db0b      	blt.n	8003db0 <__lshift+0x38>
 8003d98:	4638      	mov	r0, r7
 8003d9a:	f7ff fddb 	bl	8003954 <_Balloc>
 8003d9e:	4605      	mov	r5, r0
 8003da0:	b948      	cbnz	r0, 8003db6 <__lshift+0x3e>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <__lshift+0xd8>)
 8003da6:	482b      	ldr	r0, [pc, #172]	; (8003e54 <__lshift+0xdc>)
 8003da8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003dac:	f000 fe28 	bl	8004a00 <__assert_func>
 8003db0:	3101      	adds	r1, #1
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	e7ee      	b.n	8003d94 <__lshift+0x1c>
 8003db6:	2300      	movs	r3, #0
 8003db8:	f100 0114 	add.w	r1, r0, #20
 8003dbc:	f100 0210 	add.w	r2, r0, #16
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	4553      	cmp	r3, sl
 8003dc4:	db37      	blt.n	8003e36 <__lshift+0xbe>
 8003dc6:	6920      	ldr	r0, [r4, #16]
 8003dc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003dcc:	f104 0314 	add.w	r3, r4, #20
 8003dd0:	f019 091f 	ands.w	r9, r9, #31
 8003dd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003dd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003ddc:	d02f      	beq.n	8003e3e <__lshift+0xc6>
 8003dde:	f1c9 0e20 	rsb	lr, r9, #32
 8003de2:	468a      	mov	sl, r1
 8003de4:	f04f 0c00 	mov.w	ip, #0
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	fa02 f209 	lsl.w	r2, r2, r9
 8003dee:	ea42 020c 	orr.w	r2, r2, ip
 8003df2:	f84a 2b04 	str.w	r2, [sl], #4
 8003df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dfa:	4298      	cmp	r0, r3
 8003dfc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003e00:	d8f2      	bhi.n	8003de8 <__lshift+0x70>
 8003e02:	1b03      	subs	r3, r0, r4
 8003e04:	3b15      	subs	r3, #21
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	f104 0215 	add.w	r2, r4, #21
 8003e10:	4290      	cmp	r0, r2
 8003e12:	bf38      	it	cc
 8003e14:	2304      	movcc	r3, #4
 8003e16:	f841 c003 	str.w	ip, [r1, r3]
 8003e1a:	f1bc 0f00 	cmp.w	ip, #0
 8003e1e:	d001      	beq.n	8003e24 <__lshift+0xac>
 8003e20:	f108 0602 	add.w	r6, r8, #2
 8003e24:	3e01      	subs	r6, #1
 8003e26:	4638      	mov	r0, r7
 8003e28:	612e      	str	r6, [r5, #16]
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	f7ff fdd2 	bl	80039d4 <_Bfree>
 8003e30:	4628      	mov	r0, r5
 8003e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e36:	f842 0f04 	str.w	r0, [r2, #4]!
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	e7c1      	b.n	8003dc2 <__lshift+0x4a>
 8003e3e:	3904      	subs	r1, #4
 8003e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e48:	4298      	cmp	r0, r3
 8003e4a:	d8f9      	bhi.n	8003e40 <__lshift+0xc8>
 8003e4c:	e7ea      	b.n	8003e24 <__lshift+0xac>
 8003e4e:	bf00      	nop
 8003e50:	0800519b 	.word	0x0800519b
 8003e54:	0800520c 	.word	0x0800520c

08003e58 <__mcmp>:
 8003e58:	b530      	push	{r4, r5, lr}
 8003e5a:	6902      	ldr	r2, [r0, #16]
 8003e5c:	690c      	ldr	r4, [r1, #16]
 8003e5e:	1b12      	subs	r2, r2, r4
 8003e60:	d10e      	bne.n	8003e80 <__mcmp+0x28>
 8003e62:	f100 0314 	add.w	r3, r0, #20
 8003e66:	3114      	adds	r1, #20
 8003e68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003e6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003e70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003e74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003e78:	42a5      	cmp	r5, r4
 8003e7a:	d003      	beq.n	8003e84 <__mcmp+0x2c>
 8003e7c:	d305      	bcc.n	8003e8a <__mcmp+0x32>
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4610      	mov	r0, r2
 8003e82:	bd30      	pop	{r4, r5, pc}
 8003e84:	4283      	cmp	r3, r0
 8003e86:	d3f3      	bcc.n	8003e70 <__mcmp+0x18>
 8003e88:	e7fa      	b.n	8003e80 <__mcmp+0x28>
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	e7f7      	b.n	8003e80 <__mcmp+0x28>

08003e90 <__mdiff>:
 8003e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	460c      	mov	r4, r1
 8003e96:	4606      	mov	r6, r0
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	4690      	mov	r8, r2
 8003e9e:	f7ff ffdb 	bl	8003e58 <__mcmp>
 8003ea2:	1e05      	subs	r5, r0, #0
 8003ea4:	d110      	bne.n	8003ec8 <__mdiff+0x38>
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f7ff fd53 	bl	8003954 <_Balloc>
 8003eae:	b930      	cbnz	r0, 8003ebe <__mdiff+0x2e>
 8003eb0:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <__mdiff+0x10c>)
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f240 2132 	movw	r1, #562	; 0x232
 8003eb8:	4839      	ldr	r0, [pc, #228]	; (8003fa0 <__mdiff+0x110>)
 8003eba:	f000 fda1 	bl	8004a00 <__assert_func>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec8:	bfa4      	itt	ge
 8003eca:	4643      	movge	r3, r8
 8003ecc:	46a0      	movge	r8, r4
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ed4:	bfa6      	itte	ge
 8003ed6:	461c      	movge	r4, r3
 8003ed8:	2500      	movge	r5, #0
 8003eda:	2501      	movlt	r5, #1
 8003edc:	f7ff fd3a 	bl	8003954 <_Balloc>
 8003ee0:	b920      	cbnz	r0, 8003eec <__mdiff+0x5c>
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <__mdiff+0x10c>)
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003eea:	e7e5      	b.n	8003eb8 <__mdiff+0x28>
 8003eec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003ef0:	6926      	ldr	r6, [r4, #16]
 8003ef2:	60c5      	str	r5, [r0, #12]
 8003ef4:	f104 0914 	add.w	r9, r4, #20
 8003ef8:	f108 0514 	add.w	r5, r8, #20
 8003efc:	f100 0e14 	add.w	lr, r0, #20
 8003f00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003f04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003f08:	f108 0210 	add.w	r2, r8, #16
 8003f0c:	46f2      	mov	sl, lr
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f859 3b04 	ldr.w	r3, [r9], #4
 8003f14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003f18:	fa1f f883 	uxth.w	r8, r3
 8003f1c:	fa11 f18b 	uxtah	r1, r1, fp
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	eba1 0808 	sub.w	r8, r1, r8
 8003f26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003f2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003f2e:	fa1f f888 	uxth.w	r8, r8
 8003f32:	1419      	asrs	r1, r3, #16
 8003f34:	454e      	cmp	r6, r9
 8003f36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003f3a:	f84a 3b04 	str.w	r3, [sl], #4
 8003f3e:	d8e7      	bhi.n	8003f10 <__mdiff+0x80>
 8003f40:	1b33      	subs	r3, r6, r4
 8003f42:	3b15      	subs	r3, #21
 8003f44:	f023 0303 	bic.w	r3, r3, #3
 8003f48:	3304      	adds	r3, #4
 8003f4a:	3415      	adds	r4, #21
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	bf38      	it	cc
 8003f50:	2304      	movcc	r3, #4
 8003f52:	441d      	add	r5, r3
 8003f54:	4473      	add	r3, lr
 8003f56:	469e      	mov	lr, r3
 8003f58:	462e      	mov	r6, r5
 8003f5a:	4566      	cmp	r6, ip
 8003f5c:	d30e      	bcc.n	8003f7c <__mdiff+0xec>
 8003f5e:	f10c 0203 	add.w	r2, ip, #3
 8003f62:	1b52      	subs	r2, r2, r5
 8003f64:	f022 0203 	bic.w	r2, r2, #3
 8003f68:	3d03      	subs	r5, #3
 8003f6a:	45ac      	cmp	ip, r5
 8003f6c:	bf38      	it	cc
 8003f6e:	2200      	movcc	r2, #0
 8003f70:	441a      	add	r2, r3
 8003f72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003f76:	b17b      	cbz	r3, 8003f98 <__mdiff+0x108>
 8003f78:	6107      	str	r7, [r0, #16]
 8003f7a:	e7a3      	b.n	8003ec4 <__mdiff+0x34>
 8003f7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8003f80:	fa11 f288 	uxtah	r2, r1, r8
 8003f84:	1414      	asrs	r4, r2, #16
 8003f86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003f8a:	b292      	uxth	r2, r2
 8003f8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003f90:	f84e 2b04 	str.w	r2, [lr], #4
 8003f94:	1421      	asrs	r1, r4, #16
 8003f96:	e7e0      	b.n	8003f5a <__mdiff+0xca>
 8003f98:	3f01      	subs	r7, #1
 8003f9a:	e7ea      	b.n	8003f72 <__mdiff+0xe2>
 8003f9c:	0800519b 	.word	0x0800519b
 8003fa0:	0800520c 	.word	0x0800520c

08003fa4 <__d2b>:
 8003fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fa8:	4689      	mov	r9, r1
 8003faa:	2101      	movs	r1, #1
 8003fac:	ec57 6b10 	vmov	r6, r7, d0
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	f7ff fccf 	bl	8003954 <_Balloc>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	b930      	cbnz	r0, 8003fc8 <__d2b+0x24>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <__d2b+0xb0>)
 8003fbe:	4826      	ldr	r0, [pc, #152]	; (8004058 <__d2b+0xb4>)
 8003fc0:	f240 310a 	movw	r1, #778	; 0x30a
 8003fc4:	f000 fd1c 	bl	8004a00 <__assert_func>
 8003fc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003fcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003fd0:	bb35      	cbnz	r5, 8004020 <__d2b+0x7c>
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	d028      	beq.n	800402a <__d2b+0x86>
 8003fd8:	4668      	mov	r0, sp
 8003fda:	9600      	str	r6, [sp, #0]
 8003fdc:	f7ff fd82 	bl	8003ae4 <__lo0bits>
 8003fe0:	9900      	ldr	r1, [sp, #0]
 8003fe2:	b300      	cbz	r0, 8004026 <__d2b+0x82>
 8003fe4:	9a01      	ldr	r2, [sp, #4]
 8003fe6:	f1c0 0320 	rsb	r3, r0, #32
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	40c2      	lsrs	r2, r0
 8003ff2:	6163      	str	r3, [r4, #20]
 8003ff4:	9201      	str	r2, [sp, #4]
 8003ff6:	9b01      	ldr	r3, [sp, #4]
 8003ff8:	61a3      	str	r3, [r4, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2202      	movne	r2, #2
 8004000:	2201      	moveq	r2, #1
 8004002:	6122      	str	r2, [r4, #16]
 8004004:	b1d5      	cbz	r5, 800403c <__d2b+0x98>
 8004006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800400a:	4405      	add	r5, r0
 800400c:	f8c9 5000 	str.w	r5, [r9]
 8004010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004014:	f8c8 0000 	str.w	r0, [r8]
 8004018:	4620      	mov	r0, r4
 800401a:	b003      	add	sp, #12
 800401c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004024:	e7d5      	b.n	8003fd2 <__d2b+0x2e>
 8004026:	6161      	str	r1, [r4, #20]
 8004028:	e7e5      	b.n	8003ff6 <__d2b+0x52>
 800402a:	a801      	add	r0, sp, #4
 800402c:	f7ff fd5a 	bl	8003ae4 <__lo0bits>
 8004030:	9b01      	ldr	r3, [sp, #4]
 8004032:	6163      	str	r3, [r4, #20]
 8004034:	2201      	movs	r2, #1
 8004036:	6122      	str	r2, [r4, #16]
 8004038:	3020      	adds	r0, #32
 800403a:	e7e3      	b.n	8004004 <__d2b+0x60>
 800403c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004044:	f8c9 0000 	str.w	r0, [r9]
 8004048:	6918      	ldr	r0, [r3, #16]
 800404a:	f7ff fd2b 	bl	8003aa4 <__hi0bits>
 800404e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004052:	e7df      	b.n	8004014 <__d2b+0x70>
 8004054:	0800519b 	.word	0x0800519b
 8004058:	0800520c 	.word	0x0800520c

0800405c <_calloc_r>:
 800405c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800405e:	fba1 2402 	umull	r2, r4, r1, r2
 8004062:	b94c      	cbnz	r4, 8004078 <_calloc_r+0x1c>
 8004064:	4611      	mov	r1, r2
 8004066:	9201      	str	r2, [sp, #4]
 8004068:	f000 f87a 	bl	8004160 <_malloc_r>
 800406c:	9a01      	ldr	r2, [sp, #4]
 800406e:	4605      	mov	r5, r0
 8004070:	b930      	cbnz	r0, 8004080 <_calloc_r+0x24>
 8004072:	4628      	mov	r0, r5
 8004074:	b003      	add	sp, #12
 8004076:	bd30      	pop	{r4, r5, pc}
 8004078:	220c      	movs	r2, #12
 800407a:	6002      	str	r2, [r0, #0]
 800407c:	2500      	movs	r5, #0
 800407e:	e7f8      	b.n	8004072 <_calloc_r+0x16>
 8004080:	4621      	mov	r1, r4
 8004082:	f7fe f80f 	bl	80020a4 <memset>
 8004086:	e7f4      	b.n	8004072 <_calloc_r+0x16>

08004088 <_free_r>:
 8004088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800408a:	2900      	cmp	r1, #0
 800408c:	d044      	beq.n	8004118 <_free_r+0x90>
 800408e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004092:	9001      	str	r0, [sp, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f1a1 0404 	sub.w	r4, r1, #4
 800409a:	bfb8      	it	lt
 800409c:	18e4      	addlt	r4, r4, r3
 800409e:	f000 fe55 	bl	8004d4c <__malloc_lock>
 80040a2:	4a1e      	ldr	r2, [pc, #120]	; (800411c <_free_r+0x94>)
 80040a4:	9801      	ldr	r0, [sp, #4]
 80040a6:	6813      	ldr	r3, [r2, #0]
 80040a8:	b933      	cbnz	r3, 80040b8 <_free_r+0x30>
 80040aa:	6063      	str	r3, [r4, #4]
 80040ac:	6014      	str	r4, [r2, #0]
 80040ae:	b003      	add	sp, #12
 80040b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040b4:	f000 be50 	b.w	8004d58 <__malloc_unlock>
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	d908      	bls.n	80040ce <_free_r+0x46>
 80040bc:	6825      	ldr	r5, [r4, #0]
 80040be:	1961      	adds	r1, r4, r5
 80040c0:	428b      	cmp	r3, r1
 80040c2:	bf01      	itttt	eq
 80040c4:	6819      	ldreq	r1, [r3, #0]
 80040c6:	685b      	ldreq	r3, [r3, #4]
 80040c8:	1949      	addeq	r1, r1, r5
 80040ca:	6021      	streq	r1, [r4, #0]
 80040cc:	e7ed      	b.n	80040aa <_free_r+0x22>
 80040ce:	461a      	mov	r2, r3
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	b10b      	cbz	r3, 80040d8 <_free_r+0x50>
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	d9fa      	bls.n	80040ce <_free_r+0x46>
 80040d8:	6811      	ldr	r1, [r2, #0]
 80040da:	1855      	adds	r5, r2, r1
 80040dc:	42a5      	cmp	r5, r4
 80040de:	d10b      	bne.n	80040f8 <_free_r+0x70>
 80040e0:	6824      	ldr	r4, [r4, #0]
 80040e2:	4421      	add	r1, r4
 80040e4:	1854      	adds	r4, r2, r1
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	6011      	str	r1, [r2, #0]
 80040ea:	d1e0      	bne.n	80040ae <_free_r+0x26>
 80040ec:	681c      	ldr	r4, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	6053      	str	r3, [r2, #4]
 80040f2:	4421      	add	r1, r4
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	e7da      	b.n	80040ae <_free_r+0x26>
 80040f8:	d902      	bls.n	8004100 <_free_r+0x78>
 80040fa:	230c      	movs	r3, #12
 80040fc:	6003      	str	r3, [r0, #0]
 80040fe:	e7d6      	b.n	80040ae <_free_r+0x26>
 8004100:	6825      	ldr	r5, [r4, #0]
 8004102:	1961      	adds	r1, r4, r5
 8004104:	428b      	cmp	r3, r1
 8004106:	bf04      	itt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	6063      	str	r3, [r4, #4]
 800410e:	bf04      	itt	eq
 8004110:	1949      	addeq	r1, r1, r5
 8004112:	6021      	streq	r1, [r4, #0]
 8004114:	6054      	str	r4, [r2, #4]
 8004116:	e7ca      	b.n	80040ae <_free_r+0x26>
 8004118:	b003      	add	sp, #12
 800411a:	bd30      	pop	{r4, r5, pc}
 800411c:	20000838 	.word	0x20000838

08004120 <sbrk_aligned>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4e0e      	ldr	r6, [pc, #56]	; (800415c <sbrk_aligned+0x3c>)
 8004124:	460c      	mov	r4, r1
 8004126:	6831      	ldr	r1, [r6, #0]
 8004128:	4605      	mov	r5, r0
 800412a:	b911      	cbnz	r1, 8004132 <sbrk_aligned+0x12>
 800412c:	f000 fb42 	bl	80047b4 <_sbrk_r>
 8004130:	6030      	str	r0, [r6, #0]
 8004132:	4621      	mov	r1, r4
 8004134:	4628      	mov	r0, r5
 8004136:	f000 fb3d 	bl	80047b4 <_sbrk_r>
 800413a:	1c43      	adds	r3, r0, #1
 800413c:	d00a      	beq.n	8004154 <sbrk_aligned+0x34>
 800413e:	1cc4      	adds	r4, r0, #3
 8004140:	f024 0403 	bic.w	r4, r4, #3
 8004144:	42a0      	cmp	r0, r4
 8004146:	d007      	beq.n	8004158 <sbrk_aligned+0x38>
 8004148:	1a21      	subs	r1, r4, r0
 800414a:	4628      	mov	r0, r5
 800414c:	f000 fb32 	bl	80047b4 <_sbrk_r>
 8004150:	3001      	adds	r0, #1
 8004152:	d101      	bne.n	8004158 <sbrk_aligned+0x38>
 8004154:	f04f 34ff 	mov.w	r4, #4294967295
 8004158:	4620      	mov	r0, r4
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	2000083c 	.word	0x2000083c

08004160 <_malloc_r>:
 8004160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004164:	1ccd      	adds	r5, r1, #3
 8004166:	f025 0503 	bic.w	r5, r5, #3
 800416a:	3508      	adds	r5, #8
 800416c:	2d0c      	cmp	r5, #12
 800416e:	bf38      	it	cc
 8004170:	250c      	movcc	r5, #12
 8004172:	2d00      	cmp	r5, #0
 8004174:	4607      	mov	r7, r0
 8004176:	db01      	blt.n	800417c <_malloc_r+0x1c>
 8004178:	42a9      	cmp	r1, r5
 800417a:	d905      	bls.n	8004188 <_malloc_r+0x28>
 800417c:	230c      	movs	r3, #12
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	2600      	movs	r6, #0
 8004182:	4630      	mov	r0, r6
 8004184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004188:	4e2e      	ldr	r6, [pc, #184]	; (8004244 <_malloc_r+0xe4>)
 800418a:	f000 fddf 	bl	8004d4c <__malloc_lock>
 800418e:	6833      	ldr	r3, [r6, #0]
 8004190:	461c      	mov	r4, r3
 8004192:	bb34      	cbnz	r4, 80041e2 <_malloc_r+0x82>
 8004194:	4629      	mov	r1, r5
 8004196:	4638      	mov	r0, r7
 8004198:	f7ff ffc2 	bl	8004120 <sbrk_aligned>
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	4604      	mov	r4, r0
 80041a0:	d14d      	bne.n	800423e <_malloc_r+0xde>
 80041a2:	6834      	ldr	r4, [r6, #0]
 80041a4:	4626      	mov	r6, r4
 80041a6:	2e00      	cmp	r6, #0
 80041a8:	d140      	bne.n	800422c <_malloc_r+0xcc>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	4631      	mov	r1, r6
 80041ae:	4638      	mov	r0, r7
 80041b0:	eb04 0803 	add.w	r8, r4, r3
 80041b4:	f000 fafe 	bl	80047b4 <_sbrk_r>
 80041b8:	4580      	cmp	r8, r0
 80041ba:	d13a      	bne.n	8004232 <_malloc_r+0xd2>
 80041bc:	6821      	ldr	r1, [r4, #0]
 80041be:	3503      	adds	r5, #3
 80041c0:	1a6d      	subs	r5, r5, r1
 80041c2:	f025 0503 	bic.w	r5, r5, #3
 80041c6:	3508      	adds	r5, #8
 80041c8:	2d0c      	cmp	r5, #12
 80041ca:	bf38      	it	cc
 80041cc:	250c      	movcc	r5, #12
 80041ce:	4629      	mov	r1, r5
 80041d0:	4638      	mov	r0, r7
 80041d2:	f7ff ffa5 	bl	8004120 <sbrk_aligned>
 80041d6:	3001      	adds	r0, #1
 80041d8:	d02b      	beq.n	8004232 <_malloc_r+0xd2>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	442b      	add	r3, r5
 80041de:	6023      	str	r3, [r4, #0]
 80041e0:	e00e      	b.n	8004200 <_malloc_r+0xa0>
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	1b52      	subs	r2, r2, r5
 80041e6:	d41e      	bmi.n	8004226 <_malloc_r+0xc6>
 80041e8:	2a0b      	cmp	r2, #11
 80041ea:	d916      	bls.n	800421a <_malloc_r+0xba>
 80041ec:	1961      	adds	r1, r4, r5
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	6025      	str	r5, [r4, #0]
 80041f2:	bf18      	it	ne
 80041f4:	6059      	strne	r1, [r3, #4]
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	bf08      	it	eq
 80041fa:	6031      	streq	r1, [r6, #0]
 80041fc:	5162      	str	r2, [r4, r5]
 80041fe:	604b      	str	r3, [r1, #4]
 8004200:	4638      	mov	r0, r7
 8004202:	f104 060b 	add.w	r6, r4, #11
 8004206:	f000 fda7 	bl	8004d58 <__malloc_unlock>
 800420a:	f026 0607 	bic.w	r6, r6, #7
 800420e:	1d23      	adds	r3, r4, #4
 8004210:	1af2      	subs	r2, r6, r3
 8004212:	d0b6      	beq.n	8004182 <_malloc_r+0x22>
 8004214:	1b9b      	subs	r3, r3, r6
 8004216:	50a3      	str	r3, [r4, r2]
 8004218:	e7b3      	b.n	8004182 <_malloc_r+0x22>
 800421a:	6862      	ldr	r2, [r4, #4]
 800421c:	42a3      	cmp	r3, r4
 800421e:	bf0c      	ite	eq
 8004220:	6032      	streq	r2, [r6, #0]
 8004222:	605a      	strne	r2, [r3, #4]
 8004224:	e7ec      	b.n	8004200 <_malloc_r+0xa0>
 8004226:	4623      	mov	r3, r4
 8004228:	6864      	ldr	r4, [r4, #4]
 800422a:	e7b2      	b.n	8004192 <_malloc_r+0x32>
 800422c:	4634      	mov	r4, r6
 800422e:	6876      	ldr	r6, [r6, #4]
 8004230:	e7b9      	b.n	80041a6 <_malloc_r+0x46>
 8004232:	230c      	movs	r3, #12
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	4638      	mov	r0, r7
 8004238:	f000 fd8e 	bl	8004d58 <__malloc_unlock>
 800423c:	e7a1      	b.n	8004182 <_malloc_r+0x22>
 800423e:	6025      	str	r5, [r4, #0]
 8004240:	e7de      	b.n	8004200 <_malloc_r+0xa0>
 8004242:	bf00      	nop
 8004244:	20000838 	.word	0x20000838

08004248 <__ssputs_r>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	429e      	cmp	r6, r3
 8004250:	4682      	mov	sl, r0
 8004252:	460c      	mov	r4, r1
 8004254:	4690      	mov	r8, r2
 8004256:	461f      	mov	r7, r3
 8004258:	d838      	bhi.n	80042cc <__ssputs_r+0x84>
 800425a:	898a      	ldrh	r2, [r1, #12]
 800425c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004260:	d032      	beq.n	80042c8 <__ssputs_r+0x80>
 8004262:	6825      	ldr	r5, [r4, #0]
 8004264:	6909      	ldr	r1, [r1, #16]
 8004266:	eba5 0901 	sub.w	r9, r5, r1
 800426a:	6965      	ldr	r5, [r4, #20]
 800426c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004274:	3301      	adds	r3, #1
 8004276:	444b      	add	r3, r9
 8004278:	106d      	asrs	r5, r5, #1
 800427a:	429d      	cmp	r5, r3
 800427c:	bf38      	it	cc
 800427e:	461d      	movcc	r5, r3
 8004280:	0553      	lsls	r3, r2, #21
 8004282:	d531      	bpl.n	80042e8 <__ssputs_r+0xa0>
 8004284:	4629      	mov	r1, r5
 8004286:	f7ff ff6b 	bl	8004160 <_malloc_r>
 800428a:	4606      	mov	r6, r0
 800428c:	b950      	cbnz	r0, 80042a4 <__ssputs_r+0x5c>
 800428e:	230c      	movs	r3, #12
 8004290:	f8ca 3000 	str.w	r3, [sl]
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a4:	6921      	ldr	r1, [r4, #16]
 80042a6:	464a      	mov	r2, r9
 80042a8:	f7ff fb46 	bl	8003938 <memcpy>
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b6:	81a3      	strh	r3, [r4, #12]
 80042b8:	6126      	str	r6, [r4, #16]
 80042ba:	6165      	str	r5, [r4, #20]
 80042bc:	444e      	add	r6, r9
 80042be:	eba5 0509 	sub.w	r5, r5, r9
 80042c2:	6026      	str	r6, [r4, #0]
 80042c4:	60a5      	str	r5, [r4, #8]
 80042c6:	463e      	mov	r6, r7
 80042c8:	42be      	cmp	r6, r7
 80042ca:	d900      	bls.n	80042ce <__ssputs_r+0x86>
 80042cc:	463e      	mov	r6, r7
 80042ce:	6820      	ldr	r0, [r4, #0]
 80042d0:	4632      	mov	r2, r6
 80042d2:	4641      	mov	r1, r8
 80042d4:	f000 fd20 	bl	8004d18 <memmove>
 80042d8:	68a3      	ldr	r3, [r4, #8]
 80042da:	1b9b      	subs	r3, r3, r6
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	4433      	add	r3, r6
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	2000      	movs	r0, #0
 80042e6:	e7db      	b.n	80042a0 <__ssputs_r+0x58>
 80042e8:	462a      	mov	r2, r5
 80042ea:	f000 fd3b 	bl	8004d64 <_realloc_r>
 80042ee:	4606      	mov	r6, r0
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d1e1      	bne.n	80042b8 <__ssputs_r+0x70>
 80042f4:	6921      	ldr	r1, [r4, #16]
 80042f6:	4650      	mov	r0, sl
 80042f8:	f7ff fec6 	bl	8004088 <_free_r>
 80042fc:	e7c7      	b.n	800428e <__ssputs_r+0x46>
	...

08004300 <_svfiprintf_r>:
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4698      	mov	r8, r3
 8004306:	898b      	ldrh	r3, [r1, #12]
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	b09d      	sub	sp, #116	; 0x74
 800430c:	4607      	mov	r7, r0
 800430e:	460d      	mov	r5, r1
 8004310:	4614      	mov	r4, r2
 8004312:	d50e      	bpl.n	8004332 <_svfiprintf_r+0x32>
 8004314:	690b      	ldr	r3, [r1, #16]
 8004316:	b963      	cbnz	r3, 8004332 <_svfiprintf_r+0x32>
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	f7ff ff21 	bl	8004160 <_malloc_r>
 800431e:	6028      	str	r0, [r5, #0]
 8004320:	6128      	str	r0, [r5, #16]
 8004322:	b920      	cbnz	r0, 800432e <_svfiprintf_r+0x2e>
 8004324:	230c      	movs	r3, #12
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	e0d1      	b.n	80044d2 <_svfiprintf_r+0x1d2>
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	616b      	str	r3, [r5, #20]
 8004332:	2300      	movs	r3, #0
 8004334:	9309      	str	r3, [sp, #36]	; 0x24
 8004336:	2320      	movs	r3, #32
 8004338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800433c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004340:	2330      	movs	r3, #48	; 0x30
 8004342:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044ec <_svfiprintf_r+0x1ec>
 8004346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800434a:	f04f 0901 	mov.w	r9, #1
 800434e:	4623      	mov	r3, r4
 8004350:	469a      	mov	sl, r3
 8004352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004356:	b10a      	cbz	r2, 800435c <_svfiprintf_r+0x5c>
 8004358:	2a25      	cmp	r2, #37	; 0x25
 800435a:	d1f9      	bne.n	8004350 <_svfiprintf_r+0x50>
 800435c:	ebba 0b04 	subs.w	fp, sl, r4
 8004360:	d00b      	beq.n	800437a <_svfiprintf_r+0x7a>
 8004362:	465b      	mov	r3, fp
 8004364:	4622      	mov	r2, r4
 8004366:	4629      	mov	r1, r5
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff ff6d 	bl	8004248 <__ssputs_r>
 800436e:	3001      	adds	r0, #1
 8004370:	f000 80aa 	beq.w	80044c8 <_svfiprintf_r+0x1c8>
 8004374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004376:	445a      	add	r2, fp
 8004378:	9209      	str	r2, [sp, #36]	; 0x24
 800437a:	f89a 3000 	ldrb.w	r3, [sl]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a2 	beq.w	80044c8 <_svfiprintf_r+0x1c8>
 8004384:	2300      	movs	r3, #0
 8004386:	f04f 32ff 	mov.w	r2, #4294967295
 800438a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800438e:	f10a 0a01 	add.w	sl, sl, #1
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	9307      	str	r3, [sp, #28]
 8004396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800439a:	931a      	str	r3, [sp, #104]	; 0x68
 800439c:	4654      	mov	r4, sl
 800439e:	2205      	movs	r2, #5
 80043a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a4:	4851      	ldr	r0, [pc, #324]	; (80044ec <_svfiprintf_r+0x1ec>)
 80043a6:	f7fb ff3b 	bl	8000220 <memchr>
 80043aa:	9a04      	ldr	r2, [sp, #16]
 80043ac:	b9d8      	cbnz	r0, 80043e6 <_svfiprintf_r+0xe6>
 80043ae:	06d0      	lsls	r0, r2, #27
 80043b0:	bf44      	itt	mi
 80043b2:	2320      	movmi	r3, #32
 80043b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b8:	0711      	lsls	r1, r2, #28
 80043ba:	bf44      	itt	mi
 80043bc:	232b      	movmi	r3, #43	; 0x2b
 80043be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c2:	f89a 3000 	ldrb.w	r3, [sl]
 80043c6:	2b2a      	cmp	r3, #42	; 0x2a
 80043c8:	d015      	beq.n	80043f6 <_svfiprintf_r+0xf6>
 80043ca:	9a07      	ldr	r2, [sp, #28]
 80043cc:	4654      	mov	r4, sl
 80043ce:	2000      	movs	r0, #0
 80043d0:	f04f 0c0a 	mov.w	ip, #10
 80043d4:	4621      	mov	r1, r4
 80043d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043da:	3b30      	subs	r3, #48	; 0x30
 80043dc:	2b09      	cmp	r3, #9
 80043de:	d94e      	bls.n	800447e <_svfiprintf_r+0x17e>
 80043e0:	b1b0      	cbz	r0, 8004410 <_svfiprintf_r+0x110>
 80043e2:	9207      	str	r2, [sp, #28]
 80043e4:	e014      	b.n	8004410 <_svfiprintf_r+0x110>
 80043e6:	eba0 0308 	sub.w	r3, r0, r8
 80043ea:	fa09 f303 	lsl.w	r3, r9, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	9304      	str	r3, [sp, #16]
 80043f2:	46a2      	mov	sl, r4
 80043f4:	e7d2      	b.n	800439c <_svfiprintf_r+0x9c>
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	1d19      	adds	r1, r3, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	9103      	str	r1, [sp, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bfbb      	ittet	lt
 8004402:	425b      	neglt	r3, r3
 8004404:	f042 0202 	orrlt.w	r2, r2, #2
 8004408:	9307      	strge	r3, [sp, #28]
 800440a:	9307      	strlt	r3, [sp, #28]
 800440c:	bfb8      	it	lt
 800440e:	9204      	strlt	r2, [sp, #16]
 8004410:	7823      	ldrb	r3, [r4, #0]
 8004412:	2b2e      	cmp	r3, #46	; 0x2e
 8004414:	d10c      	bne.n	8004430 <_svfiprintf_r+0x130>
 8004416:	7863      	ldrb	r3, [r4, #1]
 8004418:	2b2a      	cmp	r3, #42	; 0x2a
 800441a:	d135      	bne.n	8004488 <_svfiprintf_r+0x188>
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	9203      	str	r2, [sp, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	bfb8      	it	lt
 8004428:	f04f 33ff 	movlt.w	r3, #4294967295
 800442c:	3402      	adds	r4, #2
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044fc <_svfiprintf_r+0x1fc>
 8004434:	7821      	ldrb	r1, [r4, #0]
 8004436:	2203      	movs	r2, #3
 8004438:	4650      	mov	r0, sl
 800443a:	f7fb fef1 	bl	8000220 <memchr>
 800443e:	b140      	cbz	r0, 8004452 <_svfiprintf_r+0x152>
 8004440:	2340      	movs	r3, #64	; 0x40
 8004442:	eba0 000a 	sub.w	r0, r0, sl
 8004446:	fa03 f000 	lsl.w	r0, r3, r0
 800444a:	9b04      	ldr	r3, [sp, #16]
 800444c:	4303      	orrs	r3, r0
 800444e:	3401      	adds	r4, #1
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004456:	4826      	ldr	r0, [pc, #152]	; (80044f0 <_svfiprintf_r+0x1f0>)
 8004458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800445c:	2206      	movs	r2, #6
 800445e:	f7fb fedf 	bl	8000220 <memchr>
 8004462:	2800      	cmp	r0, #0
 8004464:	d038      	beq.n	80044d8 <_svfiprintf_r+0x1d8>
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <_svfiprintf_r+0x1f4>)
 8004468:	bb1b      	cbnz	r3, 80044b2 <_svfiprintf_r+0x1b2>
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	3307      	adds	r3, #7
 800446e:	f023 0307 	bic.w	r3, r3, #7
 8004472:	3308      	adds	r3, #8
 8004474:	9303      	str	r3, [sp, #12]
 8004476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004478:	4433      	add	r3, r6
 800447a:	9309      	str	r3, [sp, #36]	; 0x24
 800447c:	e767      	b.n	800434e <_svfiprintf_r+0x4e>
 800447e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004482:	460c      	mov	r4, r1
 8004484:	2001      	movs	r0, #1
 8004486:	e7a5      	b.n	80043d4 <_svfiprintf_r+0xd4>
 8004488:	2300      	movs	r3, #0
 800448a:	3401      	adds	r4, #1
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	4619      	mov	r1, r3
 8004490:	f04f 0c0a 	mov.w	ip, #10
 8004494:	4620      	mov	r0, r4
 8004496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800449a:	3a30      	subs	r2, #48	; 0x30
 800449c:	2a09      	cmp	r2, #9
 800449e:	d903      	bls.n	80044a8 <_svfiprintf_r+0x1a8>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0c5      	beq.n	8004430 <_svfiprintf_r+0x130>
 80044a4:	9105      	str	r1, [sp, #20]
 80044a6:	e7c3      	b.n	8004430 <_svfiprintf_r+0x130>
 80044a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ac:	4604      	mov	r4, r0
 80044ae:	2301      	movs	r3, #1
 80044b0:	e7f0      	b.n	8004494 <_svfiprintf_r+0x194>
 80044b2:	ab03      	add	r3, sp, #12
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	462a      	mov	r2, r5
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <_svfiprintf_r+0x1f8>)
 80044ba:	a904      	add	r1, sp, #16
 80044bc:	4638      	mov	r0, r7
 80044be:	f7fd fe99 	bl	80021f4 <_printf_float>
 80044c2:	1c42      	adds	r2, r0, #1
 80044c4:	4606      	mov	r6, r0
 80044c6:	d1d6      	bne.n	8004476 <_svfiprintf_r+0x176>
 80044c8:	89ab      	ldrh	r3, [r5, #12]
 80044ca:	065b      	lsls	r3, r3, #25
 80044cc:	f53f af2c 	bmi.w	8004328 <_svfiprintf_r+0x28>
 80044d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044d2:	b01d      	add	sp, #116	; 0x74
 80044d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d8:	ab03      	add	r3, sp, #12
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	462a      	mov	r2, r5
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <_svfiprintf_r+0x1f8>)
 80044e0:	a904      	add	r1, sp, #16
 80044e2:	4638      	mov	r0, r7
 80044e4:	f7fe f92a 	bl	800273c <_printf_i>
 80044e8:	e7eb      	b.n	80044c2 <_svfiprintf_r+0x1c2>
 80044ea:	bf00      	nop
 80044ec:	08005364 	.word	0x08005364
 80044f0:	0800536e 	.word	0x0800536e
 80044f4:	080021f5 	.word	0x080021f5
 80044f8:	08004249 	.word	0x08004249
 80044fc:	0800536a 	.word	0x0800536a

08004500 <__sfputc_r>:
 8004500:	6893      	ldr	r3, [r2, #8]
 8004502:	3b01      	subs	r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	b410      	push	{r4}
 8004508:	6093      	str	r3, [r2, #8]
 800450a:	da08      	bge.n	800451e <__sfputc_r+0x1e>
 800450c:	6994      	ldr	r4, [r2, #24]
 800450e:	42a3      	cmp	r3, r4
 8004510:	db01      	blt.n	8004516 <__sfputc_r+0x16>
 8004512:	290a      	cmp	r1, #10
 8004514:	d103      	bne.n	800451e <__sfputc_r+0x1e>
 8004516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800451a:	f000 b99f 	b.w	800485c <__swbuf_r>
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	1c58      	adds	r0, r3, #1
 8004522:	6010      	str	r0, [r2, #0]
 8004524:	7019      	strb	r1, [r3, #0]
 8004526:	4608      	mov	r0, r1
 8004528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800452c:	4770      	bx	lr

0800452e <__sfputs_r>:
 800452e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004530:	4606      	mov	r6, r0
 8004532:	460f      	mov	r7, r1
 8004534:	4614      	mov	r4, r2
 8004536:	18d5      	adds	r5, r2, r3
 8004538:	42ac      	cmp	r4, r5
 800453a:	d101      	bne.n	8004540 <__sfputs_r+0x12>
 800453c:	2000      	movs	r0, #0
 800453e:	e007      	b.n	8004550 <__sfputs_r+0x22>
 8004540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004544:	463a      	mov	r2, r7
 8004546:	4630      	mov	r0, r6
 8004548:	f7ff ffda 	bl	8004500 <__sfputc_r>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d1f3      	bne.n	8004538 <__sfputs_r+0xa>
 8004550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004554 <_vfiprintf_r>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	460d      	mov	r5, r1
 800455a:	b09d      	sub	sp, #116	; 0x74
 800455c:	4614      	mov	r4, r2
 800455e:	4698      	mov	r8, r3
 8004560:	4606      	mov	r6, r0
 8004562:	b118      	cbz	r0, 800456c <_vfiprintf_r+0x18>
 8004564:	6983      	ldr	r3, [r0, #24]
 8004566:	b90b      	cbnz	r3, 800456c <_vfiprintf_r+0x18>
 8004568:	f7ff f938 	bl	80037dc <__sinit>
 800456c:	4b89      	ldr	r3, [pc, #548]	; (8004794 <_vfiprintf_r+0x240>)
 800456e:	429d      	cmp	r5, r3
 8004570:	d11b      	bne.n	80045aa <_vfiprintf_r+0x56>
 8004572:	6875      	ldr	r5, [r6, #4]
 8004574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004576:	07d9      	lsls	r1, r3, #31
 8004578:	d405      	bmi.n	8004586 <_vfiprintf_r+0x32>
 800457a:	89ab      	ldrh	r3, [r5, #12]
 800457c:	059a      	lsls	r2, r3, #22
 800457e:	d402      	bmi.n	8004586 <_vfiprintf_r+0x32>
 8004580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004582:	f7ff f9ce 	bl	8003922 <__retarget_lock_acquire_recursive>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	d501      	bpl.n	8004590 <_vfiprintf_r+0x3c>
 800458c:	692b      	ldr	r3, [r5, #16]
 800458e:	b9eb      	cbnz	r3, 80045cc <_vfiprintf_r+0x78>
 8004590:	4629      	mov	r1, r5
 8004592:	4630      	mov	r0, r6
 8004594:	f000 f9c6 	bl	8004924 <__swsetup_r>
 8004598:	b1c0      	cbz	r0, 80045cc <_vfiprintf_r+0x78>
 800459a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800459c:	07dc      	lsls	r4, r3, #31
 800459e:	d50e      	bpl.n	80045be <_vfiprintf_r+0x6a>
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	b01d      	add	sp, #116	; 0x74
 80045a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045aa:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <_vfiprintf_r+0x244>)
 80045ac:	429d      	cmp	r5, r3
 80045ae:	d101      	bne.n	80045b4 <_vfiprintf_r+0x60>
 80045b0:	68b5      	ldr	r5, [r6, #8]
 80045b2:	e7df      	b.n	8004574 <_vfiprintf_r+0x20>
 80045b4:	4b79      	ldr	r3, [pc, #484]	; (800479c <_vfiprintf_r+0x248>)
 80045b6:	429d      	cmp	r5, r3
 80045b8:	bf08      	it	eq
 80045ba:	68f5      	ldreq	r5, [r6, #12]
 80045bc:	e7da      	b.n	8004574 <_vfiprintf_r+0x20>
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	0598      	lsls	r0, r3, #22
 80045c2:	d4ed      	bmi.n	80045a0 <_vfiprintf_r+0x4c>
 80045c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045c6:	f7ff f9ad 	bl	8003924 <__retarget_lock_release_recursive>
 80045ca:	e7e9      	b.n	80045a0 <_vfiprintf_r+0x4c>
 80045cc:	2300      	movs	r3, #0
 80045ce:	9309      	str	r3, [sp, #36]	; 0x24
 80045d0:	2320      	movs	r3, #32
 80045d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80045da:	2330      	movs	r3, #48	; 0x30
 80045dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047a0 <_vfiprintf_r+0x24c>
 80045e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045e4:	f04f 0901 	mov.w	r9, #1
 80045e8:	4623      	mov	r3, r4
 80045ea:	469a      	mov	sl, r3
 80045ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f0:	b10a      	cbz	r2, 80045f6 <_vfiprintf_r+0xa2>
 80045f2:	2a25      	cmp	r2, #37	; 0x25
 80045f4:	d1f9      	bne.n	80045ea <_vfiprintf_r+0x96>
 80045f6:	ebba 0b04 	subs.w	fp, sl, r4
 80045fa:	d00b      	beq.n	8004614 <_vfiprintf_r+0xc0>
 80045fc:	465b      	mov	r3, fp
 80045fe:	4622      	mov	r2, r4
 8004600:	4629      	mov	r1, r5
 8004602:	4630      	mov	r0, r6
 8004604:	f7ff ff93 	bl	800452e <__sfputs_r>
 8004608:	3001      	adds	r0, #1
 800460a:	f000 80aa 	beq.w	8004762 <_vfiprintf_r+0x20e>
 800460e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004610:	445a      	add	r2, fp
 8004612:	9209      	str	r2, [sp, #36]	; 0x24
 8004614:	f89a 3000 	ldrb.w	r3, [sl]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a2 	beq.w	8004762 <_vfiprintf_r+0x20e>
 800461e:	2300      	movs	r3, #0
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004628:	f10a 0a01 	add.w	sl, sl, #1
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	9307      	str	r3, [sp, #28]
 8004630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004634:	931a      	str	r3, [sp, #104]	; 0x68
 8004636:	4654      	mov	r4, sl
 8004638:	2205      	movs	r2, #5
 800463a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463e:	4858      	ldr	r0, [pc, #352]	; (80047a0 <_vfiprintf_r+0x24c>)
 8004640:	f7fb fdee 	bl	8000220 <memchr>
 8004644:	9a04      	ldr	r2, [sp, #16]
 8004646:	b9d8      	cbnz	r0, 8004680 <_vfiprintf_r+0x12c>
 8004648:	06d1      	lsls	r1, r2, #27
 800464a:	bf44      	itt	mi
 800464c:	2320      	movmi	r3, #32
 800464e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004652:	0713      	lsls	r3, r2, #28
 8004654:	bf44      	itt	mi
 8004656:	232b      	movmi	r3, #43	; 0x2b
 8004658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465c:	f89a 3000 	ldrb.w	r3, [sl]
 8004660:	2b2a      	cmp	r3, #42	; 0x2a
 8004662:	d015      	beq.n	8004690 <_vfiprintf_r+0x13c>
 8004664:	9a07      	ldr	r2, [sp, #28]
 8004666:	4654      	mov	r4, sl
 8004668:	2000      	movs	r0, #0
 800466a:	f04f 0c0a 	mov.w	ip, #10
 800466e:	4621      	mov	r1, r4
 8004670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004674:	3b30      	subs	r3, #48	; 0x30
 8004676:	2b09      	cmp	r3, #9
 8004678:	d94e      	bls.n	8004718 <_vfiprintf_r+0x1c4>
 800467a:	b1b0      	cbz	r0, 80046aa <_vfiprintf_r+0x156>
 800467c:	9207      	str	r2, [sp, #28]
 800467e:	e014      	b.n	80046aa <_vfiprintf_r+0x156>
 8004680:	eba0 0308 	sub.w	r3, r0, r8
 8004684:	fa09 f303 	lsl.w	r3, r9, r3
 8004688:	4313      	orrs	r3, r2
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	46a2      	mov	sl, r4
 800468e:	e7d2      	b.n	8004636 <_vfiprintf_r+0xe2>
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	1d19      	adds	r1, r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	9103      	str	r1, [sp, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	bfbb      	ittet	lt
 800469c:	425b      	neglt	r3, r3
 800469e:	f042 0202 	orrlt.w	r2, r2, #2
 80046a2:	9307      	strge	r3, [sp, #28]
 80046a4:	9307      	strlt	r3, [sp, #28]
 80046a6:	bfb8      	it	lt
 80046a8:	9204      	strlt	r2, [sp, #16]
 80046aa:	7823      	ldrb	r3, [r4, #0]
 80046ac:	2b2e      	cmp	r3, #46	; 0x2e
 80046ae:	d10c      	bne.n	80046ca <_vfiprintf_r+0x176>
 80046b0:	7863      	ldrb	r3, [r4, #1]
 80046b2:	2b2a      	cmp	r3, #42	; 0x2a
 80046b4:	d135      	bne.n	8004722 <_vfiprintf_r+0x1ce>
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	1d1a      	adds	r2, r3, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	9203      	str	r2, [sp, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bfb8      	it	lt
 80046c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046c6:	3402      	adds	r4, #2
 80046c8:	9305      	str	r3, [sp, #20]
 80046ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047b0 <_vfiprintf_r+0x25c>
 80046ce:	7821      	ldrb	r1, [r4, #0]
 80046d0:	2203      	movs	r2, #3
 80046d2:	4650      	mov	r0, sl
 80046d4:	f7fb fda4 	bl	8000220 <memchr>
 80046d8:	b140      	cbz	r0, 80046ec <_vfiprintf_r+0x198>
 80046da:	2340      	movs	r3, #64	; 0x40
 80046dc:	eba0 000a 	sub.w	r0, r0, sl
 80046e0:	fa03 f000 	lsl.w	r0, r3, r0
 80046e4:	9b04      	ldr	r3, [sp, #16]
 80046e6:	4303      	orrs	r3, r0
 80046e8:	3401      	adds	r4, #1
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f0:	482c      	ldr	r0, [pc, #176]	; (80047a4 <_vfiprintf_r+0x250>)
 80046f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046f6:	2206      	movs	r2, #6
 80046f8:	f7fb fd92 	bl	8000220 <memchr>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d03f      	beq.n	8004780 <_vfiprintf_r+0x22c>
 8004700:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <_vfiprintf_r+0x254>)
 8004702:	bb1b      	cbnz	r3, 800474c <_vfiprintf_r+0x1f8>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	3307      	adds	r3, #7
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	3308      	adds	r3, #8
 800470e:	9303      	str	r3, [sp, #12]
 8004710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004712:	443b      	add	r3, r7
 8004714:	9309      	str	r3, [sp, #36]	; 0x24
 8004716:	e767      	b.n	80045e8 <_vfiprintf_r+0x94>
 8004718:	fb0c 3202 	mla	r2, ip, r2, r3
 800471c:	460c      	mov	r4, r1
 800471e:	2001      	movs	r0, #1
 8004720:	e7a5      	b.n	800466e <_vfiprintf_r+0x11a>
 8004722:	2300      	movs	r3, #0
 8004724:	3401      	adds	r4, #1
 8004726:	9305      	str	r3, [sp, #20]
 8004728:	4619      	mov	r1, r3
 800472a:	f04f 0c0a 	mov.w	ip, #10
 800472e:	4620      	mov	r0, r4
 8004730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004734:	3a30      	subs	r2, #48	; 0x30
 8004736:	2a09      	cmp	r2, #9
 8004738:	d903      	bls.n	8004742 <_vfiprintf_r+0x1ee>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0c5      	beq.n	80046ca <_vfiprintf_r+0x176>
 800473e:	9105      	str	r1, [sp, #20]
 8004740:	e7c3      	b.n	80046ca <_vfiprintf_r+0x176>
 8004742:	fb0c 2101 	mla	r1, ip, r1, r2
 8004746:	4604      	mov	r4, r0
 8004748:	2301      	movs	r3, #1
 800474a:	e7f0      	b.n	800472e <_vfiprintf_r+0x1da>
 800474c:	ab03      	add	r3, sp, #12
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	462a      	mov	r2, r5
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <_vfiprintf_r+0x258>)
 8004754:	a904      	add	r1, sp, #16
 8004756:	4630      	mov	r0, r6
 8004758:	f7fd fd4c 	bl	80021f4 <_printf_float>
 800475c:	4607      	mov	r7, r0
 800475e:	1c78      	adds	r0, r7, #1
 8004760:	d1d6      	bne.n	8004710 <_vfiprintf_r+0x1bc>
 8004762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004764:	07d9      	lsls	r1, r3, #31
 8004766:	d405      	bmi.n	8004774 <_vfiprintf_r+0x220>
 8004768:	89ab      	ldrh	r3, [r5, #12]
 800476a:	059a      	lsls	r2, r3, #22
 800476c:	d402      	bmi.n	8004774 <_vfiprintf_r+0x220>
 800476e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004770:	f7ff f8d8 	bl	8003924 <__retarget_lock_release_recursive>
 8004774:	89ab      	ldrh	r3, [r5, #12]
 8004776:	065b      	lsls	r3, r3, #25
 8004778:	f53f af12 	bmi.w	80045a0 <_vfiprintf_r+0x4c>
 800477c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800477e:	e711      	b.n	80045a4 <_vfiprintf_r+0x50>
 8004780:	ab03      	add	r3, sp, #12
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	462a      	mov	r2, r5
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <_vfiprintf_r+0x258>)
 8004788:	a904      	add	r1, sp, #16
 800478a:	4630      	mov	r0, r6
 800478c:	f7fd ffd6 	bl	800273c <_printf_i>
 8004790:	e7e4      	b.n	800475c <_vfiprintf_r+0x208>
 8004792:	bf00      	nop
 8004794:	080051cc 	.word	0x080051cc
 8004798:	080051ec 	.word	0x080051ec
 800479c:	080051ac 	.word	0x080051ac
 80047a0:	08005364 	.word	0x08005364
 80047a4:	0800536e 	.word	0x0800536e
 80047a8:	080021f5 	.word	0x080021f5
 80047ac:	0800452f 	.word	0x0800452f
 80047b0:	0800536a 	.word	0x0800536a

080047b4 <_sbrk_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d06      	ldr	r5, [pc, #24]	; (80047d0 <_sbrk_r+0x1c>)
 80047b8:	2300      	movs	r3, #0
 80047ba:	4604      	mov	r4, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	f000 fbcc 	bl	8004f5c <_sbrk>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_sbrk_r+0x1a>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_sbrk_r+0x1a>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	20000840 	.word	0x20000840

080047d4 <__sread>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	460c      	mov	r4, r1
 80047d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047dc:	f000 faf2 	bl	8004dc4 <_read_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	bfab      	itete	ge
 80047e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047e6:	89a3      	ldrhlt	r3, [r4, #12]
 80047e8:	181b      	addge	r3, r3, r0
 80047ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ee:	bfac      	ite	ge
 80047f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047f2:	81a3      	strhlt	r3, [r4, #12]
 80047f4:	bd10      	pop	{r4, pc}

080047f6 <__swrite>:
 80047f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	461f      	mov	r7, r3
 80047fc:	898b      	ldrh	r3, [r1, #12]
 80047fe:	05db      	lsls	r3, r3, #23
 8004800:	4605      	mov	r5, r0
 8004802:	460c      	mov	r4, r1
 8004804:	4616      	mov	r6, r2
 8004806:	d505      	bpl.n	8004814 <__swrite+0x1e>
 8004808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480c:	2302      	movs	r3, #2
 800480e:	2200      	movs	r2, #0
 8004810:	f000 f9f8 	bl	8004c04 <_lseek_r>
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800481a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800481e:	81a3      	strh	r3, [r4, #12]
 8004820:	4632      	mov	r2, r6
 8004822:	463b      	mov	r3, r7
 8004824:	4628      	mov	r0, r5
 8004826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	f000 b869 	b.w	8004900 <_write_r>

0800482e <__sseek>:
 800482e:	b510      	push	{r4, lr}
 8004830:	460c      	mov	r4, r1
 8004832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004836:	f000 f9e5 	bl	8004c04 <_lseek_r>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	bf15      	itete	ne
 8004840:	6560      	strne	r0, [r4, #84]	; 0x54
 8004842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800484a:	81a3      	strheq	r3, [r4, #12]
 800484c:	bf18      	it	ne
 800484e:	81a3      	strhne	r3, [r4, #12]
 8004850:	bd10      	pop	{r4, pc}

08004852 <__sclose>:
 8004852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004856:	f000 b8f1 	b.w	8004a3c <_close_r>
	...

0800485c <__swbuf_r>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	460e      	mov	r6, r1
 8004860:	4614      	mov	r4, r2
 8004862:	4605      	mov	r5, r0
 8004864:	b118      	cbz	r0, 800486e <__swbuf_r+0x12>
 8004866:	6983      	ldr	r3, [r0, #24]
 8004868:	b90b      	cbnz	r3, 800486e <__swbuf_r+0x12>
 800486a:	f7fe ffb7 	bl	80037dc <__sinit>
 800486e:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <__swbuf_r+0x98>)
 8004870:	429c      	cmp	r4, r3
 8004872:	d12b      	bne.n	80048cc <__swbuf_r+0x70>
 8004874:	686c      	ldr	r4, [r5, #4]
 8004876:	69a3      	ldr	r3, [r4, #24]
 8004878:	60a3      	str	r3, [r4, #8]
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	071a      	lsls	r2, r3, #28
 800487e:	d52f      	bpl.n	80048e0 <__swbuf_r+0x84>
 8004880:	6923      	ldr	r3, [r4, #16]
 8004882:	b36b      	cbz	r3, 80048e0 <__swbuf_r+0x84>
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	6820      	ldr	r0, [r4, #0]
 8004888:	1ac0      	subs	r0, r0, r3
 800488a:	6963      	ldr	r3, [r4, #20]
 800488c:	b2f6      	uxtb	r6, r6
 800488e:	4283      	cmp	r3, r0
 8004890:	4637      	mov	r7, r6
 8004892:	dc04      	bgt.n	800489e <__swbuf_r+0x42>
 8004894:	4621      	mov	r1, r4
 8004896:	4628      	mov	r0, r5
 8004898:	f000 f966 	bl	8004b68 <_fflush_r>
 800489c:	bb30      	cbnz	r0, 80048ec <__swbuf_r+0x90>
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	60a3      	str	r3, [r4, #8]
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	6022      	str	r2, [r4, #0]
 80048aa:	701e      	strb	r6, [r3, #0]
 80048ac:	6963      	ldr	r3, [r4, #20]
 80048ae:	3001      	adds	r0, #1
 80048b0:	4283      	cmp	r3, r0
 80048b2:	d004      	beq.n	80048be <__swbuf_r+0x62>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	07db      	lsls	r3, r3, #31
 80048b8:	d506      	bpl.n	80048c8 <__swbuf_r+0x6c>
 80048ba:	2e0a      	cmp	r6, #10
 80048bc:	d104      	bne.n	80048c8 <__swbuf_r+0x6c>
 80048be:	4621      	mov	r1, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 f951 	bl	8004b68 <_fflush_r>
 80048c6:	b988      	cbnz	r0, 80048ec <__swbuf_r+0x90>
 80048c8:	4638      	mov	r0, r7
 80048ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <__swbuf_r+0x9c>)
 80048ce:	429c      	cmp	r4, r3
 80048d0:	d101      	bne.n	80048d6 <__swbuf_r+0x7a>
 80048d2:	68ac      	ldr	r4, [r5, #8]
 80048d4:	e7cf      	b.n	8004876 <__swbuf_r+0x1a>
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <__swbuf_r+0xa0>)
 80048d8:	429c      	cmp	r4, r3
 80048da:	bf08      	it	eq
 80048dc:	68ec      	ldreq	r4, [r5, #12]
 80048de:	e7ca      	b.n	8004876 <__swbuf_r+0x1a>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 f81e 	bl	8004924 <__swsetup_r>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d0cb      	beq.n	8004884 <__swbuf_r+0x28>
 80048ec:	f04f 37ff 	mov.w	r7, #4294967295
 80048f0:	e7ea      	b.n	80048c8 <__swbuf_r+0x6c>
 80048f2:	bf00      	nop
 80048f4:	080051cc 	.word	0x080051cc
 80048f8:	080051ec 	.word	0x080051ec
 80048fc:	080051ac 	.word	0x080051ac

08004900 <_write_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d07      	ldr	r5, [pc, #28]	; (8004920 <_write_r+0x20>)
 8004904:	4604      	mov	r4, r0
 8004906:	4608      	mov	r0, r1
 8004908:	4611      	mov	r1, r2
 800490a:	2200      	movs	r2, #0
 800490c:	602a      	str	r2, [r5, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	f000 fb32 	bl	8004f78 <_write>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_write_r+0x1e>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_write_r+0x1e>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	20000840 	.word	0x20000840

08004924 <__swsetup_r>:
 8004924:	4b32      	ldr	r3, [pc, #200]	; (80049f0 <__swsetup_r+0xcc>)
 8004926:	b570      	push	{r4, r5, r6, lr}
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	4606      	mov	r6, r0
 800492c:	460c      	mov	r4, r1
 800492e:	b125      	cbz	r5, 800493a <__swsetup_r+0x16>
 8004930:	69ab      	ldr	r3, [r5, #24]
 8004932:	b913      	cbnz	r3, 800493a <__swsetup_r+0x16>
 8004934:	4628      	mov	r0, r5
 8004936:	f7fe ff51 	bl	80037dc <__sinit>
 800493a:	4b2e      	ldr	r3, [pc, #184]	; (80049f4 <__swsetup_r+0xd0>)
 800493c:	429c      	cmp	r4, r3
 800493e:	d10f      	bne.n	8004960 <__swsetup_r+0x3c>
 8004940:	686c      	ldr	r4, [r5, #4]
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004948:	0719      	lsls	r1, r3, #28
 800494a:	d42c      	bmi.n	80049a6 <__swsetup_r+0x82>
 800494c:	06dd      	lsls	r5, r3, #27
 800494e:	d411      	bmi.n	8004974 <__swsetup_r+0x50>
 8004950:	2309      	movs	r3, #9
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004958:	81a3      	strh	r3, [r4, #12]
 800495a:	f04f 30ff 	mov.w	r0, #4294967295
 800495e:	e03e      	b.n	80049de <__swsetup_r+0xba>
 8004960:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <__swsetup_r+0xd4>)
 8004962:	429c      	cmp	r4, r3
 8004964:	d101      	bne.n	800496a <__swsetup_r+0x46>
 8004966:	68ac      	ldr	r4, [r5, #8]
 8004968:	e7eb      	b.n	8004942 <__swsetup_r+0x1e>
 800496a:	4b24      	ldr	r3, [pc, #144]	; (80049fc <__swsetup_r+0xd8>)
 800496c:	429c      	cmp	r4, r3
 800496e:	bf08      	it	eq
 8004970:	68ec      	ldreq	r4, [r5, #12]
 8004972:	e7e6      	b.n	8004942 <__swsetup_r+0x1e>
 8004974:	0758      	lsls	r0, r3, #29
 8004976:	d512      	bpl.n	800499e <__swsetup_r+0x7a>
 8004978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800497a:	b141      	cbz	r1, 800498e <__swsetup_r+0x6a>
 800497c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004980:	4299      	cmp	r1, r3
 8004982:	d002      	beq.n	800498a <__swsetup_r+0x66>
 8004984:	4630      	mov	r0, r6
 8004986:	f7ff fb7f 	bl	8004088 <_free_r>
 800498a:	2300      	movs	r3, #0
 800498c:	6363      	str	r3, [r4, #52]	; 0x34
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004994:	81a3      	strh	r3, [r4, #12]
 8004996:	2300      	movs	r3, #0
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	f043 0308 	orr.w	r3, r3, #8
 80049a4:	81a3      	strh	r3, [r4, #12]
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	b94b      	cbnz	r3, 80049be <__swsetup_r+0x9a>
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b4:	d003      	beq.n	80049be <__swsetup_r+0x9a>
 80049b6:	4621      	mov	r1, r4
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 f95b 	bl	8004c74 <__smakebuf_r>
 80049be:	89a0      	ldrh	r0, [r4, #12]
 80049c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049c4:	f010 0301 	ands.w	r3, r0, #1
 80049c8:	d00a      	beq.n	80049e0 <__swsetup_r+0xbc>
 80049ca:	2300      	movs	r3, #0
 80049cc:	60a3      	str	r3, [r4, #8]
 80049ce:	6963      	ldr	r3, [r4, #20]
 80049d0:	425b      	negs	r3, r3
 80049d2:	61a3      	str	r3, [r4, #24]
 80049d4:	6923      	ldr	r3, [r4, #16]
 80049d6:	b943      	cbnz	r3, 80049ea <__swsetup_r+0xc6>
 80049d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049dc:	d1ba      	bne.n	8004954 <__swsetup_r+0x30>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	0781      	lsls	r1, r0, #30
 80049e2:	bf58      	it	pl
 80049e4:	6963      	ldrpl	r3, [r4, #20]
 80049e6:	60a3      	str	r3, [r4, #8]
 80049e8:	e7f4      	b.n	80049d4 <__swsetup_r+0xb0>
 80049ea:	2000      	movs	r0, #0
 80049ec:	e7f7      	b.n	80049de <__swsetup_r+0xba>
 80049ee:	bf00      	nop
 80049f0:	20000120 	.word	0x20000120
 80049f4:	080051cc 	.word	0x080051cc
 80049f8:	080051ec 	.word	0x080051ec
 80049fc:	080051ac 	.word	0x080051ac

08004a00 <__assert_func>:
 8004a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a02:	4614      	mov	r4, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <__assert_func+0x2c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	68d8      	ldr	r0, [r3, #12]
 8004a0e:	b14c      	cbz	r4, 8004a24 <__assert_func+0x24>
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <__assert_func+0x30>)
 8004a12:	9100      	str	r1, [sp, #0]
 8004a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a18:	4906      	ldr	r1, [pc, #24]	; (8004a34 <__assert_func+0x34>)
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	f000 f8e0 	bl	8004be0 <fiprintf>
 8004a20:	f000 f9ef 	bl	8004e02 <abort>
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <__assert_func+0x38>)
 8004a26:	461c      	mov	r4, r3
 8004a28:	e7f3      	b.n	8004a12 <__assert_func+0x12>
 8004a2a:	bf00      	nop
 8004a2c:	20000120 	.word	0x20000120
 8004a30:	08005375 	.word	0x08005375
 8004a34:	08005382 	.word	0x08005382
 8004a38:	080053b0 	.word	0x080053b0

08004a3c <_close_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d06      	ldr	r5, [pc, #24]	; (8004a58 <_close_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f000 fa50 	bl	8004eec <_close>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_close_r+0x1a>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_close_r+0x1a>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	20000840 	.word	0x20000840

08004a5c <__sflush_r>:
 8004a5c:	898a      	ldrh	r2, [r1, #12]
 8004a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a62:	4605      	mov	r5, r0
 8004a64:	0710      	lsls	r0, r2, #28
 8004a66:	460c      	mov	r4, r1
 8004a68:	d458      	bmi.n	8004b1c <__sflush_r+0xc0>
 8004a6a:	684b      	ldr	r3, [r1, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dc05      	bgt.n	8004a7c <__sflush_r+0x20>
 8004a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dc02      	bgt.n	8004a7c <__sflush_r+0x20>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	d0f9      	beq.n	8004a76 <__sflush_r+0x1a>
 8004a82:	2300      	movs	r3, #0
 8004a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a88:	682f      	ldr	r7, [r5, #0]
 8004a8a:	602b      	str	r3, [r5, #0]
 8004a8c:	d032      	beq.n	8004af4 <__sflush_r+0x98>
 8004a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	075a      	lsls	r2, r3, #29
 8004a94:	d505      	bpl.n	8004aa2 <__sflush_r+0x46>
 8004a96:	6863      	ldr	r3, [r4, #4]
 8004a98:	1ac0      	subs	r0, r0, r3
 8004a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a9c:	b10b      	cbz	r3, 8004aa2 <__sflush_r+0x46>
 8004a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aa0:	1ac0      	subs	r0, r0, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004aa8:	6a21      	ldr	r1, [r4, #32]
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b0      	blx	r6
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	d106      	bne.n	8004ac2 <__sflush_r+0x66>
 8004ab4:	6829      	ldr	r1, [r5, #0]
 8004ab6:	291d      	cmp	r1, #29
 8004ab8:	d82c      	bhi.n	8004b14 <__sflush_r+0xb8>
 8004aba:	4a2a      	ldr	r2, [pc, #168]	; (8004b64 <__sflush_r+0x108>)
 8004abc:	40ca      	lsrs	r2, r1
 8004abe:	07d6      	lsls	r6, r2, #31
 8004ac0:	d528      	bpl.n	8004b14 <__sflush_r+0xb8>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	6062      	str	r2, [r4, #4]
 8004ac6:	04d9      	lsls	r1, r3, #19
 8004ac8:	6922      	ldr	r2, [r4, #16]
 8004aca:	6022      	str	r2, [r4, #0]
 8004acc:	d504      	bpl.n	8004ad8 <__sflush_r+0x7c>
 8004ace:	1c42      	adds	r2, r0, #1
 8004ad0:	d101      	bne.n	8004ad6 <__sflush_r+0x7a>
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	b903      	cbnz	r3, 8004ad8 <__sflush_r+0x7c>
 8004ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8004ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ada:	602f      	str	r7, [r5, #0]
 8004adc:	2900      	cmp	r1, #0
 8004ade:	d0ca      	beq.n	8004a76 <__sflush_r+0x1a>
 8004ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ae4:	4299      	cmp	r1, r3
 8004ae6:	d002      	beq.n	8004aee <__sflush_r+0x92>
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f7ff facd 	bl	8004088 <_free_r>
 8004aee:	2000      	movs	r0, #0
 8004af0:	6360      	str	r0, [r4, #52]	; 0x34
 8004af2:	e7c1      	b.n	8004a78 <__sflush_r+0x1c>
 8004af4:	6a21      	ldr	r1, [r4, #32]
 8004af6:	2301      	movs	r3, #1
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b0      	blx	r6
 8004afc:	1c41      	adds	r1, r0, #1
 8004afe:	d1c7      	bne.n	8004a90 <__sflush_r+0x34>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0c4      	beq.n	8004a90 <__sflush_r+0x34>
 8004b06:	2b1d      	cmp	r3, #29
 8004b08:	d001      	beq.n	8004b0e <__sflush_r+0xb2>
 8004b0a:	2b16      	cmp	r3, #22
 8004b0c:	d101      	bne.n	8004b12 <__sflush_r+0xb6>
 8004b0e:	602f      	str	r7, [r5, #0]
 8004b10:	e7b1      	b.n	8004a76 <__sflush_r+0x1a>
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b18:	81a3      	strh	r3, [r4, #12]
 8004b1a:	e7ad      	b.n	8004a78 <__sflush_r+0x1c>
 8004b1c:	690f      	ldr	r7, [r1, #16]
 8004b1e:	2f00      	cmp	r7, #0
 8004b20:	d0a9      	beq.n	8004a76 <__sflush_r+0x1a>
 8004b22:	0793      	lsls	r3, r2, #30
 8004b24:	680e      	ldr	r6, [r1, #0]
 8004b26:	bf08      	it	eq
 8004b28:	694b      	ldreq	r3, [r1, #20]
 8004b2a:	600f      	str	r7, [r1, #0]
 8004b2c:	bf18      	it	ne
 8004b2e:	2300      	movne	r3, #0
 8004b30:	eba6 0807 	sub.w	r8, r6, r7
 8004b34:	608b      	str	r3, [r1, #8]
 8004b36:	f1b8 0f00 	cmp.w	r8, #0
 8004b3a:	dd9c      	ble.n	8004a76 <__sflush_r+0x1a>
 8004b3c:	6a21      	ldr	r1, [r4, #32]
 8004b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b40:	4643      	mov	r3, r8
 8004b42:	463a      	mov	r2, r7
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b0      	blx	r6
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	dc06      	bgt.n	8004b5a <__sflush_r+0xfe>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e78e      	b.n	8004a78 <__sflush_r+0x1c>
 8004b5a:	4407      	add	r7, r0
 8004b5c:	eba8 0800 	sub.w	r8, r8, r0
 8004b60:	e7e9      	b.n	8004b36 <__sflush_r+0xda>
 8004b62:	bf00      	nop
 8004b64:	20400001 	.word	0x20400001

08004b68 <_fflush_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	690b      	ldr	r3, [r1, #16]
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	b913      	cbnz	r3, 8004b78 <_fflush_r+0x10>
 8004b72:	2500      	movs	r5, #0
 8004b74:	4628      	mov	r0, r5
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	b118      	cbz	r0, 8004b82 <_fflush_r+0x1a>
 8004b7a:	6983      	ldr	r3, [r0, #24]
 8004b7c:	b90b      	cbnz	r3, 8004b82 <_fflush_r+0x1a>
 8004b7e:	f7fe fe2d 	bl	80037dc <__sinit>
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <_fflush_r+0x6c>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	d11b      	bne.n	8004bc0 <_fflush_r+0x58>
 8004b88:	686c      	ldr	r4, [r5, #4]
 8004b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ef      	beq.n	8004b72 <_fflush_r+0xa>
 8004b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b94:	07d0      	lsls	r0, r2, #31
 8004b96:	d404      	bmi.n	8004ba2 <_fflush_r+0x3a>
 8004b98:	0599      	lsls	r1, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_fflush_r+0x3a>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b9e:	f7fe fec0 	bl	8003922 <__retarget_lock_acquire_recursive>
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	f7ff ff59 	bl	8004a5c <__sflush_r>
 8004baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bac:	07da      	lsls	r2, r3, #31
 8004bae:	4605      	mov	r5, r0
 8004bb0:	d4e0      	bmi.n	8004b74 <_fflush_r+0xc>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	059b      	lsls	r3, r3, #22
 8004bb6:	d4dd      	bmi.n	8004b74 <_fflush_r+0xc>
 8004bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bba:	f7fe feb3 	bl	8003924 <__retarget_lock_release_recursive>
 8004bbe:	e7d9      	b.n	8004b74 <_fflush_r+0xc>
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <_fflush_r+0x70>)
 8004bc2:	429c      	cmp	r4, r3
 8004bc4:	d101      	bne.n	8004bca <_fflush_r+0x62>
 8004bc6:	68ac      	ldr	r4, [r5, #8]
 8004bc8:	e7df      	b.n	8004b8a <_fflush_r+0x22>
 8004bca:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <_fflush_r+0x74>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	bf08      	it	eq
 8004bd0:	68ec      	ldreq	r4, [r5, #12]
 8004bd2:	e7da      	b.n	8004b8a <_fflush_r+0x22>
 8004bd4:	080051cc 	.word	0x080051cc
 8004bd8:	080051ec 	.word	0x080051ec
 8004bdc:	080051ac 	.word	0x080051ac

08004be0 <fiprintf>:
 8004be0:	b40e      	push	{r1, r2, r3}
 8004be2:	b503      	push	{r0, r1, lr}
 8004be4:	4601      	mov	r1, r0
 8004be6:	ab03      	add	r3, sp, #12
 8004be8:	4805      	ldr	r0, [pc, #20]	; (8004c00 <fiprintf+0x20>)
 8004bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bee:	6800      	ldr	r0, [r0, #0]
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	f7ff fcaf 	bl	8004554 <_vfiprintf_r>
 8004bf6:	b002      	add	sp, #8
 8004bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bfc:	b003      	add	sp, #12
 8004bfe:	4770      	bx	lr
 8004c00:	20000120 	.word	0x20000120

08004c04 <_lseek_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4d07      	ldr	r5, [pc, #28]	; (8004c24 <_lseek_r+0x20>)
 8004c08:	4604      	mov	r4, r0
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	602a      	str	r2, [r5, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 f992 	bl	8004f3c <_lseek>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_lseek_r+0x1e>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_lseek_r+0x1e>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20000840 	.word	0x20000840

08004c28 <__swhatbuf_r>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	460e      	mov	r6, r1
 8004c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c30:	2900      	cmp	r1, #0
 8004c32:	b096      	sub	sp, #88	; 0x58
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	da08      	bge.n	8004c4c <__swhatbuf_r+0x24>
 8004c3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	602a      	str	r2, [r5, #0]
 8004c42:	061a      	lsls	r2, r3, #24
 8004c44:	d410      	bmi.n	8004c68 <__swhatbuf_r+0x40>
 8004c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c4a:	e00e      	b.n	8004c6a <__swhatbuf_r+0x42>
 8004c4c:	466a      	mov	r2, sp
 8004c4e:	f000 f8df 	bl	8004e10 <_fstat_r>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	dbf1      	blt.n	8004c3a <__swhatbuf_r+0x12>
 8004c56:	9a01      	ldr	r2, [sp, #4]
 8004c58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c60:	425a      	negs	r2, r3
 8004c62:	415a      	adcs	r2, r3
 8004c64:	602a      	str	r2, [r5, #0]
 8004c66:	e7ee      	b.n	8004c46 <__swhatbuf_r+0x1e>
 8004c68:	2340      	movs	r3, #64	; 0x40
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	b016      	add	sp, #88	; 0x58
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c74 <__smakebuf_r>:
 8004c74:	898b      	ldrh	r3, [r1, #12]
 8004c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c78:	079d      	lsls	r5, r3, #30
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	d507      	bpl.n	8004c90 <__smakebuf_r+0x1c>
 8004c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	6123      	str	r3, [r4, #16]
 8004c88:	2301      	movs	r3, #1
 8004c8a:	6163      	str	r3, [r4, #20]
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	ab01      	add	r3, sp, #4
 8004c92:	466a      	mov	r2, sp
 8004c94:	f7ff ffc8 	bl	8004c28 <__swhatbuf_r>
 8004c98:	9900      	ldr	r1, [sp, #0]
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f7ff fa5f 	bl	8004160 <_malloc_r>
 8004ca2:	b948      	cbnz	r0, 8004cb8 <__smakebuf_r+0x44>
 8004ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca8:	059a      	lsls	r2, r3, #22
 8004caa:	d4ef      	bmi.n	8004c8c <__smakebuf_r+0x18>
 8004cac:	f023 0303 	bic.w	r3, r3, #3
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	e7e3      	b.n	8004c80 <__smakebuf_r+0xc>
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <__smakebuf_r+0x7c>)
 8004cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	6020      	str	r0, [r4, #0]
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	6163      	str	r3, [r4, #20]
 8004cca:	9b01      	ldr	r3, [sp, #4]
 8004ccc:	6120      	str	r0, [r4, #16]
 8004cce:	b15b      	cbz	r3, 8004ce8 <__smakebuf_r+0x74>
 8004cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 f8ad 	bl	8004e34 <_isatty_r>
 8004cda:	b128      	cbz	r0, 8004ce8 <__smakebuf_r+0x74>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	89a0      	ldrh	r0, [r4, #12]
 8004cea:	4305      	orrs	r5, r0
 8004cec:	81a5      	strh	r5, [r4, #12]
 8004cee:	e7cd      	b.n	8004c8c <__smakebuf_r+0x18>
 8004cf0:	08003775 	.word	0x08003775

08004cf4 <__ascii_mbtowc>:
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	b901      	cbnz	r1, 8004cfa <__ascii_mbtowc+0x6>
 8004cf8:	a901      	add	r1, sp, #4
 8004cfa:	b142      	cbz	r2, 8004d0e <__ascii_mbtowc+0x1a>
 8004cfc:	b14b      	cbz	r3, 8004d12 <__ascii_mbtowc+0x1e>
 8004cfe:	7813      	ldrb	r3, [r2, #0]
 8004d00:	600b      	str	r3, [r1, #0]
 8004d02:	7812      	ldrb	r2, [r2, #0]
 8004d04:	1e10      	subs	r0, r2, #0
 8004d06:	bf18      	it	ne
 8004d08:	2001      	movne	r0, #1
 8004d0a:	b002      	add	sp, #8
 8004d0c:	4770      	bx	lr
 8004d0e:	4610      	mov	r0, r2
 8004d10:	e7fb      	b.n	8004d0a <__ascii_mbtowc+0x16>
 8004d12:	f06f 0001 	mvn.w	r0, #1
 8004d16:	e7f8      	b.n	8004d0a <__ascii_mbtowc+0x16>

08004d18 <memmove>:
 8004d18:	4288      	cmp	r0, r1
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	eb01 0402 	add.w	r4, r1, r2
 8004d20:	d902      	bls.n	8004d28 <memmove+0x10>
 8004d22:	4284      	cmp	r4, r0
 8004d24:	4623      	mov	r3, r4
 8004d26:	d807      	bhi.n	8004d38 <memmove+0x20>
 8004d28:	1e43      	subs	r3, r0, #1
 8004d2a:	42a1      	cmp	r1, r4
 8004d2c:	d008      	beq.n	8004d40 <memmove+0x28>
 8004d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d36:	e7f8      	b.n	8004d2a <memmove+0x12>
 8004d38:	4402      	add	r2, r0
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	428a      	cmp	r2, r1
 8004d3e:	d100      	bne.n	8004d42 <memmove+0x2a>
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d4a:	e7f7      	b.n	8004d3c <memmove+0x24>

08004d4c <__malloc_lock>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__malloc_lock+0x8>)
 8004d4e:	f7fe bde8 	b.w	8003922 <__retarget_lock_acquire_recursive>
 8004d52:	bf00      	nop
 8004d54:	20000834 	.word	0x20000834

08004d58 <__malloc_unlock>:
 8004d58:	4801      	ldr	r0, [pc, #4]	; (8004d60 <__malloc_unlock+0x8>)
 8004d5a:	f7fe bde3 	b.w	8003924 <__retarget_lock_release_recursive>
 8004d5e:	bf00      	nop
 8004d60:	20000834 	.word	0x20000834

08004d64 <_realloc_r>:
 8004d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d68:	4680      	mov	r8, r0
 8004d6a:	4614      	mov	r4, r2
 8004d6c:	460e      	mov	r6, r1
 8004d6e:	b921      	cbnz	r1, 8004d7a <_realloc_r+0x16>
 8004d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	4611      	mov	r1, r2
 8004d76:	f7ff b9f3 	b.w	8004160 <_malloc_r>
 8004d7a:	b92a      	cbnz	r2, 8004d88 <_realloc_r+0x24>
 8004d7c:	f7ff f984 	bl	8004088 <_free_r>
 8004d80:	4625      	mov	r5, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d88:	f000 f864 	bl	8004e54 <_malloc_usable_size_r>
 8004d8c:	4284      	cmp	r4, r0
 8004d8e:	4607      	mov	r7, r0
 8004d90:	d802      	bhi.n	8004d98 <_realloc_r+0x34>
 8004d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d96:	d812      	bhi.n	8004dbe <_realloc_r+0x5a>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	f7ff f9e0 	bl	8004160 <_malloc_r>
 8004da0:	4605      	mov	r5, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d0ed      	beq.n	8004d82 <_realloc_r+0x1e>
 8004da6:	42bc      	cmp	r4, r7
 8004da8:	4622      	mov	r2, r4
 8004daa:	4631      	mov	r1, r6
 8004dac:	bf28      	it	cs
 8004dae:	463a      	movcs	r2, r7
 8004db0:	f7fe fdc2 	bl	8003938 <memcpy>
 8004db4:	4631      	mov	r1, r6
 8004db6:	4640      	mov	r0, r8
 8004db8:	f7ff f966 	bl	8004088 <_free_r>
 8004dbc:	e7e1      	b.n	8004d82 <_realloc_r+0x1e>
 8004dbe:	4635      	mov	r5, r6
 8004dc0:	e7df      	b.n	8004d82 <_realloc_r+0x1e>
	...

08004dc4 <_read_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	; (8004de4 <_read_r+0x20>)
 8004dc8:	4604      	mov	r4, r0
 8004dca:	4608      	mov	r0, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	602a      	str	r2, [r5, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 f8ba 	bl	8004f4c <_read>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_read_r+0x1e>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_read_r+0x1e>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	20000840 	.word	0x20000840

08004de8 <__ascii_wctomb>:
 8004de8:	b149      	cbz	r1, 8004dfe <__ascii_wctomb+0x16>
 8004dea:	2aff      	cmp	r2, #255	; 0xff
 8004dec:	bf85      	ittet	hi
 8004dee:	238a      	movhi	r3, #138	; 0x8a
 8004df0:	6003      	strhi	r3, [r0, #0]
 8004df2:	700a      	strbls	r2, [r1, #0]
 8004df4:	f04f 30ff 	movhi.w	r0, #4294967295
 8004df8:	bf98      	it	ls
 8004dfa:	2001      	movls	r0, #1
 8004dfc:	4770      	bx	lr
 8004dfe:	4608      	mov	r0, r1
 8004e00:	4770      	bx	lr

08004e02 <abort>:
 8004e02:	b508      	push	{r3, lr}
 8004e04:	2006      	movs	r0, #6
 8004e06:	f000 f855 	bl	8004eb4 <raise>
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f000 f8bc 	bl	8004f88 <_exit>

08004e10 <_fstat_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d07      	ldr	r5, [pc, #28]	; (8004e30 <_fstat_r+0x20>)
 8004e14:	2300      	movs	r3, #0
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	f000 f86d 	bl	8004efc <_fstat>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d102      	bne.n	8004e2c <_fstat_r+0x1c>
 8004e26:	682b      	ldr	r3, [r5, #0]
 8004e28:	b103      	cbz	r3, 8004e2c <_fstat_r+0x1c>
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000840 	.word	0x20000840

08004e34 <_isatty_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d06      	ldr	r5, [pc, #24]	; (8004e50 <_isatty_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f000 f86c 	bl	8004f1c <_isatty>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_isatty_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_isatty_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	20000840 	.word	0x20000840

08004e54 <_malloc_usable_size_r>:
 8004e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e58:	1f18      	subs	r0, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bfbc      	itt	lt
 8004e5e:	580b      	ldrlt	r3, [r1, r0]
 8004e60:	18c0      	addlt	r0, r0, r3
 8004e62:	4770      	bx	lr

08004e64 <_raise_r>:
 8004e64:	291f      	cmp	r1, #31
 8004e66:	b538      	push	{r3, r4, r5, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	d904      	bls.n	8004e78 <_raise_r+0x14>
 8004e6e:	2316      	movs	r3, #22
 8004e70:	6003      	str	r3, [r0, #0]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e7a:	b112      	cbz	r2, 8004e82 <_raise_r+0x1e>
 8004e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e80:	b94b      	cbnz	r3, 8004e96 <_raise_r+0x32>
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 f830 	bl	8004ee8 <_getpid_r>
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4601      	mov	r1, r0
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e92:	f000 b817 	b.w	8004ec4 <_kill_r>
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d00a      	beq.n	8004eb0 <_raise_r+0x4c>
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	d103      	bne.n	8004ea6 <_raise_r+0x42>
 8004e9e:	2316      	movs	r3, #22
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	e7e7      	b.n	8004e76 <_raise_r+0x12>
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004eac:	4628      	mov	r0, r5
 8004eae:	4798      	blx	r3
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7e0      	b.n	8004e76 <_raise_r+0x12>

08004eb4 <raise>:
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <raise+0xc>)
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f7ff bfd3 	b.w	8004e64 <_raise_r>
 8004ebe:	bf00      	nop
 8004ec0:	20000120 	.word	0x20000120

08004ec4 <_kill_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d07      	ldr	r5, [pc, #28]	; (8004ee4 <_kill_r+0x20>)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	f000 f82b 	bl	8004f2c <_kill>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d102      	bne.n	8004ee0 <_kill_r+0x1c>
 8004eda:	682b      	ldr	r3, [r5, #0]
 8004edc:	b103      	cbz	r3, 8004ee0 <_kill_r+0x1c>
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	bd38      	pop	{r3, r4, r5, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000840 	.word	0x20000840

08004ee8 <_getpid_r>:
 8004ee8:	f000 b810 	b.w	8004f0c <_getpid>

08004eec <_close>:
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <_close+0xc>)
 8004eee:	2258      	movs	r2, #88	; 0x58
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef6:	4770      	bx	lr
 8004ef8:	20000840 	.word	0x20000840

08004efc <_fstat>:
 8004efc:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <_fstat+0xc>)
 8004efe:	2258      	movs	r2, #88	; 0x58
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f04f 30ff 	mov.w	r0, #4294967295
 8004f06:	4770      	bx	lr
 8004f08:	20000840 	.word	0x20000840

08004f0c <_getpid>:
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <_getpid+0xc>)
 8004f0e:	2258      	movs	r2, #88	; 0x58
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295
 8004f16:	4770      	bx	lr
 8004f18:	20000840 	.word	0x20000840

08004f1c <_isatty>:
 8004f1c:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <_isatty+0xc>)
 8004f1e:	2258      	movs	r2, #88	; 0x58
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	2000      	movs	r0, #0
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000840 	.word	0x20000840

08004f2c <_kill>:
 8004f2c:	4b02      	ldr	r3, [pc, #8]	; (8004f38 <_kill+0xc>)
 8004f2e:	2258      	movs	r2, #88	; 0x58
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f04f 30ff 	mov.w	r0, #4294967295
 8004f36:	4770      	bx	lr
 8004f38:	20000840 	.word	0x20000840

08004f3c <_lseek>:
 8004f3c:	4b02      	ldr	r3, [pc, #8]	; (8004f48 <_lseek+0xc>)
 8004f3e:	2258      	movs	r2, #88	; 0x58
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	f04f 30ff 	mov.w	r0, #4294967295
 8004f46:	4770      	bx	lr
 8004f48:	20000840 	.word	0x20000840

08004f4c <_read>:
 8004f4c:	4b02      	ldr	r3, [pc, #8]	; (8004f58 <_read+0xc>)
 8004f4e:	2258      	movs	r2, #88	; 0x58
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	f04f 30ff 	mov.w	r0, #4294967295
 8004f56:	4770      	bx	lr
 8004f58:	20000840 	.word	0x20000840

08004f5c <_sbrk>:
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <_sbrk+0x14>)
 8004f5e:	6811      	ldr	r1, [r2, #0]
 8004f60:	4603      	mov	r3, r0
 8004f62:	b909      	cbnz	r1, 8004f68 <_sbrk+0xc>
 8004f64:	4903      	ldr	r1, [pc, #12]	; (8004f74 <_sbrk+0x18>)
 8004f66:	6011      	str	r1, [r2, #0]
 8004f68:	6810      	ldr	r0, [r2, #0]
 8004f6a:	4403      	add	r3, r0
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4770      	bx	lr
 8004f70:	20000844 	.word	0x20000844
 8004f74:	20000848 	.word	0x20000848

08004f78 <_write>:
 8004f78:	4b02      	ldr	r3, [pc, #8]	; (8004f84 <_write+0xc>)
 8004f7a:	2258      	movs	r2, #88	; 0x58
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	4770      	bx	lr
 8004f84:	20000840 	.word	0x20000840

08004f88 <_exit>:
 8004f88:	e7fe      	b.n	8004f88 <_exit>
	...

08004f8c <_init>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr

08004f98 <_fini>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr
